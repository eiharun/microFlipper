
SimpleGUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ec  08007450  08007450  00008450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b3c  08008b3c  0000a098  2**0
                  CONTENTS
  4 .ARM          00000008  08008b3c  08008b3c  00009b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b44  08008b44  0000a098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08008b4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000098  08008be4  0000a098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08008be4  0000a710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005404a  00000000  00000000  0000a0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f9  00000000  00000000  0005e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c78  00000000  00000000  00062510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002dc3  00000000  00000000  00066188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f2c  00000000  00000000  00068f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002663e  00000000  00000000  00090e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117725  00000000  00000000  000b74b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cebda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000109b0  00000000  00000000  001cec20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001df5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000098 	.word	0x20000098
 8000214:	00000000 	.word	0x00000000
 8000218:	08007438 	.word	0x08007438

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000009c 	.word	0x2000009c
 8000234:	08007438 	.word	0x08007438

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	78fa      	ldrb	r2, [r7, #3]
 8000538:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	4608      	mov	r0, r1
 8000552:	4611      	mov	r1, r2
 8000554:	461a      	mov	r2, r3
 8000556:	4603      	mov	r3, r0
 8000558:	817b      	strh	r3, [r7, #10]
 800055a:	460b      	mov	r3, r1
 800055c:	813b      	strh	r3, [r7, #8]
 800055e:	4613      	mov	r3, r2
 8000560:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000568:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800056a:	7dbb      	ldrb	r3, [r7, #22]
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf0c      	ite	eq
 8000570:	2301      	moveq	r3, #1
 8000572:	2300      	movne	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000578:	897a      	ldrh	r2, [r7, #10]
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	4413      	add	r3, r2
 800057e:	b298      	uxth	r0, r3
 8000580:	893b      	ldrh	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	893a      	ldrh	r2, [r7, #8]
 8000588:	8979      	ldrh	r1, [r7, #10]
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4603      	mov	r3, r0
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f001 f893 	bl	80016ba <u8g2_IsIntersection>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d040      	beq.n	800061c <u8g2_DrawHXBMP+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 800059e:	e035      	b.n	800060c <u8g2_DrawHXBMP+0xc4>
  {
    if( u8x8_pgm_read(b) & mask ) {
 80005a0:	6a3b      	ldr	r3, [r7, #32]
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	4013      	ands	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00c      	beq.n	80005c8 <u8g2_DrawHXBMP+0x80>
      u8g2->draw_color = color;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	7dba      	ldrb	r2, [r7, #22]
 80005b2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80005b6:	893a      	ldrh	r2, [r7, #8]
 80005b8:	8979      	ldrh	r1, [r7, #10]
 80005ba:	2300      	movs	r3, #0
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	68f8      	ldr	r0, [r7, #12]
 80005c2:	f000 ff72 	bl	80014aa <u8g2_DrawHVLine>
 80005c6:	e010      	b.n	80005ea <u8g2_DrawHXBMP+0xa2>
    } else if( u8g2->bitmap_transparency == 0 ) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10b      	bne.n	80005ea <u8g2_DrawHXBMP+0xa2>
      u8g2->draw_color = ncolor;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	7d7a      	ldrb	r2, [r7, #21]
 80005d6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80005da:	893a      	ldrh	r2, [r7, #8]
 80005dc:	8979      	ldrh	r1, [r7, #10]
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f000 ff60 	bl	80014aa <u8g2_DrawHVLine>
    }
   
    x++;
 80005ea:	897b      	ldrh	r3, [r7, #10]
 80005ec:	3301      	adds	r3, #1
 80005ee:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80005f0:	7dfb      	ldrb	r3, [r7, #23]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d104      	bne.n	8000606 <u8g2_DrawHXBMP+0xbe>
    {
      mask = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	75fb      	strb	r3, [r7, #23]
      b++;
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	3301      	adds	r3, #1
 8000604:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	3b01      	subs	r3, #1
 800060a:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1c6      	bne.n	80005a0 <u8g2_DrawHXBMP+0x58>
  }
  u8g2->draw_color = color;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	7dba      	ldrb	r2, [r7, #22]
 8000616:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 800061a:	e000      	b.n	800061e <u8g2_DrawHXBMP+0xd6>
    return;
 800061c:	bf00      	nop
}
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	817b      	strh	r3, [r7, #10]
 8000636:	460b      	mov	r3, r1
 8000638:	813b      	strh	r3, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8000642:	8afb      	ldrh	r3, [r7, #22]
 8000644:	3307      	adds	r3, #7
 8000646:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000648:	8afb      	ldrh	r3, [r7, #22]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800064e:	897a      	ldrh	r2, [r7, #10]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4413      	add	r3, r2
 8000654:	b298      	uxth	r0, r3
 8000656:	893a      	ldrh	r2, [r7, #8]
 8000658:	8c3b      	ldrh	r3, [r7, #32]
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	893a      	ldrh	r2, [r7, #8]
 8000660:	8979      	ldrh	r1, [r7, #10]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f001 f827 	bl	80016ba <u8g2_IsIntersection>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d017      	beq.n	80006a2 <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000672:	e012      	b.n	800069a <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8000674:	88f8      	ldrh	r0, [r7, #6]
 8000676:	893a      	ldrh	r2, [r7, #8]
 8000678:	8979      	ldrh	r1, [r7, #10]
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4603      	mov	r3, r0
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff61 	bl	8000548 <u8g2_DrawHXBMP>
    bitmap += blen;
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068a:	4413      	add	r3, r2
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800068e:	893b      	ldrh	r3, [r7, #8]
 8000690:	3301      	adds	r3, #1
 8000692:	813b      	strh	r3, [r7, #8]
    h--;
 8000694:	8c3b      	ldrh	r3, [r7, #32]
 8000696:	3b01      	subs	r3, #1
 8000698:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800069a:	8c3b      	ldrh	r3, [r7, #32]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1e9      	bne.n	8000674 <u8g2_DrawXBMP+0x50>
 80006a0:	e000      	b.n	80006a4 <u8g2_DrawXBMP+0x80>
    return;
 80006a2:	bf00      	nop
  }
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	4608      	mov	r0, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4603      	mov	r3, r0
 80006ba:	817b      	strh	r3, [r7, #10]
 80006bc:	460b      	mov	r3, r1
 80006be:	813b      	strh	r3, [r7, #8]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80006c4:	897a      	ldrh	r2, [r7, #10]
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4413      	add	r3, r2
 80006ca:	b298      	uxth	r0, r3
 80006cc:	893a      	ldrh	r2, [r7, #8]
 80006ce:	8b3b      	ldrh	r3, [r7, #24]
 80006d0:	4413      	add	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	893a      	ldrh	r2, [r7, #8]
 80006d6:	8979      	ldrh	r1, [r7, #10]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	4603      	mov	r3, r0
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f000 ffec 	bl	80016ba <u8g2_IsIntersection>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d012      	beq.n	800070e <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80006e8:	e00d      	b.n	8000706 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	893a      	ldrh	r2, [r7, #8]
 80006ee:	8979      	ldrh	r1, [r7, #10]
 80006f0:	2000      	movs	r0, #0
 80006f2:	9000      	str	r0, [sp, #0]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 fed8 	bl	80014aa <u8g2_DrawHVLine>
    y++;    
 80006fa:	893b      	ldrh	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	813b      	strh	r3, [r7, #8]
    h--;
 8000700:	8b3b      	ldrh	r3, [r7, #24]
 8000702:	3b01      	subs	r3, #1
 8000704:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8000706:	8b3b      	ldrh	r3, [r7, #24]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1ee      	bne.n	80006ea <u8g2_DrawBox+0x40>
 800070c:	e000      	b.n	8000710 <u8g2_DrawBox+0x66>
    return;
 800070e:	bf00      	nop
  }
}
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800072c:	461a      	mov	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f006 fe4a 	bl	80073de <memset>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af02      	add	r7, sp, #8
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	70fb      	strb	r3, [r7, #3]
 800075e:	4613      	mov	r3, r2
 8000760:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	7c1b      	ldrb	r3, [r3, #16]
 8000768:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000772:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	b29b      	uxth	r3, r3
 8000778:	89ba      	ldrh	r2, [r7, #12]
 800077a:	fb12 f303 	smulbb	r3, r2, r3
 800077e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000780:	89bb      	ldrh	r3, [r7, #12]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000786:	89bb      	ldrh	r3, [r7, #12]
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	4413      	add	r3, r2
 800078c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800078e:	7bf9      	ldrb	r1, [r7, #15]
 8000790:	78ba      	ldrb	r2, [r7, #2]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	460b      	mov	r3, r1
 8000798:	2100      	movs	r1, #0
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f001 fc29 	bl	8001ff2 <u8x8_DrawTile>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80007ba:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80007c2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7c5b      	ldrb	r3, [r3, #17]
 80007ca:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80007cc:	7bba      	ldrb	r2, [r7, #14]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffbd 	bl	8000752 <u8g2_send_tile_row>
    src_row++;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	3301      	adds	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	7b7b      	ldrb	r3, [r7, #13]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d203      	bcs.n	80007f4 <u8g2_send_buffer+0x4c>
 80007ec:	7bba      	ldrb	r2, [r7, #14]
 80007ee:	7b3b      	ldrb	r3, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3eb      	bcc.n	80007cc <u8g2_send_buffer+0x24>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffcf 	bl	80007a8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f001 fc42 	bl	8002094 <u8x8_RefreshDisplay>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2208      	movs	r2, #8
 8000824:	701a      	strb	r2, [r3, #0]
  return buf;
 8000826:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	200000b4 	.word	0x200000b4

08000838 <u8g2_Setup_ssd1309_128x64_noname2_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname2_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af02      	add	r7, sp, #8
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname2, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <u8g2_Setup_ssd1309_128x64_noname2_f+0x44>)
 800084e:	490c      	ldr	r1, [pc, #48]	@ (8000880 <u8g2_Setup_ssd1309_128x64_noname2_f+0x48>)
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f001 fc7f 	bl	8002154 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000856:	f107 0313 	add.w	r3, r7, #19
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffdc 	bl	8000818 <u8g2_m_16_8_f>
 8000860:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000862:	7cfa      	ldrb	r2, [r7, #19]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <u8g2_Setup_ssd1309_128x64_noname2_f+0x4c>)
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f001 f80e 	bl	800188e <u8g2_SetupBuffer>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08001d25 	.word	0x08001d25
 8000880:	08001ea9 	.word	0x08001ea9
 8000884:	08001711 	.word	0x08001711

08000888 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	81fb      	strh	r3, [r7, #14]
    font++;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	4413      	add	r3, r2
 80008dc:	81fb      	strh	r3, [r7, #14]
    return pos;
 80008de:	89fb      	ldrh	r3, [r7, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff ffc5 	bl	8000888 <u8g2_font_get_byte>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000906:	2101      	movs	r1, #1
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	f7ff ffbd 	bl	8000888 <u8g2_font_get_byte>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000916:	2102      	movs	r1, #2
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f7ff ffb5 	bl	8000888 <u8g2_font_get_byte>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000926:	2103      	movs	r1, #3
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff ffad 	bl	8000888 <u8g2_font_get_byte>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000936:	2104      	movs	r1, #4
 8000938:	6838      	ldr	r0, [r7, #0]
 800093a:	f7ff ffa5 	bl	8000888 <u8g2_font_get_byte>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000946:	2105      	movs	r1, #5
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f7ff ff9d 	bl	8000888 <u8g2_font_get_byte>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000956:	2106      	movs	r1, #6
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f7ff ff95 	bl	8000888 <u8g2_font_get_byte>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000966:	2107      	movs	r1, #7
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f7ff ff8d 	bl	8000888 <u8g2_font_get_byte>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000976:	2108      	movs	r1, #8
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f7ff ff85 	bl	8000888 <u8g2_font_get_byte>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000986:	2109      	movs	r1, #9
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff ff7d 	bl	8000888 <u8g2_font_get_byte>
 800098e:	4603      	mov	r3, r0
 8000990:	b25a      	sxtb	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000996:	210a      	movs	r1, #10
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f7ff ff75 	bl	8000888 <u8g2_font_get_byte>
 800099e:	4603      	mov	r3, r0
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80009a6:	210b      	movs	r1, #11
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f7ff ff6d 	bl	8000888 <u8g2_font_get_byte>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b25a      	sxtb	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80009b6:	210c      	movs	r1, #12
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f7ff ff65 	bl	8000888 <u8g2_font_get_byte>
 80009be:	4603      	mov	r3, r0
 80009c0:	b25a      	sxtb	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80009c6:	210d      	movs	r1, #13
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f7ff ff5d 	bl	8000888 <u8g2_font_get_byte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80009d6:	210e      	movs	r1, #14
 80009d8:	6838      	ldr	r0, [r7, #0]
 80009da:	f7ff ff55 	bl	8000888 <u8g2_font_get_byte>
 80009de:	4603      	mov	r3, r0
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80009e6:	210f      	movs	r1, #15
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f7ff ff4d 	bl	8000888 <u8g2_font_get_byte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b25a      	sxtb	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80009f6:	2110      	movs	r1, #16
 80009f8:	6838      	ldr	r0, [r7, #0]
 80009fa:	f7ff ff45 	bl	8000888 <u8g2_font_get_byte>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b25a      	sxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000a06:	2111      	movs	r1, #17
 8000a08:	6838      	ldr	r0, [r7, #0]
 8000a0a:	f7ff ff4f 	bl	80008ac <u8g2_font_get_word>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000a16:	2113      	movs	r1, #19
 8000a18:	6838      	ldr	r0, [r7, #0]
 8000a1a:	f7ff ff47 	bl	80008ac <u8g2_font_get_word>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000a26:	2115      	movs	r1, #21
 8000a28:	6838      	ldr	r0, [r7, #0]
 8000a2a:	f7ff ff3f 	bl	80008ac <u8g2_font_get_word>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	82da      	strh	r2, [r3, #22]
#endif
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7b1b      	ldrb	r3, [r3, #12]
 8000a4e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	fa42 f303 	asr.w	r3, r2, r3
 8000a60:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000a66:	7bba      	ldrb	r2, [r7, #14]
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	2b07      	cmp	r3, #7
 8000a72:	d91a      	bls.n	8000aaa <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000a74:	2308      	movs	r3, #8
 8000a76:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000a78:	7b3a      	ldrb	r2, [r7, #12]
 8000a7a:	7b7b      	ldrb	r3, [r7, #13]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	7b3b      	ldrb	r3, [r7, #12]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4013      	ands	r3, r2
 8000abe:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7bba      	ldrb	r2, [r7, #14]
 8000ac4:	731a      	strb	r2, [r3, #12]
  return val;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffaa 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000af8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
  return v;
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000b1a:	b490      	push	{r4, r7}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4604      	mov	r4, r0
 8000b22:	4608      	mov	r0, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	461a      	mov	r2, r3
 8000b28:	4623      	mov	r3, r4
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	717b      	strb	r3, [r7, #5]
 8000b30:	460b      	mov	r3, r1
 8000b32:	713b      	strb	r3, [r7, #4]
 8000b34:	4613      	mov	r3, r2
 8000b36:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d014      	beq.n	8000b68 <u8g2_add_vector_y+0x4e>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	dc19      	bgt.n	8000b76 <u8g2_add_vector_y+0x5c>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <u8g2_add_vector_y+0x32>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d007      	beq.n	8000b5a <u8g2_add_vector_y+0x40>
 8000b4a:	e014      	b.n	8000b76 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000b4c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4413      	add	r3, r2
 8000b56:	80fb      	strh	r3, [r7, #6]
      break;
 8000b58:	e014      	b.n	8000b84 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4413      	add	r3, r2
 8000b64:	80fb      	strh	r3, [r7, #6]
      break;
 8000b66:	e00d      	b.n	8000b84 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000b68:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	88fa      	ldrh	r2, [r7, #6]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	80fb      	strh	r3, [r7, #6]
      break;
 8000b74:	e006      	b.n	8000b84 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000b76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	88fa      	ldrh	r2, [r7, #6]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	80fb      	strh	r3, [r7, #6]
      break;      
 8000b82:	bf00      	nop
  }
  return dy;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc90      	pop	{r4, r7}
 8000b8e:	4770      	bx	lr

08000b90 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000b90:	b490      	push	{r4, r7}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4604      	mov	r4, r0
 8000b98:	4608      	mov	r0, r1
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	80fb      	strh	r3, [r7, #6]
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	717b      	strb	r3, [r7, #5]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	713b      	strb	r3, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d014      	beq.n	8000bde <u8g2_add_vector_x+0x4e>
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	dc19      	bgt.n	8000bec <u8g2_add_vector_x+0x5c>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <u8g2_add_vector_x+0x32>
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d007      	beq.n	8000bd0 <u8g2_add_vector_x+0x40>
 8000bc0:	e014      	b.n	8000bec <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000bc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4413      	add	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
      break;
 8000bce:	e014      	b.n	8000bfa <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000bd0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	80fb      	strh	r3, [r7, #6]
      break;
 8000bdc:	e00d      	b.n	8000bfa <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000bde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	80fb      	strh	r3, [r7, #6]
      break;
 8000bea:	e006      	b.n	8000bfa <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000bec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	80fb      	strh	r3, [r7, #6]
      break;      
 8000bf8:	bf00      	nop
  }
  return dx;
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc90      	pop	{r4, r7}
 8000c04:	4770      	bx	lr

08000c06 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b088      	sub	sp, #32
 8000c0a:	af02      	add	r7, sp, #8
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	4613      	mov	r3, r2
 8000c14:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3360      	adds	r3, #96	@ 0x60
 8000c1a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c26:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c2e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c36:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	7d7b      	ldrb	r3, [r7, #21]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000c44:	7dfa      	ldrb	r2, [r7, #23]
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d201      	bcs.n	8000c50 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
 8000c4e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	889b      	ldrh	r3, [r3, #4]
 8000c54:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	88db      	ldrh	r3, [r3, #6]
 8000c5a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000c5c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c60:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	7c1b      	ldrb	r3, [r3, #16]
 8000c68:	89b8      	ldrh	r0, [r7, #12]
 8000c6a:	f7ff ff91 	bl	8000b90 <u8g2_add_vector_x>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000c72:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c76:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	7c1b      	ldrb	r3, [r3, #16]
 8000c7e:	8978      	ldrh	r0, [r7, #10]
 8000c80:	f7ff ff4b 	bl	8000b1a <u8g2_add_vector_y>
 8000c84:	4603      	mov	r3, r0
 8000c86:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d010      	beq.n	8000cb0 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	7b9a      	ldrb	r2, [r3, #14]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	7c1b      	ldrb	r3, [r3, #16]
 8000ca0:	897a      	ldrh	r2, [r7, #10]
 8000ca2:	89b9      	ldrh	r1, [r7, #12]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fbfe 	bl	80014aa <u8g2_DrawHVLine>
 8000cae:	e013      	b.n	8000cd8 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	7b5b      	ldrb	r3, [r3, #13]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10f      	bne.n	8000cd8 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	7bda      	ldrb	r2, [r3, #15]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	b298      	uxth	r0, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	7c1b      	ldrb	r3, [r3, #16]
 8000cca:	897a      	ldrh	r2, [r7, #10]
 8000ccc:	89b9      	ldrh	r1, [r7, #12]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 fbe9 	bl	80014aa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000cd8:	7dfa      	ldrb	r2, [r7, #23]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d309      	bcc.n	8000cf4 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8000ce0:	7dfa      	ldrb	r2, [r7, #23]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	757b      	strb	r3, [r7, #21]
    ly++;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000cf2:	e79d      	b.n	8000c30 <u8g2_font_decode_len+0x2a>
      break;
 8000cf4:	bf00      	nop
  }
  lx += cnt;
 8000cf6:	7d7a      	ldrb	r2, [r7, #21]
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000cfe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8000d06:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	725a      	strb	r2, [r3, #9]
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3360      	adds	r3, #96	@ 0x60
 8000d24:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff fe7f 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b25a      	sxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8000d4e:	4619      	mov	r1, r3
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fe74 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	7b9b      	ldrb	r3, [r3, #14]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf0c      	ite	eq
 8000d70:	2301      	moveq	r3, #1
 8000d72:	2300      	movne	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	73da      	strb	r2, [r3, #15]
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3360      	adds	r3, #96	@ 0x60
 8000d92:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8000d94:	6839      	ldr	r1, [r7, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffbd 	bl	8000d16 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8000da2:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8000daa:	4619      	mov	r1, r3
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff fe91 	bl	8000ad4 <u8g2_font_decode_get_signed_bits>
 8000db2:	4603      	mov	r3, r0
 8000db4:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff fe88 	bl	8000ad4 <u8g2_font_decode_get_signed_bits>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6978      	ldr	r0, [r7, #20]
 8000dd2:	f7ff fe7f 	bl	8000ad4 <u8g2_font_decode_get_signed_bits>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f340 80d7 	ble.w	8000f94 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	8898      	ldrh	r0, [r3, #4]
 8000dea:	7cfa      	ldrb	r2, [r7, #19]
 8000dec:	7c7b      	ldrb	r3, [r7, #17]
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	425b      	negs	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b25a      	sxtb	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	7c1b      	ldrb	r3, [r3, #16]
 8000dfc:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e00:	f7ff fec6 	bl	8000b90 <u8g2_add_vector_x>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	88d8      	ldrh	r0, [r3, #6]
 8000e10:	7cfa      	ldrb	r2, [r7, #19]
 8000e12:	7c7b      	ldrb	r3, [r7, #17]
 8000e14:	4413      	add	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	425b      	negs	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	7c1b      	ldrb	r3, [r3, #16]
 8000e22:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e26:	f7ff fe78 	bl	8000b1a <u8g2_add_vector_y>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	88db      	ldrh	r3, [r3, #6]
 8000e3c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8000e3e:	8bfb      	ldrh	r3, [r7, #30]
 8000e40:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8000e42:	8b7b      	ldrh	r3, [r7, #26]
 8000e44:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	7c1b      	ldrb	r3, [r3, #16]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d85a      	bhi.n	8000f04 <u8g2_font_decode_glyph+0x180>
 8000e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <u8g2_font_decode_glyph+0xd0>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000e65 	.word	0x08000e65
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	08000ea9 	.word	0x08000ea9
 8000e60:	08000edd 	.word	0x08000edd
      {
	case 0:
	    x1 += decode->glyph_width;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	8bbb      	ldrh	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8000e72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	8b3b      	ldrh	r3, [r7, #24]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	833b      	strh	r3, [r7, #24]
	    break;
 8000e7e:	e041      	b.n	8000f04 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8000e80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	8bfa      	ldrh	r2, [r7, #30]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000e8c:	8bfb      	ldrh	r3, [r7, #30]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000e92:	8bbb      	ldrh	r3, [r7, #28]
 8000e94:	3301      	adds	r3, #1
 8000e96:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	8b3b      	ldrh	r3, [r7, #24]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	833b      	strh	r3, [r7, #24]
	    break;
 8000ea6:	e02d      	b.n	8000f04 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	8bfa      	ldrh	r2, [r7, #30]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000eb6:	8bfb      	ldrh	r3, [r7, #30]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000ebc:	8bbb      	ldrh	r3, [r7, #28]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8000ec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	8b7a      	ldrh	r2, [r7, #26]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ece:	8b7b      	ldrh	r3, [r7, #26]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000ed4:	8b3b      	ldrh	r3, [r7, #24]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000eda:	e013      	b.n	8000f04 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8000edc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	8bbb      	ldrh	r3, [r7, #28]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	8b7a      	ldrh	r2, [r7, #26]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ef6:	8b7b      	ldrh	r3, [r7, #26]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	3301      	adds	r3, #1
 8000f00:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000f02:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000f04:	8bb8      	ldrh	r0, [r7, #28]
 8000f06:	8b7a      	ldrh	r2, [r7, #26]
 8000f08:	8bf9      	ldrh	r1, [r7, #30]
 8000f0a:	8b3b      	ldrh	r3, [r7, #24]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fbd2 	bl	80016ba <u8g2_IsIntersection>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <u8g2_font_decode_glyph+0x19e>
	return d;
 8000f1c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000f20:	e03a      	b.n	8000f98 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000f34:	4619      	mov	r1, r3
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff fd81 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8000f46:	4619      	mov	r1, r3
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff fd78 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fe54 	bl	8000c06 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fe4e 	bl	8000c06 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff fd66 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ec      	bne.n	8000f52 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000f7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dd00      	ble.n	8000f88 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f86:	e7d2      	b.n	8000f2e <u8g2_font_decode_glyph+0x1aa>
	break;
 8000f88:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	7b9a      	ldrb	r2, [r3, #14]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8000f94:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3317      	adds	r3, #23
 8000fb6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	2bff      	cmp	r3, #255	@ 0xff
 8000fbc:	d82a      	bhi.n	8001014 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	2b60      	cmp	r3, #96	@ 0x60
 8000fc2:	d907      	bls.n	8000fd4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8000fca:	461a      	mov	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	2b40      	cmp	r3, #64	@ 0x40
 8000fd8:	d906      	bls.n	8000fe8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d04e      	beq.n	8001090 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d102      	bne.n	8001004 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3302      	adds	r3, #2
 8001002:	e049      	b.n	8001098 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001012:	e7e9      	b.n	8000fe8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800101a:	461a      	mov	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	4413      	add	r3, r2
 8001020:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001026:	2100      	movs	r1, #0
 8001028:	6938      	ldr	r0, [r7, #16]
 800102a:	f7ff fc3f 	bl	80008ac <u8g2_font_get_word>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001038:	2102      	movs	r1, #2
 800103a:	6938      	ldr	r0, [r7, #16]
 800103c:	f7ff fc36 	bl	80008ac <u8g2_font_get_word>
 8001040:	4603      	mov	r3, r0
 8001042:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3304      	adds	r3, #4
 8001048:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800104a:	89fa      	ldrh	r2, [r7, #14]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3e9      	bcc.n	8001026 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	4313      	orrs	r3, r2
 800106a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d010      	beq.n	8001094 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001072:	89fa      	ldrh	r2, [r7, #14]
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	429a      	cmp	r2, r3
 8001078:	d102      	bne.n	8001080 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3303      	adds	r3, #3
 800107e:	e00b      	b.n	8001098 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3302      	adds	r3, #2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800108e:	e7e0      	b.n	8001052 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001090:	bf00      	nop
 8001092:	e000      	b.n	8001096 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001094:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	4608      	mov	r0, r1
 80010aa:	4611      	mov	r1, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	817b      	strh	r3, [r7, #10]
 80010b2:	460b      	mov	r3, r1
 80010b4:	813b      	strh	r3, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	897a      	ldrh	r2, [r7, #10]
 80010c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	893a      	ldrh	r2, [r7, #8]
 80010ca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff ff64 	bl	8000fa0 <u8g2_font_get_glyph_data>
 80010d8:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fe4e 	bl	8000d84 <u8g2_font_decode_glyph>
 80010e8:	4603      	mov	r3, r0
 80010ea:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80010ec:	8afb      	ldrh	r3, [r7, #22]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	4608      	mov	r0, r1
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	4603      	mov	r3, r0
 8001108:	817b      	strh	r3, [r7, #10]
 800110a:	460b      	mov	r3, r1
 800110c:	813b      	strh	r3, [r7, #8]
 800110e:	4613      	mov	r3, r2
 8001110:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001118:	2b03      	cmp	r3, #3
 800111a:	d833      	bhi.n	8001184 <u8g2_DrawGlyph+0x8c>
 800111c:	a201      	add	r2, pc, #4	@ (adr r2, 8001124 <u8g2_DrawGlyph+0x2c>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001135 	.word	0x08001135
 8001128:	08001149 	.word	0x08001149
 800112c:	0800115d 	.word	0x0800115d
 8001130:	08001171 	.word	0x08001171
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	893b      	ldrh	r3, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	813b      	strh	r3, [r7, #8]
      break;
 8001146:	e01d      	b.n	8001184 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	4798      	blx	r3
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	897b      	ldrh	r3, [r7, #10]
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	817b      	strh	r3, [r7, #10]
      break;
 800115a:	e013      	b.n	8001184 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	4798      	blx	r3
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	893b      	ldrh	r3, [r7, #8]
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	813b      	strh	r3, [r7, #8]
      break;
 800116e:	e009      	b.n	8001184 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	4798      	blx	r3
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	897b      	ldrh	r3, [r7, #10]
 800117e:	4413      	add	r3, r2
 8001180:	817b      	strh	r3, [r7, #10]
      break;
 8001182:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	893a      	ldrh	r2, [r7, #8]
 8001188:	8979      	ldrh	r1, [r7, #10]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f7ff ff88 	bl	80010a0 <u8g2_font_draw_glyph>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop

0800119c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	817b      	strh	r3, [r7, #10]
 80011aa:	4613      	mov	r3, r2
 80011ac:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fcb3 	bl	8001b1a <u8x8_utf8_init>
  sum = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	4611      	mov	r1, r2
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	4798      	blx	r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80011ca:	8abb      	ldrh	r3, [r7, #20]
 80011cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d038      	beq.n	8001246 <u8g2_draw_string+0xaa>
      break;
    str++;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d0e9      	beq.n	80011b8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80011e4:	8abb      	ldrh	r3, [r7, #20]
 80011e6:	893a      	ldrh	r2, [r7, #8]
 80011e8:	8979      	ldrh	r1, [r7, #10]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff84 	bl	80010f8 <u8g2_DrawGlyph>
 80011f0:	4603      	mov	r3, r0
 80011f2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d81e      	bhi.n	800123c <u8g2_draw_string+0xa0>
 80011fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001204 <u8g2_draw_string+0x68>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	0800121f 	.word	0x0800121f
 800120c:	08001229 	.word	0x08001229
 8001210:	08001233 	.word	0x08001233
      {
	case 0:
	  x += delta;
 8001214:	897a      	ldrh	r2, [r7, #10]
 8001216:	8a7b      	ldrh	r3, [r7, #18]
 8001218:	4413      	add	r3, r2
 800121a:	817b      	strh	r3, [r7, #10]
	  break;
 800121c:	e00e      	b.n	800123c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800121e:	893a      	ldrh	r2, [r7, #8]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	4413      	add	r3, r2
 8001224:	813b      	strh	r3, [r7, #8]
	  break;
 8001226:	e009      	b.n	800123c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001228:	897a      	ldrh	r2, [r7, #10]
 800122a:	8a7b      	ldrh	r3, [r7, #18]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	817b      	strh	r3, [r7, #10]
	  break;
 8001230:	e004      	b.n	800123c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001232:	893a      	ldrh	r2, [r7, #8]
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	813b      	strh	r3, [r7, #8]
	  break;
 800123a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800123c:	8afa      	ldrh	r2, [r7, #22]
 800123e:	8a7b      	ldrh	r3, [r7, #18]
 8001240:	4413      	add	r3, r2
 8001242:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001244:	e7b8      	b.n	80011b8 <u8g2_draw_string+0x1c>
      break;
 8001246:	bf00      	nop
    }
  }
  return sum;
 8001248:	8afb      	ldrh	r3, [r7, #22]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop

08001254 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	817b      	strh	r3, [r7, #10]
 8001262:	4613      	mov	r3, r2
 8001264:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <u8g2_DrawStr+0x30>)
 800126a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800126c:	893a      	ldrh	r2, [r7, #8]
 800126e:	8979      	ldrh	r1, [r7, #10]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff ff92 	bl	800119c <u8g2_draw_string>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08001b37 	.word	0x08001b37

08001288 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05d      	beq.n	8001354 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d04d      	beq.n	8001356 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d11c      	bne.n	80012fe <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80012d0:	429a      	cmp	r2, r3
 80012d2:	da05      	bge.n	80012e0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dd32      	ble.n	8001356 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80012fc:	e02b      	b.n	8001356 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800130c:	4619      	mov	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001314:	440b      	add	r3, r1
 8001316:	429a      	cmp	r2, r3
 8001318:	da0d      	bge.n	8001336 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b25a      	sxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001342:	429a      	cmp	r2, r3
 8001344:	dd07      	ble.n	8001356 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001352:	e000      	b.n	8001356 <u8g2_UpdateRefHeight+0xce>
    return;
 8001354:	bf00      	nop
  }  
}
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <u8g2_SetFontPosBaseline+0x1c>)
 8001384:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	08001361 	.word	0x08001361

08001398 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d00b      	beq.n	80013c4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3374      	adds	r3, #116	@ 0x74
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fa97 	bl	80008ec <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff62 	bl	8001288 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	460b      	mov	r3, r1
 80013dc:	80fb      	strh	r3, [r7, #6]
 80013de:	4613      	mov	r3, r2
 80013e0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80013e8:	8afb      	ldrh	r3, [r7, #22]
 80013ea:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	881a      	ldrh	r2, [r3, #0]
 80013f0:	8abb      	ldrh	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80013f6:	8afa      	ldrh	r2, [r7, #22]
 80013f8:	8abb      	ldrh	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d90b      	bls.n	8001416 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80013fe:	8afa      	ldrh	r2, [r7, #22]
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d205      	bcs.n	8001412 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	82bb      	strh	r3, [r7, #20]
      b--;
 800140a:	8abb      	ldrh	r3, [r7, #20]
 800140c:	3b01      	subs	r3, #1
 800140e:	82bb      	strh	r3, [r7, #20]
 8001410:	e001      	b.n	8001416 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001416:	8afa      	ldrh	r2, [r7, #22]
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d301      	bcc.n	8001422 <u8g2_clip_intersection2+0x56>
    return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e01c      	b.n	800145c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001422:	8aba      	ldrh	r2, [r7, #20]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	429a      	cmp	r2, r3
 8001428:	d801      	bhi.n	800142e <u8g2_clip_intersection2+0x62>
    return 0;
 800142a:	2300      	movs	r3, #0
 800142c:	e016      	b.n	800145c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800142e:	8afa      	ldrh	r2, [r7, #22]
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	429a      	cmp	r2, r3
 8001434:	d201      	bcs.n	800143a <u8g2_clip_intersection2+0x6e>
    a = c;
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800143a:	8aba      	ldrh	r2, [r7, #20]
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d901      	bls.n	8001446 <u8g2_clip_intersection2+0x7a>
    b = d;
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8afa      	ldrh	r2, [r7, #22]
 800144a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800144c:	8aba      	ldrh	r2, [r7, #20]
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	8aba      	ldrh	r2, [r7, #20]
 8001458:	801a      	strh	r2, [r3, #0]
  return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	817b      	strh	r3, [r7, #10]
 800147a:	460b      	mov	r3, r1
 800147c:	813b      	strh	r3, [r7, #8]
 800147e:	4613      	mov	r3, r2
 8001480:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001486:	893a      	ldrh	r2, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001490:	88f8      	ldrh	r0, [r7, #6]
 8001492:	893a      	ldrh	r2, [r7, #8]
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4603      	mov	r3, r0
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	47a0      	blx	r4
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af02      	add	r7, sp, #8
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	4608      	mov	r0, r1
 80014b4:	4611      	mov	r1, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	460b      	mov	r3, r1
 80014be:	813b      	strh	r3, [r7, #8]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d072      	beq.n	80015ba <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d91a      	bls.n	8001510 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80014da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d109      	bne.n	80014f6 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80014e2:	897a      	ldrh	r2, [r7, #10]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	817b      	strh	r3, [r7, #10]
	  x++;
 80014ec:	897b      	ldrh	r3, [r7, #10]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	817b      	strh	r3, [r7, #10]
 80014f4:	e00c      	b.n	8001510 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80014f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d108      	bne.n	8001510 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80014fe:	893a      	ldrh	r2, [r7, #8]
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	813b      	strh	r3, [r7, #8]
	  y++;
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	3301      	adds	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800151c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11a      	bne.n	800155a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800152a:	893b      	ldrh	r3, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d83b      	bhi.n	80015a8 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	429a      	cmp	r2, r3
 800153a:	d937      	bls.n	80015ac <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001548:	1db9      	adds	r1, r7, #6
 800154a:	f107 000a 	add.w	r0, r7, #10
 800154e:	f7ff ff3d 	bl	80013cc <u8g2_clip_intersection2>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11a      	bne.n	800158e <u8g2_DrawHVLine+0xe4>
	  return;
 8001558:	e02f      	b.n	80015ba <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	429a      	cmp	r2, r3
 8001564:	d824      	bhi.n	80015b0 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	429a      	cmp	r2, r3
 8001570:	d920      	bls.n	80015b4 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800157e:	1db9      	adds	r1, r7, #6
 8001580:	f107 0008 	add.w	r0, r7, #8
 8001584:	f7ff ff22 	bl	80013cc <u8g2_clip_intersection2>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d014      	beq.n	80015b8 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	689c      	ldr	r4, [r3, #8]
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	893a      	ldrh	r2, [r7, #8]
 8001598:	88f8      	ldrh	r0, [r7, #6]
 800159a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4603      	mov	r3, r0
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	47a0      	blx	r4
 80015a6:	e008      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015a8:	bf00      	nop
 80015aa:	e006      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015ac:	bf00      	nop
 80015ae:	e004      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015b0:	bf00      	nop
 80015b2:	e002      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015b4:	bf00      	nop
 80015b6:	e000      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015b8:	bf00      	nop
    }
}
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d31a      	bcc.n	8001612 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80015e2:	883a      	ldrh	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d216      	bcs.n	8001616 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d312      	bcc.n	800161a <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d20e      	bcs.n	800161e <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001600:	883a      	ldrh	r2, [r7, #0]
 8001602:	8879      	ldrh	r1, [r7, #2]
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff4d 	bl	80014aa <u8g2_DrawHVLine>
 8001610:	e006      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 8001612:	bf00      	nop
 8001614:	e004      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 8001616:	bf00      	nop
 8001618:	e002      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 800161a:	bf00      	nop
 800161c:	e000      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 800161e:	bf00      	nop
}
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d903      	bls.n	8001648 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001654:	b490      	push	{r4, r7}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4604      	mov	r4, r0
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4623      	mov	r3, r4
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	4603      	mov	r3, r0
 8001668:	80bb      	strh	r3, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]
 800166e:	4613      	mov	r3, r2
 8001670:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20d      	bcs.n	8001696 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800167a:	883a      	ldrh	r2, [r7, #0]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	429a      	cmp	r2, r3
 8001680:	d901      	bls.n	8001686 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001682:	2301      	movs	r3, #1
 8001684:	e014      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	883b      	ldrh	r3, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d901      	bls.n	8001692 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001692:	2300      	movs	r3, #0
 8001694:	e00c      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001696:	883a      	ldrh	r2, [r7, #0]
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	429a      	cmp	r2, r3
 800169c:	d907      	bls.n	80016ae <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	883b      	ldrh	r3, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d901      	bls.n	80016aa <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e002      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80016ae:	2300      	movs	r3, #0
    }
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc90      	pop	{r4, r7}
 80016b8:	4770      	bx	lr

080016ba <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	4608      	mov	r0, r1
 80016c4:	4611      	mov	r1, r2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	817b      	strh	r3, [r7, #10]
 80016cc:	460b      	mov	r3, r1
 80016ce:	813b      	strh	r3, [r7, #8]
 80016d0:	4613      	mov	r3, r2
 80016d2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 80016e0:	8b3b      	ldrh	r3, [r7, #24]
 80016e2:	893a      	ldrh	r2, [r7, #8]
 80016e4:	f7ff ffb6 	bl	8001654 <u8g2_is_intersection_decision_tree>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <u8g2_IsIntersection+0x38>
    return 0; 
 80016ee:	2300      	movs	r3, #0
 80016f0:	e00a      	b.n	8001708 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	897a      	ldrh	r2, [r7, #10]
 8001702:	f7ff ffa7 	bl	8001654 <u8g2_is_intersection_decision_tree>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4603      	mov	r3, r0
 8001720:	817b      	strh	r3, [r7, #10]
 8001722:	460b      	mov	r3, r1
 8001724:	813b      	strh	r3, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800172a:	893b      	ldrh	r3, [r7, #8]
 800172c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800172e:	7efb      	ldrb	r3, [r7, #27]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800173a:	7e3a      	ldrb	r2, [r7, #24]
 800173c:	7efb      	ldrb	r3, [r7, #27]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001752:	2b01      	cmp	r3, #1
 8001754:	d801      	bhi.n	800175a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001756:	7e3b      	ldrb	r3, [r7, #24]
 8001758:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001760:	2b01      	cmp	r3, #1
 8001762:	d001      	beq.n	8001768 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001764:	7e3b      	ldrb	r3, [r7, #24]
 8001766:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001768:	893b      	ldrh	r3, [r7, #8]
 800176a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	7c1b      	ldrb	r3, [r3, #16]
 800177a:	461a      	mov	r2, r3
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	fb13 f302 	smulbb	r3, r3, r2
 8001782:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001788:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800178a:	8afb      	ldrh	r3, [r7, #22]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001792:	897b      	ldrh	r3, [r7, #10]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800179a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d117      	bne.n	80017d2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	7ebb      	ldrb	r3, [r7, #26]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	7e7b      	ldrb	r3, [r7, #25]
 80017b6:	4053      	eors	r3, r2
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	701a      	strb	r2, [r3, #0]
	ptr++;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
	len--;
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e8      	bne.n	80017a2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80017d0:	e038      	b.n	8001844 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	7ebb      	ldrb	r3, [r7, #26]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	7e7b      	ldrb	r3, [r7, #25]
 80017e6:	4053      	eors	r3, r2
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80017ee:	7efb      	ldrb	r3, [r7, #27]
 80017f0:	3301      	adds	r3, #1
 80017f2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80017f4:	7efb      	ldrb	r3, [r7, #27]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	76fb      	strb	r3, [r7, #27]
      len--;
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	3b01      	subs	r3, #1
 8001800:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001802:	7efb      	ldrb	r3, [r7, #27]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d114      	bne.n	8001832 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800180c:	461a      	mov	r2, r3
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800181a:	2b01      	cmp	r3, #1
 800181c:	d801      	bhi.n	8001822 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001828:	2b01      	cmp	r3, #1
 800182a:	d008      	beq.n	800183e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800182c:	2301      	movs	r3, #1
 800182e:	767b      	strb	r3, [r7, #25]
 8001830:	e005      	b.n	800183e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001832:	7ebb      	ldrb	r3, [r7, #26]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001838:	7e7b      	ldrb	r3, [r7, #25]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1c6      	bne.n	80017d2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001844:	bf00      	nop
 8001846:	3724      	adds	r7, #36	@ 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800186e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001878:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	79fa      	ldrb	r2, [r7, #7]
 80018b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ffa9 	bl	8001850 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fd3a 	bl	8001378 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001928:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	89fa      	ldrh	r2, [r7, #14]
 8001934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	7c1b      	ldrb	r3, [r3, #16]
 800193a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	89fa      	ldrh	r2, [r7, #14]
 8001946:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800194e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	89fa      	ldrh	r2, [r7, #14]
 800195a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001962:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800196c:	4413      	add	r3, r2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	7c52      	ldrb	r2, [r2, #17]
 8001972:	4293      	cmp	r3, r2
 8001974:	dd07      	ble.n	8001986 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	7c5b      	ldrb	r3, [r3, #17]
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	4413      	add	r3, r2
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	8a9a      	ldrh	r2, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	8ada      	ldrh	r2, [r3, #22]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4603      	mov	r3, r0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fe5e 	bl	80016ba <u8g2_IsIntersection>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d104      	bne.n	8001a0e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001a0c:	e03b      	b.n	8001a86 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d205      	bcs.n	8001a32 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d905      	bls.n	8001a4e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d205      	bcs.n	8001a6a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d905      	bls.n	8001a86 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff3c 	bl	8001914 <u8g2_update_dimension_common>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff7b 	bl	80019d4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af02      	add	r7, sp, #8
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4603      	mov	r3, r0
 8001af6:	817b      	strh	r3, [r7, #10]
 8001af8:	460b      	mov	r3, r1
 8001afa:	813b      	strh	r3, [r7, #8]
 8001afc:	4613      	mov	r3, r2
 8001afe:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001b00:	88f8      	ldrh	r0, [r7, #6]
 8001b02:	893a      	ldrh	r2, [r7, #8]
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	7e3b      	ldrb	r3, [r7, #24]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff fcab 	bl	8001468 <u8g2_draw_hv_line_2dir>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <u8x8_ascii_next+0x18>
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d102      	bne.n	8001b54 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b52:	e001      	b.n	8001b58 <u8x8_ascii_next+0x22>
  return b;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	b29b      	uxth	r3, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691c      	ldr	r4, [r3, #16]
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2120      	movs	r1, #32
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	47a0      	blx	r4
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	460b      	mov	r3, r1
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	691c      	ldr	r4, [r3, #16]
 8001b9a:	7afa      	ldrb	r2, [r7, #11]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2117      	movs	r1, #23
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	47a0      	blx	r4
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}

08001bae <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001bba:	1cfb      	adds	r3, r7, #3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffe1 	bl	8001b88 <u8x8_byte_SendBytes>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68dc      	ldr	r4, [r3, #12]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	2300      	movs	r3, #0
 8001be4:	2115      	movs	r1, #21
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	47a0      	blx	r4
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68dc      	ldr	r4, [r3, #12]
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2116      	movs	r1, #22
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	47a0      	blx	r4
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}

08001c18 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	460b      	mov	r3, r1
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	68dc      	ldr	r4, [r3, #12]
 8001c2a:	7afa      	ldrb	r2, [r7, #11]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2117      	movs	r1, #23
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	47a0      	blx	r4
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}

08001c3e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001c3e:	b590      	push	{r4, r7, lr}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68dc      	ldr	r4, [r3, #12]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2118      	movs	r1, #24
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	47a0      	blx	r4
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68dc      	ldr	r4, [r3, #12]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2119      	movs	r1, #25
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	47a0      	blx	r4
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}

08001c7e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001c7e:	b590      	push	{r4, r7, lr}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	73fb      	strb	r3, [r7, #15]
    data++;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c98:	d031      	beq.n	8001cfe <u8x8_cad_SendSequence+0x80>
 8001c9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c9c:	dc3d      	bgt.n	8001d1a <u8x8_cad_SendSequence+0x9c>
 8001c9e:	2b19      	cmp	r3, #25
 8001ca0:	dc3b      	bgt.n	8001d1a <u8x8_cad_SendSequence+0x9c>
 8001ca2:	2b18      	cmp	r3, #24
 8001ca4:	da23      	bge.n	8001cee <u8x8_cad_SendSequence+0x70>
 8001ca6:	2b16      	cmp	r3, #22
 8001ca8:	dc02      	bgt.n	8001cb0 <u8x8_cad_SendSequence+0x32>
 8001caa:	2b15      	cmp	r3, #21
 8001cac:	da03      	bge.n	8001cb6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001cae:	e034      	b.n	8001d1a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001cb0:	2b17      	cmp	r3, #23
 8001cb2:	d00e      	beq.n	8001cd2 <u8x8_cad_SendSequence+0x54>
	return;
 8001cb4:	e031      	b.n	8001d1a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68dc      	ldr	r4, [r3, #12]
 8001cc0:	7bba      	ldrb	r2, [r7, #14]
 8001cc2:	7bf9      	ldrb	r1, [r7, #15]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	47a0      	blx	r4
	  data++;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	603b      	str	r3, [r7, #0]
	  break;
 8001cd0:	e022      	b.n	8001d18 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001cd8:	f107 030e 	add.w	r3, r7, #14
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2101      	movs	r1, #1
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff99 	bl	8001c18 <u8x8_cad_SendData>
	  data++;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	603b      	str	r3, [r7, #0]
	  break;
 8001cec:	e014      	b.n	8001d18 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68dc      	ldr	r4, [r3, #12]
 8001cf2:	7bf9      	ldrb	r1, [r7, #15]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	47a0      	blx	r4
	  break;
 8001cfc:	e00c      	b.n	8001d18 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	461a      	mov	r2, r3
 8001d08:	2129      	movs	r1, #41	@ 0x29
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9d1 	bl	80020b2 <u8x8_gpio_call>
	  data++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
	  break;
 8001d16:	bf00      	nop
    cmd = *data;
 8001d18:	e7b6      	b.n	8001c88 <u8x8_cad_SendSequence+0xa>
	return;
 8001d1a:	bf00      	nop
    }
  }
}
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
	...

08001d24 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	72fb      	strb	r3, [r7, #11]
 8001d32:	4613      	mov	r3, r2
 8001d34:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	3b14      	subs	r3, #20
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d82f      	bhi.n	8001d9e <u8x8_cad_001+0x7a>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <u8x8_cad_001+0x20>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d8d 	.word	0x08001d8d
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d71 	.word	0x08001d71
 8001d50:	08001d85 	.word	0x08001d85
 8001d54:	08001d8d 	.word	0x08001d8d
 8001d58:	08001d8d 	.word	0x08001d8d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff ff00 	bl	8001b64 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d64:	7abb      	ldrb	r3, [r7, #10]
 8001d66:	4619      	mov	r1, r3
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff ff20 	bl	8001bae <u8x8_byte_SendByte>
      break;
 8001d6e:	e018      	b.n	8001da2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001d70:	2100      	movs	r1, #0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fef6 	bl	8001b64 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d78:	7abb      	ldrb	r3, [r7, #10]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff ff16 	bl	8001bae <u8x8_byte_SendByte>
      break;
 8001d82:	e00e      	b.n	8001da2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001d84:	2101      	movs	r1, #1
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff feec 	bl	8001b64 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691c      	ldr	r4, [r3, #16]
 8001d90:	7aba      	ldrb	r2, [r7, #10]
 8001d92:	7af9      	ldrb	r1, [r7, #11]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	47a0      	blx	r4
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	e002      	b.n	8001da4 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <u8x8_cad_001+0x80>
  }
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	72fb      	strb	r3, [r7, #11]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d006      	beq.n	8001dd2 <u8x8_d_ssd1309_generic+0x26>
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	dc63      	bgt.n	8001e90 <u8x8_d_ssd1309_generic+0xe4>
 8001dc8:	2b0b      	cmp	r3, #11
 8001dca:	d044      	beq.n	8001e56 <u8x8_d_ssd1309_generic+0xaa>
 8001dcc:	2b0e      	cmp	r3, #14
 8001dce:	d04f      	beq.n	8001e70 <u8x8_d_ssd1309_generic+0xc4>
 8001dd0:	e05e      	b.n	8001e90 <u8x8_d_ssd1309_generic+0xe4>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ff33 	bl	8001c3e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	795b      	ldrb	r3, [r3, #5]
 8001ddc:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	4413      	add	r3, r2
 8001dee:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fee6 	bl	8001bd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fede 	bl	8001bd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	799b      	ldrb	r3, [r3, #6]
 8001e18:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4619      	mov	r1, r3
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fed5 	bl	8001bd0 <u8x8_cad_SendCmd>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8001e32:	7dbb      	ldrb	r3, [r7, #22]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff feeb 	bl	8001c18 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1eb      	bne.n	8001e26 <u8x8_d_ssd1309_generic+0x7a>
      
      u8x8_cad_EndTransfer(u8x8);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff ff05 	bl	8001c5e <u8x8_cad_EndTransfer>
      break;
 8001e54:	e01e      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001e56:	7abb      	ldrb	r3, [r7, #10]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <u8x8_d_ssd1309_generic+0xba>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 8001e5c:	4910      	ldr	r1, [pc, #64]	@ (8001ea0 <u8x8_d_ssd1309_generic+0xf4>)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff0d 	bl	8001c7e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 8001e64:	e016      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8001e66:	490f      	ldr	r1, [pc, #60]	@ (8001ea4 <u8x8_d_ssd1309_generic+0xf8>)
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff ff08 	bl	8001c7e <u8x8_cad_SendSequence>
      break;
 8001e6e:	e011      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fee4 	bl	8001c3e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001e76:	2181      	movs	r1, #129	@ 0x81
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fea9 	bl	8001bd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8001e7e:	7abb      	ldrb	r3, [r7, #10]
 8001e80:	4619      	mov	r1, r3
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff feb6 	bl	8001bf4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fee8 	bl	8001c5e <u8x8_cad_EndTransfer>
      break;
 8001e8e:	e001      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
#endif
    default:
      return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <u8x8_d_ssd1309_generic+0xea>
  }
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	080084a4 	.word	0x080084a4
 8001ea4:	080084ac 	.word	0x080084ac

08001ea8 <u8x8_d_ssd1309_128x64_noname2>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1309_128x64_noname2(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	72fb      	strb	r3, [r7, #11]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8001eba:	7aba      	ldrb	r2, [r7, #10]
 8001ebc:	7af9      	ldrb	r1, [r7, #11]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff ff73 	bl	8001dac <u8x8_d_ssd1309_generic>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <u8x8_d_ssd1309_128x64_noname2+0x28>
    return 1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <u8x8_d_ssd1309_128x64_noname2+0x8e>
  
  switch(msg)
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	2b0d      	cmp	r3, #13
 8001ed4:	d006      	beq.n	8001ee4 <u8x8_d_ssd1309_128x64_noname2+0x3c>
 8001ed6:	2b0d      	cmp	r3, #13
 8001ed8:	dc2a      	bgt.n	8001f30 <u8x8_d_ssd1309_128x64_noname2+0x88>
 8001eda:	2b09      	cmp	r3, #9
 8001edc:	d023      	beq.n	8001f26 <u8x8_d_ssd1309_128x64_noname2+0x7e>
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d019      	beq.n	8001f16 <u8x8_d_ssd1309_128x64_noname2+0x6e>
 8001ee2:	e025      	b.n	8001f30 <u8x8_d_ssd1309_128x64_noname2+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8001ee4:	7abb      	ldrb	r3, [r7, #10]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10a      	bne.n	8001f00 <u8x8_d_ssd1309_128x64_noname2+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8001eea:	4915      	ldr	r1, [pc, #84]	@ (8001f40 <u8x8_d_ssd1309_128x64_noname2+0x98>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fec6 	bl	8001c7e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	7c9a      	ldrb	r2, [r3, #18]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8001efe:	e019      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8001f00:	4910      	ldr	r1, [pc, #64]	@ (8001f44 <u8x8_d_ssd1309_128x64_noname2+0x9c>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff febb 	bl	8001c7e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	7cda      	ldrb	r2, [r3, #19]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8001f14:	e00e      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f82e 	bl	8001f78 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8001f1c:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <u8x8_d_ssd1309_128x64_noname2+0xa0>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff fead 	bl	8001c7e <u8x8_cad_SendSequence>
      break;
 8001f24:	e006      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname2_display_info);
 8001f26:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <u8x8_d_ssd1309_128x64_noname2+0xa4>)
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f811 	bl	8001f50 <u8x8_d_helper_display_setup_memory>
      break;
 8001f2e:	e001      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    default:
      return 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <u8x8_d_ssd1309_128x64_noname2+0x8e>
  }
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	080084b4 	.word	0x080084b4
 8001f44:	080084bc 	.word	0x080084bc
 8001f48:	080084dc 	.word	0x080084dc
 8001f4c:	080084c4 	.word	0x080084c4

08001f50 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	7c9a      	ldrb	r2, [r3, #18]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695c      	ldr	r4, [r3, #20]
 8001f84:	2300      	movs	r3, #0
 8001f86:	2200      	movs	r2, #0
 8001f88:	2128      	movs	r1, #40	@ 0x28
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68dc      	ldr	r4, [r3, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2200      	movs	r2, #0
 8001f96:	2114      	movs	r1, #20
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	214b      	movs	r1, #75	@ 0x4b
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f886 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	791b      	ldrb	r3, [r3, #4]
 8001fac:	461a      	mov	r2, r3
 8001fae:	2129      	movs	r1, #41	@ 0x29
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f87e 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	214b      	movs	r1, #75	@ 0x4b
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f879 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2129      	movs	r1, #41	@ 0x29
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f871 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	214b      	movs	r1, #75	@ 0x4b
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f86c 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	795b      	ldrb	r3, [r3, #5]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2129      	movs	r1, #41	@ 0x29
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f864 	bl	80020b2 <u8x8_gpio_call>
}    
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}

08001ff2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001ff2:	b590      	push	{r4, r7, lr}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	4603      	mov	r3, r0
 8002002:	70fb      	strb	r3, [r7, #3]
 8002004:	460b      	mov	r3, r1
 8002006:	70bb      	strb	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002010:	78bb      	ldrb	r3, [r7, #2]
 8002012:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689c      	ldr	r4, [r3, #8]
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	2201      	movs	r2, #1
 8002026:	210f      	movs	r1, #15
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	47a0      	blx	r4
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}

08002036 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002036:	b590      	push	{r4, r7, lr}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689c      	ldr	r4, [r3, #8]
 8002042:	2300      	movs	r3, #0
 8002044:	2200      	movs	r2, #0
 8002046:	2109      	movs	r1, #9
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	47a0      	blx	r4
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689c      	ldr	r4, [r3, #8]
 8002060:	2300      	movs	r3, #0
 8002062:	2200      	movs	r2, #0
 8002064:	210a      	movs	r1, #10
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}

08002072 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002072:	b590      	push	{r4, r7, lr}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689c      	ldr	r4, [r3, #8]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	2300      	movs	r3, #0
 8002086:	210b      	movs	r1, #11
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	47a0      	blx	r4
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689c      	ldr	r4, [r3, #8]
 80020a0:	2300      	movs	r3, #0
 80020a2:	2200      	movs	r2, #0
 80020a4:	2110      	movs	r1, #16
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	47a0      	blx	r4
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd90      	pop	{r4, r7, pc}

080020b2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80020b2:	b590      	push	{r4, r7, lr}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
 80020be:	4613      	mov	r3, r2
 80020c0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695c      	ldr	r4, [r3, #20]
 80020c6:	78ba      	ldrb	r2, [r7, #2]
 80020c8:	78f9      	ldrb	r1, [r7, #3]
 80020ca:	2300      	movs	r3, #0
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	47a0      	blx	r4
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}

080020d8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	72fb      	strb	r3, [r7, #11]
 80020e6:	4613      	mov	r3, r2
 80020e8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 800210a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 8002110:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 8002116:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 800211c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	22ff      	movs	r2, #255	@ 0xff
 8002138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	22ff      	movs	r2, #255	@ 0xff
 8002140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	080020d9 	.word	0x080020d9

08002154 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff ffc8 	bl	80020f8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff ff58 	bl	8002036 <u8x8_SetupMemory>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <handleInput>:
/**
  * @brief Handle Input Function
  * @param bool retTap (to determin if the function returns the tapped value or pressed value)
  * @retval pinState struct
  */
pinState handleInput(t_p Tap_Press){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
	button_inputs[up].last = button_inputs[up].current;
 800219c:	4b9c      	ldr	r3, [pc, #624]	@ (8002410 <handleInput+0x280>)
 800219e:	799a      	ldrb	r2, [r3, #6]
 80021a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002410 <handleInput+0x280>)
 80021a2:	71da      	strb	r2, [r3, #7]
	button_inputs[up].current = HAL_GPIO_ReadPin(Up_BTN_GPIO_Port,Up_BTN_Pin);
 80021a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021a8:	489a      	ldr	r0, [pc, #616]	@ (8002414 <handleInput+0x284>)
 80021aa:	f001 ff39 	bl	8004020 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b97      	ldr	r3, [pc, #604]	@ (8002410 <handleInput+0x280>)
 80021b4:	719a      	strb	r2, [r3, #6]
	button_inputs[up].isTapped = button_inputs[up].current && !button_inputs[up].last;
 80021b6:	4b96      	ldr	r3, [pc, #600]	@ (8002410 <handleInput+0x280>)
 80021b8:	799b      	ldrb	r3, [r3, #6]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <handleInput+0x3a>
 80021be:	4b94      	ldr	r3, [pc, #592]	@ (8002410 <handleInput+0x280>)
 80021c0:	79db      	ldrb	r3, [r3, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <handleInput+0x3a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <handleInput+0x3c>
 80021ca:	2300      	movs	r3, #0
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <handleInput+0x280>)
 80021d4:	721a      	strb	r2, [r3, #8]
	button_inputs[up].isPressed = button_inputs[up].current && button_inputs[up].last;
 80021d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002410 <handleInput+0x280>)
 80021d8:	799b      	ldrb	r3, [r3, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <handleInput+0x5a>
 80021de:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <handleInput+0x280>)
 80021e0:	79db      	ldrb	r3, [r3, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <handleInput+0x5a>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <handleInput+0x5c>
 80021ea:	2300      	movs	r3, #0
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b87      	ldr	r3, [pc, #540]	@ (8002410 <handleInput+0x280>)
 80021f4:	725a      	strb	r2, [r3, #9]

	button_inputs[down].last = button_inputs[down].current;
 80021f6:	4b86      	ldr	r3, [pc, #536]	@ (8002410 <handleInput+0x280>)
 80021f8:	7ada      	ldrb	r2, [r3, #11]
 80021fa:	4b85      	ldr	r3, [pc, #532]	@ (8002410 <handleInput+0x280>)
 80021fc:	731a      	strb	r2, [r3, #12]
	button_inputs[down].current = HAL_GPIO_ReadPin(Down_BTN_GPIO_Port,Down_BTN_Pin);
 80021fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002202:	4885      	ldr	r0, [pc, #532]	@ (8002418 <handleInput+0x288>)
 8002204:	f001 ff0c 	bl	8004020 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <handleInput+0x280>)
 800220e:	72da      	strb	r2, [r3, #11]
	button_inputs[down].isTapped = button_inputs[down].current && !button_inputs[down].last;
 8002210:	4b7f      	ldr	r3, [pc, #508]	@ (8002410 <handleInput+0x280>)
 8002212:	7adb      	ldrb	r3, [r3, #11]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <handleInput+0x94>
 8002218:	4b7d      	ldr	r3, [pc, #500]	@ (8002410 <handleInput+0x280>)
 800221a:	7b1b      	ldrb	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <handleInput+0x94>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <handleInput+0x96>
 8002224:	2300      	movs	r3, #0
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b78      	ldr	r3, [pc, #480]	@ (8002410 <handleInput+0x280>)
 800222e:	735a      	strb	r2, [r3, #13]
	button_inputs[down].isPressed = button_inputs[down].current && button_inputs[down].last;
 8002230:	4b77      	ldr	r3, [pc, #476]	@ (8002410 <handleInput+0x280>)
 8002232:	7adb      	ldrb	r3, [r3, #11]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <handleInput+0xb4>
 8002238:	4b75      	ldr	r3, [pc, #468]	@ (8002410 <handleInput+0x280>)
 800223a:	7b1b      	ldrb	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <handleInput+0xb4>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <handleInput+0xb6>
 8002244:	2300      	movs	r3, #0
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <handleInput+0x280>)
 800224e:	739a      	strb	r2, [r3, #14]

	button_inputs[left].last = button_inputs[left].current;
 8002250:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <handleInput+0x280>)
 8002252:	7c1a      	ldrb	r2, [r3, #16]
 8002254:	4b6e      	ldr	r3, [pc, #440]	@ (8002410 <handleInput+0x280>)
 8002256:	745a      	strb	r2, [r3, #17]
	button_inputs[left].current = HAL_GPIO_ReadPin(Left_BTN_GPIO_Port,Left_BTN_Pin);
 8002258:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800225c:	486e      	ldr	r0, [pc, #440]	@ (8002418 <handleInput+0x288>)
 800225e:	f001 fedf 	bl	8004020 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b6a      	ldr	r3, [pc, #424]	@ (8002410 <handleInput+0x280>)
 8002268:	741a      	strb	r2, [r3, #16]
	button_inputs[left].isTapped = button_inputs[left].current && !button_inputs[left].last;
 800226a:	4b69      	ldr	r3, [pc, #420]	@ (8002410 <handleInput+0x280>)
 800226c:	7c1b      	ldrb	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <handleInput+0xee>
 8002272:	4b67      	ldr	r3, [pc, #412]	@ (8002410 <handleInput+0x280>)
 8002274:	7c5b      	ldrb	r3, [r3, #17]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <handleInput+0xee>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <handleInput+0xf0>
 800227e:	2300      	movs	r3, #0
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b62      	ldr	r3, [pc, #392]	@ (8002410 <handleInput+0x280>)
 8002288:	749a      	strb	r2, [r3, #18]
	button_inputs[left].isPressed = button_inputs[left].current && button_inputs[left].last;
 800228a:	4b61      	ldr	r3, [pc, #388]	@ (8002410 <handleInput+0x280>)
 800228c:	7c1b      	ldrb	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <handleInput+0x10e>
 8002292:	4b5f      	ldr	r3, [pc, #380]	@ (8002410 <handleInput+0x280>)
 8002294:	7c5b      	ldrb	r3, [r3, #17]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <handleInput+0x10e>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <handleInput+0x110>
 800229e:	2300      	movs	r3, #0
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002410 <handleInput+0x280>)
 80022a8:	74da      	strb	r2, [r3, #19]

	button_inputs[right].last = button_inputs[right].current;
 80022aa:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <handleInput+0x280>)
 80022ac:	7d5a      	ldrb	r2, [r3, #21]
 80022ae:	4b58      	ldr	r3, [pc, #352]	@ (8002410 <handleInput+0x280>)
 80022b0:	759a      	strb	r2, [r3, #22]
	button_inputs[right].current = HAL_GPIO_ReadPin(Right_BTN_GPIO_Port,Right_BTN_Pin);
 80022b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022b6:	4858      	ldr	r0, [pc, #352]	@ (8002418 <handleInput+0x288>)
 80022b8:	f001 feb2 	bl	8004020 <HAL_GPIO_ReadPin>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <handleInput+0x280>)
 80022c2:	755a      	strb	r2, [r3, #21]
	button_inputs[right].isTapped = button_inputs[right].current && !button_inputs[right].last;
 80022c4:	4b52      	ldr	r3, [pc, #328]	@ (8002410 <handleInput+0x280>)
 80022c6:	7d5b      	ldrb	r3, [r3, #21]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <handleInput+0x148>
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <handleInput+0x280>)
 80022ce:	7d9b      	ldrb	r3, [r3, #22]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <handleInput+0x148>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <handleInput+0x14a>
 80022d8:	2300      	movs	r3, #0
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <handleInput+0x280>)
 80022e2:	75da      	strb	r2, [r3, #23]
	button_inputs[right].isPressed = button_inputs[right].current && button_inputs[right].last;
 80022e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002410 <handleInput+0x280>)
 80022e6:	7d5b      	ldrb	r3, [r3, #21]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <handleInput+0x168>
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <handleInput+0x280>)
 80022ee:	7d9b      	ldrb	r3, [r3, #22]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <handleInput+0x168>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <handleInput+0x16a>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <handleInput+0x280>)
 8002302:	761a      	strb	r2, [r3, #24]

	button_inputs[select].last = button_inputs[select].current;
 8002304:	4b42      	ldr	r3, [pc, #264]	@ (8002410 <handleInput+0x280>)
 8002306:	7e9a      	ldrb	r2, [r3, #26]
 8002308:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <handleInput+0x280>)
 800230a:	76da      	strb	r2, [r3, #27]
	button_inputs[select].current = HAL_GPIO_ReadPin(Select_BTN_GPIO_Port,Select_BTN_Pin);
 800230c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002310:	4840      	ldr	r0, [pc, #256]	@ (8002414 <handleInput+0x284>)
 8002312:	f001 fe85 	bl	8004020 <HAL_GPIO_ReadPin>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <handleInput+0x280>)
 800231c:	769a      	strb	r2, [r3, #26]
	button_inputs[select].isTapped = button_inputs[select].current && !button_inputs[select].last;
 800231e:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <handleInput+0x280>)
 8002320:	7e9b      	ldrb	r3, [r3, #26]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <handleInput+0x1a2>
 8002326:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <handleInput+0x280>)
 8002328:	7edb      	ldrb	r3, [r3, #27]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <handleInput+0x1a2>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <handleInput+0x1a4>
 8002332:	2300      	movs	r3, #0
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <handleInput+0x280>)
 800233c:	771a      	strb	r2, [r3, #28]
	button_inputs[select].isPressed = button_inputs[select].current && button_inputs[select].last;
 800233e:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <handleInput+0x280>)
 8002340:	7e9b      	ldrb	r3, [r3, #26]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <handleInput+0x1c2>
 8002346:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <handleInput+0x280>)
 8002348:	7edb      	ldrb	r3, [r3, #27]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <handleInput+0x1c2>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <handleInput+0x1c4>
 8002352:	2300      	movs	r3, #0
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <handleInput+0x280>)
 800235c:	775a      	strb	r2, [r3, #29]

	button_inputs[back].last = button_inputs[back].current;
 800235e:	4b2c      	ldr	r3, [pc, #176]	@ (8002410 <handleInput+0x280>)
 8002360:	7fda      	ldrb	r2, [r3, #31]
 8002362:	4b2b      	ldr	r3, [pc, #172]	@ (8002410 <handleInput+0x280>)
 8002364:	f883 2020 	strb.w	r2, [r3, #32]
	button_inputs[back].current = HAL_GPIO_ReadPin(Back_BTN_GPIO_Port,Back_BTN_Pin);
 8002368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800236c:	4829      	ldr	r0, [pc, #164]	@ (8002414 <handleInput+0x284>)
 800236e:	f001 fe57 	bl	8004020 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <handleInput+0x280>)
 8002378:	77da      	strb	r2, [r3, #31]
	button_inputs[back].isTapped = button_inputs[back].current && !button_inputs[back].last;
 800237a:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <handleInput+0x280>)
 800237c:	7fdb      	ldrb	r3, [r3, #31]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <handleInput+0x200>
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <handleInput+0x280>)
 8002384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <handleInput+0x200>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <handleInput+0x202>
 8002390:	2300      	movs	r3, #0
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <handleInput+0x280>)
 800239a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	button_inputs[back].isPressed = button_inputs[back].current && button_inputs[back].last;
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <handleInput+0x280>)
 80023a0:	7fdb      	ldrb	r3, [r3, #31]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <handleInput+0x224>
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <handleInput+0x280>)
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <handleInput+0x224>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <handleInput+0x226>
 80023b4:	2300      	movs	r3, #0
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <handleInput+0x280>)
 80023be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	if(Tap_Press==Tap){
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d155      	bne.n	8002474 <handleInput+0x2e4>
		if(button_inputs[up].isTapped){
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <handleInput+0x280>)
 80023ca:	7a1b      	ldrb	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <handleInput+0x250>
			return button_inputs[up];//UP
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <handleInput+0x280>)
 80023d4:	3305      	adds	r3, #5
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	6011      	str	r1, [r2, #0]
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	7113      	strb	r3, [r2, #4]
 80023de:	e098      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[down].isTapped){
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <handleInput+0x280>)
 80023e2:	7b5b      	ldrb	r3, [r3, #13]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <handleInput+0x268>
			return button_inputs[down];//DOWN
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <handleInput+0x280>)
 80023ec:	330a      	adds	r3, #10
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	6011      	str	r1, [r2, #0]
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	7113      	strb	r3, [r2, #4]
 80023f6:	e08c      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[left].isTapped){
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <handleInput+0x280>)
 80023fa:	7c9b      	ldrb	r3, [r3, #18]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <handleInput+0x28c>
			return button_inputs[left];//LEFT
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <handleInput+0x280>)
 8002404:	330f      	adds	r3, #15
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	7113      	strb	r3, [r2, #4]
 800240e:	e080      	b.n	8002512 <handleInput+0x382>
 8002410:	20000060 	.word	0x20000060
 8002414:	40021400 	.word	0x40021400
 8002418:	40021000 	.word	0x40021000
		}
		else if(button_inputs[right].isTapped){
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <handleInput+0x38c>)
 800241e:	7ddb      	ldrb	r3, [r3, #23]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <handleInput+0x2a4>
			return button_inputs[right];//RIGHT
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <handleInput+0x38c>)
 8002428:	3314      	adds	r3, #20
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	6010      	str	r0, [r2, #0]
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	7113      	strb	r3, [r2, #4]
 8002432:	e06e      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[select].isTapped){
 8002434:	4b39      	ldr	r3, [pc, #228]	@ (800251c <handleInput+0x38c>)
 8002436:	7f1b      	ldrb	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <handleInput+0x2bc>
			return button_inputs[select];//SELECT
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4b37      	ldr	r3, [pc, #220]	@ (800251c <handleInput+0x38c>)
 8002440:	3319      	adds	r3, #25
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	791b      	ldrb	r3, [r3, #4]
 8002448:	7113      	strb	r3, [r2, #4]
 800244a:	e062      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[back].isTapped){
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <handleInput+0x38c>)
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <handleInput+0x2d6>
			return button_inputs[back];//BACK
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4b30      	ldr	r3, [pc, #192]	@ (800251c <handleInput+0x38c>)
 800245a:	331e      	adds	r3, #30
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	6011      	str	r1, [r2, #0]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	7113      	strb	r3, [r2, #4]
 8002464:	e055      	b.n	8002512 <handleInput+0x382>
		}
		else{
			return button_inputs[null];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2c      	ldr	r2, [pc, #176]	@ (800251c <handleInput+0x38c>)
 800246a:	6810      	ldr	r0, [r2, #0]
 800246c:	6018      	str	r0, [r3, #0]
 800246e:	7912      	ldrb	r2, [r2, #4]
 8002470:	711a      	strb	r2, [r3, #4]
 8002472:	e04e      	b.n	8002512 <handleInput+0x382>
		}
	}
	else{
		if(button_inputs[up].isPressed){
 8002474:	4b29      	ldr	r3, [pc, #164]	@ (800251c <handleInput+0x38c>)
 8002476:	7a5b      	ldrb	r3, [r3, #9]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <handleInput+0x2fc>
			return button_inputs[up];//UP
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <handleInput+0x38c>)
 8002480:	3305      	adds	r3, #5
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	7113      	strb	r3, [r2, #4]
 800248a:	e042      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[down].isPressed){
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <handleInput+0x38c>)
 800248e:	7b9b      	ldrb	r3, [r3, #14]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <handleInput+0x314>
			return button_inputs[down];//DOWN
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <handleInput+0x38c>)
 8002498:	330a      	adds	r3, #10
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	6011      	str	r1, [r2, #0]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	7113      	strb	r3, [r2, #4]
 80024a2:	e036      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[left].isPressed){
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <handleInput+0x38c>)
 80024a6:	7cdb      	ldrb	r3, [r3, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <handleInput+0x32c>
			return button_inputs[left];//LEFT
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <handleInput+0x38c>)
 80024b0:	330f      	adds	r3, #15
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	7113      	strb	r3, [r2, #4]
 80024ba:	e02a      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[right].isPressed){
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <handleInput+0x38c>)
 80024be:	7e1b      	ldrb	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <handleInput+0x344>
			return button_inputs[right];//RIGHT
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <handleInput+0x38c>)
 80024c8:	3314      	adds	r3, #20
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	6010      	str	r0, [r2, #0]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	7113      	strb	r3, [r2, #4]
 80024d2:	e01e      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[select].isPressed){
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <handleInput+0x38c>)
 80024d6:	7f5b      	ldrb	r3, [r3, #29]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <handleInput+0x35c>
			return button_inputs[select];//SELECT
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <handleInput+0x38c>)
 80024e0:	3319      	adds	r3, #25
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	7113      	strb	r3, [r2, #4]
 80024ea:	e012      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[back].isPressed){
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <handleInput+0x38c>)
 80024ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <handleInput+0x376>
			return button_inputs[back];//BACK
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <handleInput+0x38c>)
 80024fa:	331e      	adds	r3, #30
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	6011      	str	r1, [r2, #0]
 8002500:	791b      	ldrb	r3, [r3, #4]
 8002502:	7113      	strb	r3, [r2, #4]
 8002504:	e005      	b.n	8002512 <handleInput+0x382>
		}
		else{
			return button_inputs[null];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <handleInput+0x38c>)
 800250a:	6810      	ldr	r0, [r2, #0]
 800250c:	6018      	str	r0, [r3, #0]
 800250e:	7912      	ldrb	r2, [r2, #4]
 8002510:	711a      	strb	r2, [r3, #4]
		}
	}
	//TODO Later: USE TIMER, if still isPressed after timer expires, then move
}
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000060 	.word	0x20000060

08002520 <handle_Windows>:
  * @brief Handle Window Function
  * @param0 u8g2_t* u8g2 (u8g2 struct instance)
  *
  * @retval None
  */
void handle_Windows(u8g2_t* u8g2){
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	switch(currWindow){
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <handle_Windows+0x78>)
 800252a:	f993 3000 	ldrsb.w	r3, [r3]
 800252e:	3301      	adds	r3, #1
 8002530:	2b06      	cmp	r3, #6
 8002532:	d82d      	bhi.n	8002590 <handle_Windows+0x70>
 8002534:	a201      	add	r2, pc, #4	@ (adr r2, 800253c <handle_Windows+0x1c>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	08002559 	.word	0x08002559
 8002540:	08002569 	.word	0x08002569
 8002544:	08002589 	.word	0x08002589
 8002548:	08002579 	.word	0x08002579
 800254c:	08002571 	.word	0x08002571
 8002550:	08002561 	.word	0x08002561
 8002554:	08002581 	.word	0x08002581
	case menu:
		window_Menu(u8g2);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f81f 	bl	800259c <window_Menu>
		break;
 800255e:	e017      	b.n	8002590 <handle_Windows+0x70>
	case game:
		window_Game(u8g2);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f939 	bl	80027d8 <window_Game>
		break;
 8002566:	e013      	b.n	8002590 <handle_Windows+0x70>
	case idle:
		window_Idle(u8g2);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9b5 	bl	80028d8 <window_Idle>
		break;
 800256e:	e00f      	b.n	8002590 <handle_Windows+0x70>
	case nfc:
		window_NFC(u8g2);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa69 	bl	8002a48 <window_NFC>
		break;
 8002576:	e00b      	b.n	8002590 <handle_Windows+0x70>
	case rfid:
		window_RFID(u8g2);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 faa7 	bl	8002acc <window_RFID>
		break;
 800257e:	e007      	b.n	8002590 <handle_Windows+0x70>
	case settings:
		window_Settings(u8g2);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fae5 	bl	8002b50 <window_Settings>
		break;
 8002586:	e003      	b.n	8002590 <handle_Windows+0x70>
	case subghz:
		window_Subghz(u8g2);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb23 	bl	8002bd4 <window_Subghz>
		break;
 800258e:	bf00      	nop
	}
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000083 	.word	0x20000083

0800259c <window_Menu>:
  * @retval None
  */
int8_t item_sel=0;
int8_t item_prev=5;
int8_t item_next=1;
void window_Menu(u8g2_t* u8g2){
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]

	button input = handleInput(Tap).direction;
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fdf0 	bl	8002190 <handleInput>
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	73fb      	strb	r3, [r7, #15]
	switch(input){
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d82a      	bhi.n	8002610 <window_Menu+0x74>
 80025ba:	a201      	add	r2, pc, #4	@ (adr r2, 80025c0 <window_Menu+0x24>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	08002611 	.word	0x08002611
 80025c4:	080025dd 	.word	0x080025dd
 80025c8:	080025f1 	.word	0x080025f1
 80025cc:	08002611 	.word	0x08002611
 80025d0:	08002611 	.word	0x08002611
 80025d4:	08002605 	.word	0x08002605
 80025d8:	08002611 	.word	0x08002611
	case up:
		//isTapped, else isPushed
		item_sel--;
 80025dc:	4b75      	ldr	r3, [pc, #468]	@ (80027b4 <window_Menu+0x218>)
 80025de:	f993 3000 	ldrsb.w	r3, [r3]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <window_Menu+0x218>)
 80025ec:	701a      	strb	r2, [r3, #0]
		break;
 80025ee:	e00f      	b.n	8002610 <window_Menu+0x74>
	case down:
		item_sel++;
 80025f0:	4b70      	ldr	r3, [pc, #448]	@ (80027b4 <window_Menu+0x218>)
 80025f2:	f993 3000 	ldrsb.w	r3, [r3]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	b25a      	sxtb	r2, r3
 80025fe:	4b6d      	ldr	r3, [pc, #436]	@ (80027b4 <window_Menu+0x218>)
 8002600:	701a      	strb	r2, [r3, #0]
		break;
 8002602:	e005      	b.n	8002610 <window_Menu+0x74>
	case select:
		//Enter new window
		currWindow=item_sel;
 8002604:	4b6b      	ldr	r3, [pc, #428]	@ (80027b4 <window_Menu+0x218>)
 8002606:	f993 2000 	ldrsb.w	r2, [r3]
 800260a:	4b6b      	ldr	r3, [pc, #428]	@ (80027b8 <window_Menu+0x21c>)
 800260c:	701a      	strb	r2, [r3, #0]
		break;
 800260e:	bf00      	nop
		break;
	case null:
		break;
	}

	item_prev=item_sel-1;
 8002610:	4b68      	ldr	r3, [pc, #416]	@ (80027b4 <window_Menu+0x218>)
 8002612:	f993 3000 	ldrsb.w	r3, [r3]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	b25a      	sxtb	r2, r3
 800261e:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <window_Menu+0x220>)
 8002620:	701a      	strb	r2, [r3, #0]
	item_next=item_sel+1;
 8002622:	4b64      	ldr	r3, [pc, #400]	@ (80027b4 <window_Menu+0x218>)
 8002624:	f993 3000 	ldrsb.w	r3, [r3]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3301      	adds	r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	b25a      	sxtb	r2, r3
 8002630:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <window_Menu+0x224>)
 8002632:	701a      	strb	r2, [r3, #0]

	if(item_sel<0){
 8002634:	4b5f      	ldr	r3, [pc, #380]	@ (80027b4 <window_Menu+0x218>)
 8002636:	f993 3000 	ldrsb.w	r3, [r3]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da03      	bge.n	8002646 <window_Menu+0xaa>
		item_sel=icon_len-1;
 800263e:	4b5d      	ldr	r3, [pc, #372]	@ (80027b4 <window_Menu+0x218>)
 8002640:	2205      	movs	r2, #5
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e007      	b.n	8002656 <window_Menu+0xba>
	}
	else if(item_sel>=icon_len){
 8002646:	4b5b      	ldr	r3, [pc, #364]	@ (80027b4 <window_Menu+0x218>)
 8002648:	f993 3000 	ldrsb.w	r3, [r3]
 800264c:	2b05      	cmp	r3, #5
 800264e:	dd02      	ble.n	8002656 <window_Menu+0xba>
		item_sel=0;
 8002650:	4b58      	ldr	r3, [pc, #352]	@ (80027b4 <window_Menu+0x218>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
	}

	if(item_prev<0){
 8002656:	4b59      	ldr	r3, [pc, #356]	@ (80027bc <window_Menu+0x220>)
 8002658:	f993 3000 	ldrsb.w	r3, [r3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da02      	bge.n	8002666 <window_Menu+0xca>
		item_prev=5;
 8002660:	4b56      	ldr	r3, [pc, #344]	@ (80027bc <window_Menu+0x220>)
 8002662:	2205      	movs	r2, #5
 8002664:	701a      	strb	r2, [r3, #0]
	}
	if(item_next>=icon_len){
 8002666:	4b56      	ldr	r3, [pc, #344]	@ (80027c0 <window_Menu+0x224>)
 8002668:	f993 3000 	ldrsb.w	r3, [r3]
 800266c:	2b05      	cmp	r3, #5
 800266e:	dd02      	ble.n	8002676 <window_Menu+0xda>
		item_next=0;
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <window_Menu+0x224>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
	}

	u8g2_ClearBuffer(u8g2);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f84d 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 800267c:	2101      	movs	r1, #1
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe ffd1 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetBitmapMode(u8g2,1);
 8002684:	2101      	movs	r1, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fd ff4e 	bl	8000528 <u8g2_SetBitmapMode>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 800268c:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <window_Menu+0x228>)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fe82 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawXBMP(u8g2, icn_x, top_icn_y, icon_wh, icon_wh,  menu_item[item_prev].icon);
 8002694:	4b49      	ldr	r3, [pc, #292]	@ (80027bc <window_Menu+0x220>)
 8002696:	f993 3000 	ldrsb.w	r3, [r3]
 800269a:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <window_Menu+0x22c>)
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	2310      	movs	r3, #16
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2310      	movs	r3, #16
 80026aa:	2202      	movs	r2, #2
 80026ac:	2104      	movs	r1, #4
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ffb8 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawStr(u8g2, title_x, top_title_y, menu_item[item_prev].icon_name);
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <window_Menu+0x220>)
 80026b6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4a42      	ldr	r2, [pc, #264]	@ (80027c8 <window_Menu+0x22c>)
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	220f      	movs	r2, #15
 80026c4:	211b      	movs	r1, #27
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fdc4 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawXBMP(u8g2, icn_x, mid_icn_y, icon_wh, icon_wh,  menu_item[item_sel].icon);
 80026cc:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <window_Menu+0x218>)
 80026ce:	f993 3000 	ldrsb.w	r3, [r3]
 80026d2:	4a3d      	ldr	r2, [pc, #244]	@ (80027c8 <window_Menu+0x22c>)
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2310      	movs	r3, #16
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2310      	movs	r3, #16
 80026e2:	2218      	movs	r2, #24
 80026e4:	2104      	movs	r1, #4
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fd ff9c 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawStr(u8g2, title_x, mid_title_y, menu_item[item_sel].icon_name);
 80026ec:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <window_Menu+0x218>)
 80026ee:	f993 3000 	ldrsb.w	r3, [r3]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4a34      	ldr	r2, [pc, #208]	@ (80027c8 <window_Menu+0x22c>)
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	2225      	movs	r2, #37	@ 0x25
 80026fc:	211b      	movs	r1, #27
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fda8 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawXBMP(u8g2, icn_x, bot_icn_y, icon_wh, icon_wh,  menu_item[item_next].icon);
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <window_Menu+0x224>)
 8002706:	f993 3000 	ldrsb.w	r3, [r3]
 800270a:	4a2f      	ldr	r2, [pc, #188]	@ (80027c8 <window_Menu+0x22c>)
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2310      	movs	r3, #16
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2310      	movs	r3, #16
 800271a:	222e      	movs	r2, #46	@ 0x2e
 800271c:	2104      	movs	r1, #4
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fd ff80 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawStr(u8g2, title_x, bot_title_y, menu_item[item_next].icon_name);
 8002724:	4b26      	ldr	r3, [pc, #152]	@ (80027c0 <window_Menu+0x224>)
 8002726:	f993 3000 	ldrsb.w	r3, [r3]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <window_Menu+0x22c>)
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	223b      	movs	r2, #59	@ 0x3b
 8002734:	211b      	movs	r1, #27
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fd8c 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawXBMP(u8g2, -2, 22, Select_width,  Select_height, Select_bits);
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <window_Menu+0x230>)
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2315      	movs	r3, #21
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	2216      	movs	r2, #22
 8002748:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fd ff69 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawXBMP(u8g2, 126-ScrollBar_width, 0, ScrollBar_width,  ScrollBar_height, ScrollBar_bits);
 8002752:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <window_Menu+0x234>)
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	2340      	movs	r3, #64	@ 0x40
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2307      	movs	r3, #7
 800275c:	2200      	movs	r2, #0
 800275e:	2177      	movs	r1, #119	@ 0x77
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fd ff5f 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawBox(u8g2,127-4, (64/icon_len)*item_sel, 3, (64/icon_len) + ((64%icon_len) * ((item_sel/(icon_len-1)))));
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <window_Menu+0x218>)
 8002768:	f993 3000 	ldrsb.w	r3, [r3]
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	b299      	uxth	r1, r3
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <window_Menu+0x218>)
 800277a:	f993 3000 	ldrsb.w	r3, [r3]
 800277e:	4a15      	ldr	r2, [pc, #84]	@ (80027d4 <window_Menu+0x238>)
 8002780:	fb82 0203 	smull	r0, r2, r2, r3
 8002784:	1052      	asrs	r2, r2, #1
 8002786:	17db      	asrs	r3, r3, #31
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	b25b      	sxtb	r3, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	b29b      	uxth	r3, r3
 8002792:	330a      	adds	r3, #10
 8002794:	b29b      	uxth	r3, r3
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2303      	movs	r3, #3
 800279a:	460a      	mov	r2, r1
 800279c:	217b      	movs	r1, #123	@ 0x7b
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fd ff83 	bl	80006aa <u8g2_DrawBox>

	u8g2_SendBuffer(u8g2);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe f829 	bl	80007fc <u8g2_SendBuffer>

}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200004b6 	.word	0x200004b6
 80027b8:	20000083 	.word	0x20000083
 80027bc:	20000084 	.word	0x20000084
 80027c0:	20000085 	.word	0x20000085
 80027c4:	08007b1c 	.word	0x08007b1c
 80027c8:	20000000 	.word	0x20000000
 80027cc:	08008608 	.word	0x08008608
 80027d0:	080085c8 	.word	0x080085c8
 80027d4:	66666667 	.word	0x66666667

080027d8 <window_Game>:

playerInfo Player={2,2};//TODO if wanting to reset progress(init when selected from menu)
void window_Game(u8g2_t* u8g2){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	button input = handleInput(Press).direction;
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2101      	movs	r1, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fcd2 	bl	8002190 <handleInput>
 80027ec:	7a3b      	ldrb	r3, [r7, #8]
 80027ee:	73fb      	strb	r3, [r7, #15]
	switch(input){
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d847      	bhi.n	8002886 <window_Game+0xae>
 80027f6:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <window_Game+0x24>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002887 	.word	0x08002887
 8002800:	08002819 	.word	0x08002819
 8002804:	0800282f 	.word	0x0800282f
 8002808:	0800284d 	.word	0x0800284d
 800280c:	08002863 	.word	0x08002863
 8002810:	08002887 	.word	0x08002887
 8002814:	08002845 	.word	0x08002845
	case up:
		if(Player.y_pos>0){
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <window_Game+0xf0>)
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02b      	beq.n	8002878 <window_Game+0xa0>
			Player.y_pos--;
 8002820:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <window_Game+0xf0>)
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	3b01      	subs	r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <window_Game+0xf0>)
 800282a:	705a      	strb	r2, [r3, #1]
		}
		break;
 800282c:	e024      	b.n	8002878 <window_Game+0xa0>
	case down:
		if(Player.y_pos<63){
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <window_Game+0xf0>)
 8002830:	785b      	ldrb	r3, [r3, #1]
 8002832:	2b3e      	cmp	r3, #62	@ 0x3e
 8002834:	d822      	bhi.n	800287c <window_Game+0xa4>
				Player.y_pos++;
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <window_Game+0xf0>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <window_Game+0xf0>)
 8002840:	705a      	strb	r2, [r3, #1]
			}
		break;
 8002842:	e01b      	b.n	800287c <window_Game+0xa4>
	case select:
		break;
	case back:
		currWindow=menu;
 8002844:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <window_Game+0xf4>)
 8002846:	22ff      	movs	r2, #255	@ 0xff
 8002848:	701a      	strb	r2, [r3, #0]
		break;
 800284a:	e01c      	b.n	8002886 <window_Game+0xae>
	case left:
		if(Player.x_pos>0){
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <window_Game+0xf0>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <window_Game+0xa8>
				Player.x_pos--;
 8002854:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <window_Game+0xf0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <window_Game+0xf0>)
 800285e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002860:	e00e      	b.n	8002880 <window_Game+0xa8>
	case right:
		if(Player.x_pos<127){
 8002862:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <window_Game+0xf0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b7e      	cmp	r3, #126	@ 0x7e
 8002868:	d80c      	bhi.n	8002884 <window_Game+0xac>
				Player.x_pos++;
 800286a:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <window_Game+0xf0>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <window_Game+0xf0>)
 8002874:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002876:	e005      	b.n	8002884 <window_Game+0xac>
		break;
 8002878:	bf00      	nop
 800287a:	e004      	b.n	8002886 <window_Game+0xae>
		break;
 800287c:	bf00      	nop
 800287e:	e002      	b.n	8002886 <window_Game+0xae>
		break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <window_Game+0xae>
		break;
 8002884:	bf00      	nop
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fd ff45 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 800288c:	2101      	movs	r1, #1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fec9 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <window_Game+0xf8>)
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fd7e 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 800289c:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <window_Game+0xfc>)
 800289e:	221e      	movs	r2, #30
 80028a0:	210f      	movs	r1, #15
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fcd6 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawPixel(u8g2,Player.x_pos,Player.y_pos);
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <window_Game+0xf0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <window_Game+0xf0>)
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	461a      	mov	r2, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fe83 	bl	80015c0 <u8g2_DrawPixel>


	u8g2_SendBuffer(u8g2);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fd ff9e 	bl	80007fc <u8g2_SendBuffer>

}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000088 	.word	0x20000088
 80028cc:	20000083 	.word	0x20000083
 80028d0:	08007b1c 	.word	0x08007b1c
 80028d4:	08007450 	.word	0x08007450

080028d8 <window_Idle>:

void window_Idle(u8g2_t* u8g2){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af02      	add	r7, sp, #8
 80028de:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fc52 	bl	8002190 <handleInput>
 80028ec:	7a3b      	ldrb	r3, [r7, #8]
 80028ee:	73fb      	strb	r3, [r7, #15]
	switch(input){
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d828      	bhi.n	8002948 <window_Idle+0x70>
 80028f6:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <window_Idle+0x24>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002949 	.word	0x08002949
 8002900:	08002919 	.word	0x08002919
 8002904:	08002921 	.word	0x08002921
 8002908:	08002939 	.word	0x08002939
 800290c:	08002941 	.word	0x08002941
 8002910:	08002929 	.word	0x08002929
 8002914:	08002931 	.word	0x08002931
	case up:
		currWindow=menu;
 8002918:	4b43      	ldr	r3, [pc, #268]	@ (8002a28 <window_Idle+0x150>)
 800291a:	22ff      	movs	r2, #255	@ 0xff
 800291c:	701a      	strb	r2, [r3, #0]
		break;
 800291e:	e013      	b.n	8002948 <window_Idle+0x70>
	case down:
		currWindow=menu;
 8002920:	4b41      	ldr	r3, [pc, #260]	@ (8002a28 <window_Idle+0x150>)
 8002922:	22ff      	movs	r2, #255	@ 0xff
 8002924:	701a      	strb	r2, [r3, #0]
		break;
 8002926:	e00f      	b.n	8002948 <window_Idle+0x70>
	case select:
		currWindow=menu;
 8002928:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <window_Idle+0x150>)
 800292a:	22ff      	movs	r2, #255	@ 0xff
 800292c:	701a      	strb	r2, [r3, #0]
		break;
 800292e:	e00b      	b.n	8002948 <window_Idle+0x70>
	case back:
		currWindow=menu;
 8002930:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <window_Idle+0x150>)
 8002932:	22ff      	movs	r2, #255	@ 0xff
 8002934:	701a      	strb	r2, [r3, #0]
		break;
 8002936:	e007      	b.n	8002948 <window_Idle+0x70>
	case left:
		currWindow=menu;
 8002938:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <window_Idle+0x150>)
 800293a:	22ff      	movs	r2, #255	@ 0xff
 800293c:	701a      	strb	r2, [r3, #0]
		break;
 800293e:	e003      	b.n	8002948 <window_Idle+0x70>
	case right:
		currWindow=menu;
 8002940:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <window_Idle+0x150>)
 8002942:	22ff      	movs	r2, #255	@ 0xff
 8002944:	701a      	strb	r2, [r3, #0]
		break;
 8002946:	bf00      	nop
	case null:
		/*-------------------------*/
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fd fee4 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 800294e:	2101      	movs	r1, #1
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fe fe68 	bl	8001626 <u8g2_SetDrawColor>
	switch(z_iter){
 8002956:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <window_Idle+0x154>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d85d      	bhi.n	8002a1a <window_Idle+0x142>
 800295e:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <window_Idle+0x8c>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002975 	.word	0x08002975
 8002968:	0800299f 	.word	0x0800299f
 800296c:	080029c9 	.word	0x080029c9
 8002970:	080029f3 	.word	0x080029f3
	case 0:
		u8g2_DrawXBMP(u8g2, 20, 20, panda0_width, panda0_height,  panda0_bits);
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <window_Idle+0x158>)
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	2329      	movs	r3, #41	@ 0x29
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	235b      	movs	r3, #91	@ 0x5b
 800297e:	2214      	movs	r2, #20
 8002980:	2114      	movs	r1, #20
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd fe4e 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_5x8);
 8002988:	492a      	ldr	r1, [pc, #168]	@ (8002a34 <window_Idle+0x15c>)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fd04 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 30, 35, "z");
 8002990:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <window_Idle+0x160>)
 8002992:	2223      	movs	r2, #35	@ 0x23
 8002994:	211e      	movs	r1, #30
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fc5c 	bl	8001254 <u8g2_DrawStr>
		break;
 800299c:	e03d      	b.n	8002a1a <window_Idle+0x142>
	case 1:
		u8g2_DrawXBMP(u8g2, 20, 21, panda1_width, panda1_height,  panda1_bits);
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <window_Idle+0x164>)
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2328      	movs	r3, #40	@ 0x28
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	235b      	movs	r3, #91	@ 0x5b
 80029a8:	2215      	movs	r2, #21
 80029aa:	2114      	movs	r1, #20
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fd fe39 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_7x14);
 80029b2:	4923      	ldr	r1, [pc, #140]	@ (8002a40 <window_Idle+0x168>)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fe fcef 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 23, 27, "z");
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <window_Idle+0x160>)
 80029bc:	221b      	movs	r2, #27
 80029be:	2117      	movs	r1, #23
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe fc47 	bl	8001254 <u8g2_DrawStr>
		break;
 80029c6:	e028      	b.n	8002a1a <window_Idle+0x142>
	case 2:
		u8g2_DrawXBMP(u8g2, 20, 21, panda1_width, panda1_height,  panda1_bits);
 80029c8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <window_Idle+0x164>)
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	2328      	movs	r3, #40	@ 0x28
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	235b      	movs	r3, #91	@ 0x5b
 80029d2:	2215      	movs	r2, #21
 80029d4:	2114      	movs	r1, #20
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd fe24 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_7x14);
 80029dc:	4918      	ldr	r1, [pc, #96]	@ (8002a40 <window_Idle+0x168>)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fcda 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 13, 15, "Z");
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <window_Idle+0x16c>)
 80029e6:	220f      	movs	r2, #15
 80029e8:	210d      	movs	r1, #13
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fc32 	bl	8001254 <u8g2_DrawStr>
		break;
 80029f0:	e013      	b.n	8002a1a <window_Idle+0x142>
	case 3:
		u8g2_DrawXBMP(u8g2, 20, 20, panda0_width, panda0_height,  panda0_bits);
 80029f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <window_Idle+0x158>)
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2329      	movs	r3, #41	@ 0x29
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	235b      	movs	r3, #91	@ 0x5b
 80029fc:	2214      	movs	r2, #20
 80029fe:	2114      	movs	r1, #20
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7fd fe0f 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_7x14);
 8002a06:	490e      	ldr	r1, [pc, #56]	@ (8002a40 <window_Idle+0x168>)
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe fcc5 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 13, 15, "Z");
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <window_Idle+0x16c>)
 8002a10:	220f      	movs	r2, #15
 8002a12:	210d      	movs	r1, #13
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fe fc1d 	bl	8001254 <u8g2_DrawStr>
	}
	u8g2_SendBuffer(u8g2);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd feee 	bl	80007fc <u8g2_SendBuffer>
	//Animation Delay is Handled in Tim3 PeriodElapsedCallback IRQ in main.c [User Code 4]
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000083 	.word	0x20000083
 8002a2c:	200004b4 	.word	0x200004b4
 8002a30:	08008758 	.word	0x08008758
 8002a34:	08007468 	.word	0x08007468
 8002a38:	08007460 	.word	0x08007460
 8002a3c:	08008944 	.word	0x08008944
 8002a40:	08007b1c 	.word	0x08007b1c
 8002a44:	08007464 	.word	0x08007464

08002a48 <window_NFC>:

void window_NFC(u8g2_t* u8g2){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fb9a 	bl	8002190 <handleInput>
 8002a5c:	7a3b      	ldrb	r3, [r7, #8]
 8002a5e:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d814      	bhi.n	8002a90 <window_NFC+0x48>
 8002a66:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <window_NFC+0x24>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a91 	.word	0x08002a91
 8002a70:	08002a91 	.word	0x08002a91
 8002a74:	08002a91 	.word	0x08002a91
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002a89 	.word	0x08002a89
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002a88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <window_NFC+0x78>)
 8002a8a:	22ff      	movs	r2, #255	@ 0xff
 8002a8c:	701a      	strb	r2, [r3, #0]
		break;
 8002a8e:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fd fe40 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe fdc4 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002a9e:	4909      	ldr	r1, [pc, #36]	@ (8002ac4 <window_NFC+0x7c>)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe fc79 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <window_NFC+0x80>)
 8002aa8:	221e      	movs	r2, #30
 8002aaa:	210f      	movs	r1, #15
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe fbd1 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fea2 	bl	80007fc <u8g2_SendBuffer>

}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000083 	.word	0x20000083
 8002ac4:	08007b1c 	.word	0x08007b1c
 8002ac8:	08007450 	.word	0x08007450

08002acc <window_RFID>:

void window_RFID(u8g2_t* u8g2){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002ad4:	f107 0308 	add.w	r3, r7, #8
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fb58 	bl	8002190 <handleInput>
 8002ae0:	7a3b      	ldrb	r3, [r7, #8]
 8002ae2:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d814      	bhi.n	8002b14 <window_RFID+0x48>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <window_RFID+0x24>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002b15 	.word	0x08002b15
 8002af8:	08002b15 	.word	0x08002b15
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b15 	.word	0x08002b15
 8002b04:	08002b15 	.word	0x08002b15
 8002b08:	08002b0d 	.word	0x08002b0d
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <window_RFID+0x78>)
 8002b0e:	22ff      	movs	r2, #255	@ 0xff
 8002b10:	701a      	strb	r2, [r3, #0]
		break;
 8002b12:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fd fdfe 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7fe fd82 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002b22:	4909      	ldr	r1, [pc, #36]	@ (8002b48 <window_RFID+0x7c>)
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fe fc37 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <window_RFID+0x80>)
 8002b2c:	221e      	movs	r2, #30
 8002b2e:	210f      	movs	r1, #15
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe fb8f 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fd fe60 	bl	80007fc <u8g2_SendBuffer>

}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000083 	.word	0x20000083
 8002b48:	08007b1c 	.word	0x08007b1c
 8002b4c:	08007450 	.word	0x08007450

08002b50 <window_Settings>:

void window_Settings(u8g2_t* u8g2){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002b58:	f107 0308 	add.w	r3, r7, #8
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fb16 	bl	8002190 <handleInput>
 8002b64:	7a3b      	ldrb	r3, [r7, #8]
 8002b66:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d814      	bhi.n	8002b98 <window_Settings+0x48>
 8002b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <window_Settings+0x24>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002b99 	.word	0x08002b99
 8002b7c:	08002b99 	.word	0x08002b99
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002b99 	.word	0x08002b99
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002b91 	.word	0x08002b91
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <window_Settings+0x78>)
 8002b92:	22ff      	movs	r2, #255	@ 0xff
 8002b94:	701a      	strb	r2, [r3, #0]
		break;
 8002b96:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fd fdbc 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe fd40 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002ba6:	4909      	ldr	r1, [pc, #36]	@ (8002bcc <window_Settings+0x7c>)
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fbf5 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <window_Settings+0x80>)
 8002bb0:	221e      	movs	r2, #30
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fe fb4d 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fe1e 	bl	80007fc <u8g2_SendBuffer>

}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000083 	.word	0x20000083
 8002bcc:	08007b1c 	.word	0x08007b1c
 8002bd0:	08007450 	.word	0x08007450

08002bd4 <window_Subghz>:

void window_Subghz(u8g2_t* u8g2){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fad4 	bl	8002190 <handleInput>
 8002be8:	7a3b      	ldrb	r3, [r7, #8]
 8002bea:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d814      	bhi.n	8002c1c <window_Subghz+0x48>
 8002bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <window_Subghz+0x24>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c1d 	.word	0x08002c1d
 8002c00:	08002c1d 	.word	0x08002c1d
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c1d 	.word	0x08002c1d
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c15 	.word	0x08002c15
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <window_Subghz+0x78>)
 8002c16:	22ff      	movs	r2, #255	@ 0xff
 8002c18:	701a      	strb	r2, [r3, #0]
		break;
 8002c1a:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fd fd7a 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002c22:	2101      	movs	r1, #1
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe fcfe 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002c2a:	4909      	ldr	r1, [pc, #36]	@ (8002c50 <window_Subghz+0x7c>)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fe fbb3 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002c32:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <window_Subghz+0x80>)
 8002c34:	221e      	movs	r2, #30
 8002c36:	210f      	movs	r1, #15
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe fb0b 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd fddc 	bl	80007fc <u8g2_SendBuffer>

}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000083 	.word	0x20000083
 8002c50:	08007b1c 	.word	0x08007b1c
 8002c54:	08007450 	.word	0x08007450

08002c58 <u8g2_gpio_and_delay_stm32>:
static void MX_UART4_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	72fb      	strb	r3, [r7, #11]
 8002c66:	4613      	mov	r3, r2
 8002c68:	72bb      	strb	r3, [r7, #10]
	switch(msg){
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	3b28      	subs	r3, #40	@ 0x28
 8002c6e:	2b23      	cmp	r3, #35	@ 0x23
 8002c70:	d875      	bhi.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
 8002c72:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <u8g2_gpio_and_delay_stm32+0x20>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002d5f 	.word	0x08002d5f
 8002c7c:	08002d09 	.word	0x08002d09
 8002c80:	08002d13 	.word	0x08002d13
 8002c84:	08002d2b 	.word	0x08002d2b
 8002c88:	08002d5f 	.word	0x08002d5f
 8002c8c:	08002d5f 	.word	0x08002d5f
 8002c90:	08002d5f 	.word	0x08002d5f
 8002c94:	08002d5f 	.word	0x08002d5f
 8002c98:	08002d5f 	.word	0x08002d5f
 8002c9c:	08002d5f 	.word	0x08002d5f
 8002ca0:	08002d5f 	.word	0x08002d5f
 8002ca4:	08002d5f 	.word	0x08002d5f
 8002ca8:	08002d5f 	.word	0x08002d5f
 8002cac:	08002d5f 	.word	0x08002d5f
 8002cb0:	08002d5f 	.word	0x08002d5f
 8002cb4:	08002d5f 	.word	0x08002d5f
 8002cb8:	08002d5f 	.word	0x08002d5f
 8002cbc:	08002d5f 	.word	0x08002d5f
 8002cc0:	08002d5f 	.word	0x08002d5f
 8002cc4:	08002d5f 	.word	0x08002d5f
 8002cc8:	08002d5f 	.word	0x08002d5f
 8002ccc:	08002d5f 	.word	0x08002d5f
 8002cd0:	08002d5f 	.word	0x08002d5f
 8002cd4:	08002d5f 	.word	0x08002d5f
 8002cd8:	08002d5f 	.word	0x08002d5f
 8002cdc:	08002d5f 	.word	0x08002d5f
 8002ce0:	08002d5f 	.word	0x08002d5f
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d5f 	.word	0x08002d5f
 8002cec:	08002d5f 	.word	0x08002d5f
 8002cf0:	08002d5f 	.word	0x08002d5f
 8002cf4:	08002d5f 	.word	0x08002d5f
 8002cf8:	08002d5f 	.word	0x08002d5f
 8002cfc:	08002d2f 	.word	0x08002d2f
 8002d00:	08002d3f 	.word	0x08002d3f
 8002d04:	08002d4f 	.word	0x08002d4f

		break;

		//Function which implements a delay, arg_int contains the amount of ms
		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8002d08:	7abb      	ldrb	r3, [r7, #10]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fe14 	bl	8003938 <HAL_Delay>

		break;
 8002d10:	e025      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
		for (uint16_t n = 0; n < 320; n++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	82fb      	strh	r3, [r7, #22]
 8002d16:	e003      	b.n	8002d20 <u8g2_gpio_and_delay_stm32+0xc8>
		{
			__NOP();
 8002d18:	bf00      	nop
		for (uint16_t n = 0; n < 320; n++)
 8002d1a:	8afb      	ldrh	r3, [r7, #22]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	82fb      	strh	r3, [r7, #22]
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d26:	d3f7      	bcc.n	8002d18 <u8g2_gpio_and_delay_stm32+0xc0>
		}

		break;
 8002d28:	e019      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function which delays 100ns
		case U8X8_MSG_DELAY_100NANO:
		__NOP();
 8002d2a:	bf00      	nop

		break;
 8002d2c:	e017      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		// Function to define the logic level of the CS line
		case U8X8_MSG_GPIO_CS:
			HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8002d2e:	7abb      	ldrb	r3, [r7, #10]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d36:	480c      	ldr	r0, [pc, #48]	@ (8002d68 <u8g2_gpio_and_delay_stm32+0x110>)
 8002d38:	f001 f98a 	bl	8004050 <HAL_GPIO_WritePin>
			//Disable NSS and enable another gpio pin as CS
		break;
 8002d3c:	e00f      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function to define the logic level of the Data/ Command line
		case U8X8_MSG_GPIO_DC:
			HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8002d3e:	7abb      	ldrb	r3, [r7, #10]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d46:	4808      	ldr	r0, [pc, #32]	@ (8002d68 <u8g2_gpio_and_delay_stm32+0x110>)
 8002d48:	f001 f982 	bl	8004050 <HAL_GPIO_WritePin>
		break;
 8002d4c:	e007      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function to define the logic level of the RESET line
		case U8X8_MSG_GPIO_RESET:
			HAL_GPIO_WritePin(OLED_Reset_GPIO_Port, OLED_Reset_Pin, arg_int);
 8002d4e:	7abb      	ldrb	r3, [r7, #10]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d56:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <u8g2_gpio_and_delay_stm32+0x114>)
 8002d58:	f001 f97a 	bl	8004050 <HAL_GPIO_WritePin>
		break;
 8002d5c:	bf00      	nop

	}

	return 1; // command processed successfully.
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021400 	.word	0x40021400

08002d70 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	72fb      	strb	r3, [r7, #11]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	3b14      	subs	r3, #20
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d847      	bhi.n	8002e1a <u8x8_byte_stm32_hw_spi+0xaa>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <u8x8_byte_stm32_hw_spi+0x20>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002e1f 	.word	0x08002e1f
 8002d94:	08002e1b 	.word	0x08002e1b
 8002d98:	08002e1b 	.word	0x08002e1b
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002deb 	.word	0x08002deb
 8002da4:	08002e03 	.word	0x08002e03
 8002da8:	08002e1b 	.word	0x08002e1b
 8002dac:	08002e1b 	.word	0x08002e1b
 8002db0:	08002e1b 	.word	0x08002e1b
 8002db4:	08002e1b 	.word	0x08002e1b
 8002db8:	08002e1b 	.word	0x08002e1b
 8002dbc:	08002e1b 	.word	0x08002e1b
 8002dc0:	08002ddd 	.word	0x08002ddd
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8002dc4:	7abb      	ldrb	r3, [r7, #10]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	2364      	movs	r3, #100	@ 0x64
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4818      	ldr	r0, [pc, #96]	@ (8002e30 <u8x8_byte_stm32_hw_spi+0xc0>)
 8002dce:	f002 fb2a 	bl	8005426 <HAL_SPI_Transmit>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d024      	beq.n	8002e22 <u8x8_byte_stm32_hw_spi+0xb2>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e024      	b.n	8002e26 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8002ddc:	7abb      	ldrb	r3, [r7, #10]
 8002dde:	461a      	mov	r2, r3
 8002de0:	214a      	movs	r1, #74	@ 0x4a
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff f965 	bl	80020b2 <u8x8_gpio_call>
		break;
 8002de8:	e01c      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	2149      	movs	r1, #73	@ 0x49
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff f95c 	bl	80020b2 <u8x8_gpio_call>
		HAL_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 fd9c 	bl	8003938 <HAL_Delay>
		break;
 8002e00:	e010      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f000 fd98 	bl	8003938 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2149      	movs	r1, #73	@ 0x49
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff f94d 	bl	80020b2 <u8x8_gpio_call>
		break;
 8002e18:	e004      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e003      	b.n	8002e26 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8002e22:	bf00      	nop
	}
	return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200004b8 	.word	0x200004b8

08002e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e38:	f000 fd21 	bl	800387e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3c:	f000 f838 	bl	8002eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e40:	f000 f994 	bl	800316c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002e44:	f000 f8a0 	bl	8002f88 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002e48:	f000 f8dc 	bl	8003004 <MX_TIM3_Init>
  MX_UART4_Init();
 8002e4c:	f000 f92e 	bl	80030ac <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002e50:	f000 f95c 	bl	800310c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	480f      	ldr	r0, [pc, #60]	@ (8002e98 <main+0x64>)
 8002e5a:	f001 f8f9 	bl	8004050 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);
 8002e5e:	480f      	ldr	r0, [pc, #60]	@ (8002e9c <main+0x68>)
 8002e60:	f002 fe30 	bl	8005ac4 <HAL_TIM_Base_Start_IT>

  u8g2_Setup_ssd1309_128x64_noname2_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <main+0x6c>)
 8002e66:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea4 <main+0x70>)
 8002e68:	490f      	ldr	r1, [pc, #60]	@ (8002ea8 <main+0x74>)
 8002e6a:	4810      	ldr	r0, [pc, #64]	@ (8002eac <main+0x78>)
 8002e6c:	f7fd fce4 	bl	8000838 <u8g2_Setup_ssd1309_128x64_noname2_f>
  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8002e70:	480e      	ldr	r0, [pc, #56]	@ (8002eac <main+0x78>)
 8002e72:	f7ff f8ef 	bl	8002054 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8002e76:	2100      	movs	r1, #0
 8002e78:	480c      	ldr	r0, [pc, #48]	@ (8002eac <main+0x78>)
 8002e7a:	f7ff f8fa 	bl	8002072 <u8x8_SetPowerSave>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //USE FREE RTOS
  	handle_Windows(&u8g2);//Task1
 8002e7e:	480b      	ldr	r0, [pc, #44]	@ (8002eac <main+0x78>)
 8002e80:	f7ff fb4e 	bl	8002520 <handle_Windows>
  	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);//Task2
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	4804      	ldr	r0, [pc, #16]	@ (8002e98 <main+0x64>)
 8002e88:	f001 f8fb 	bl	8004082 <HAL_GPIO_TogglePin>
  	HAL_Delay(10);
 8002e8c:	200a      	movs	r0, #10
 8002e8e:	f000 fd53 	bl	8003938 <HAL_Delay>
  	handle_Windows(&u8g2);//Task1
 8002e92:	bf00      	nop
 8002e94:	e7f3      	b.n	8002e7e <main+0x4a>
 8002e96:	bf00      	nop
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	2000051c 	.word	0x2000051c
 8002ea0:	08002c59 	.word	0x08002c59
 8002ea4:	08002d71 	.word	0x08002d71
 8002ea8:	08008498 	.word	0x08008498
 8002eac:	20000678 	.word	0x20000678

08002eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b094      	sub	sp, #80	@ 0x50
 8002eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	2234      	movs	r2, #52	@ 0x34
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fa8d 	bl	80073de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ed4:	f001 f8f0 	bl	80040b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed8:	4b29      	ldr	r3, [pc, #164]	@ (8002f80 <SystemClock_Config+0xd0>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	4a28      	ldr	r2, [pc, #160]	@ (8002f80 <SystemClock_Config+0xd0>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee4:	4b26      	ldr	r3, [pc, #152]	@ (8002f80 <SystemClock_Config+0xd0>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ef0:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <SystemClock_Config+0xd4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ef8:	4a22      	ldr	r2, [pc, #136]	@ (8002f84 <SystemClock_Config+0xd4>)
 8002efa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b20      	ldr	r3, [pc, #128]	@ (8002f84 <SystemClock_Config+0xd4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f10:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002f14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f16:	2302      	movs	r3, #2
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f20:	2304      	movs	r3, #4
 8002f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f24:	23d8      	movs	r3, #216	@ 0xd8
 8002f26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002f2c:	2309      	movs	r3, #9
 8002f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f30:	2302      	movs	r3, #2
 8002f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 f8cd 	bl	80040d8 <HAL_RCC_OscConfig>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f44:	f000 faaa 	bl	800349c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f48:	230f      	movs	r3, #15
 8002f4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	2103      	movs	r1, #3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 fb64 	bl	8004634 <HAL_RCC_ClockConfig>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002f72:	f000 fa93 	bl	800349c <Error_Handler>
  }
}
 8002f76:	bf00      	nop
 8002f78:	3750      	adds	r7, #80	@ 0x50
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000

08002f88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <MX_SPI1_Init+0x78>)
 8002f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002f94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fa2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002fa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa8:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fae:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fe6:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <MX_SPI1_Init+0x74>)
 8002fe8:	f002 f972 	bl	80052d0 <HAL_SPI_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ff2:	f000 fa53 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200004b8 	.word	0x200004b8
 8003000:	40013000 	.word	0x40013000

08003004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003022:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003024:	4a20      	ldr	r2, [pc, #128]	@ (80030a8 <MX_TIM3_Init+0xa4>)
 8003026:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54000;
 8003028:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 800302a:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 800302e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800303c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303e:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003044:	4b17      	ldr	r3, [pc, #92]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003046:	2280      	movs	r2, #128	@ 0x80
 8003048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800304a:	4816      	ldr	r0, [pc, #88]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 800304c:	f002 fce2 	bl	8005a14 <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003056:	f000 fa21 	bl	800349c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800305e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4619      	mov	r1, r3
 8003066:	480f      	ldr	r0, [pc, #60]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003068:	f002 fec4 	bl	8005df4 <HAL_TIM_ConfigClockSource>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003072:	f000 fa13 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4808      	ldr	r0, [pc, #32]	@ (80030a4 <MX_TIM3_Init+0xa0>)
 8003084:	f003 f8e2 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800308e:	f000 fa05 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//  TIM3->ARR = 0;
  TIM3->ARR = 51999;//Count up to
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <MX_TIM3_Init+0xa4>)
 8003094:	f64c 321f 	movw	r2, #51999	@ 0xcb1f
 8003098:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* USER CODE END TIM3_Init 2 */

}
 800309a:	bf00      	nop
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000051c 	.word	0x2000051c
 80030a8:	40000400 	.word	0x40000400

080030ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030b0:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <MX_UART4_Init+0x58>)
 80030b2:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <MX_UART4_Init+0x5c>)
 80030b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030b6:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <MX_UART4_Init+0x58>)
 80030b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030be:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <MX_UART4_Init+0x58>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <MX_UART4_Init+0x58>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <MX_UART4_Init+0x58>)
 80030cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030d0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <MX_UART4_Init+0x58>)
 80030d4:	220c      	movs	r2, #12
 80030d6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <MX_UART4_Init+0x58>)
 80030da:	2200      	movs	r2, #0
 80030dc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <MX_UART4_Init+0x58>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030e4:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <MX_UART4_Init+0x58>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <MX_UART4_Init+0x58>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030f0:	4804      	ldr	r0, [pc, #16]	@ (8003104 <MX_UART4_Init+0x58>)
 80030f2:	f003 f957 	bl	80063a4 <HAL_UART_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80030fc:	f000 f9ce 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000568 	.word	0x20000568
 8003108:	40004c00 	.word	0x40004c00

0800310c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003110:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003112:	4a15      	ldr	r2, [pc, #84]	@ (8003168 <MX_USART3_UART_Init+0x5c>)
 8003114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003116:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003144:	2200      	movs	r2, #0
 8003146:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 800314a:	2200      	movs	r2, #0
 800314c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800314e:	4805      	ldr	r0, [pc, #20]	@ (8003164 <MX_USART3_UART_Init+0x58>)
 8003150:	f003 f928 	bl	80063a4 <HAL_UART_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800315a:	f000 f99f 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200005f0 	.word	0x200005f0
 8003168:	40004800 	.word	0x40004800

0800316c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08e      	sub	sp, #56	@ 0x38
 8003170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003182:	4ba5      	ldr	r3, [pc, #660]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4aa4      	ldr	r2, [pc, #656]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4ba2      	ldr	r3, [pc, #648]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800319a:	4b9f      	ldr	r3, [pc, #636]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	4a9e      	ldr	r2, [pc, #632]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b2:	4b99      	ldr	r3, [pc, #612]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	4a98      	ldr	r2, [pc, #608]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031be:	4b96      	ldr	r3, [pc, #600]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ca:	4b93      	ldr	r3, [pc, #588]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	4a92      	ldr	r2, [pc, #584]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031d0:	f043 0302 	orr.w	r3, r3, #2
 80031d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d6:	4b90      	ldr	r3, [pc, #576]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	4a8c      	ldr	r2, [pc, #560]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031e8:	f043 0320 	orr.w	r3, r3, #32
 80031ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031fa:	4b87      	ldr	r3, [pc, #540]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a86      	ldr	r2, [pc, #536]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b84      	ldr	r3, [pc, #528]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003212:	4b81      	ldr	r3, [pc, #516]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	4a80      	ldr	r2, [pc, #512]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	6313      	str	r3, [r2, #48]	@ 0x30
 800321e:	4b7e      	ldr	r3, [pc, #504]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800322a:	4b7b      	ldr	r3, [pc, #492]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	4a7a      	ldr	r2, [pc, #488]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003234:	6313      	str	r3, [r2, #48]	@ 0x30
 8003236:	4b78      	ldr	r3, [pc, #480]	@ (8003418 <MX_GPIO_Init+0x2ac>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003242:	2200      	movs	r2, #0
 8003244:	f244 0181 	movw	r1, #16513	@ 0x4081
 8003248:	4874      	ldr	r0, [pc, #464]	@ (800341c <MX_GPIO_Init+0x2b0>)
 800324a:	f000 ff01 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_Reset_GPIO_Port, OLED_Reset_Pin, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003254:	4872      	ldr	r0, [pc, #456]	@ (8003420 <MX_GPIO_Init+0x2b4>)
 8003256:	f000 fefb 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800325a:	2200      	movs	r2, #0
 800325c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003260:	4870      	ldr	r0, [pc, #448]	@ (8003424 <MX_GPIO_Init+0x2b8>)
 8003262:	f000 fef5 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003266:	2200      	movs	r2, #0
 8003268:	2140      	movs	r1, #64	@ 0x40
 800326a:	486f      	ldr	r0, [pc, #444]	@ (8003428 <MX_GPIO_Init+0x2bc>)
 800326c:	f000 fef0 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003284:	4619      	mov	r1, r3
 8003286:	4869      	ldr	r0, [pc, #420]	@ (800342c <MX_GPIO_Init+0x2c0>)
 8003288:	f000 fd1e 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800328c:	2332      	movs	r3, #50	@ 0x32
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800329c:	230b      	movs	r3, #11
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	4861      	ldr	r0, [pc, #388]	@ (800342c <MX_GPIO_Init+0x2c0>)
 80032a8:	f000 fd0e 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032ac:	2386      	movs	r3, #134	@ 0x86
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b8:	2303      	movs	r3, #3
 80032ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032bc:	230b      	movs	r3, #11
 80032be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	485a      	ldr	r0, [pc, #360]	@ (8003430 <MX_GPIO_Init+0x2c4>)
 80032c8:	f000 fcfe 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80032cc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e2:	4619      	mov	r1, r3
 80032e4:	484d      	ldr	r0, [pc, #308]	@ (800341c <MX_GPIO_Init+0x2b0>)
 80032e6:	f000 fcef 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_Reset_Pin */
  GPIO_InitStruct.Pin = OLED_Reset_Pin;
 80032ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f0:	2301      	movs	r3, #1
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	2300      	movs	r3, #0
 80032fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OLED_Reset_GPIO_Port, &GPIO_InitStruct);
 80032fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003300:	4619      	mov	r1, r3
 8003302:	4847      	ldr	r0, [pc, #284]	@ (8003420 <MX_GPIO_Init+0x2b4>)
 8003304:	f000 fce0 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_BTN_Pin Select_BTN_Pin Back_BTN_Pin */
  GPIO_InitStruct.Pin = Up_BTN_Pin|Select_BTN_Pin|Back_BTN_Pin;
 8003308:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330e:	2300      	movs	r3, #0
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003312:	2302      	movs	r3, #2
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800331a:	4619      	mov	r1, r3
 800331c:	4840      	ldr	r0, [pc, #256]	@ (8003420 <MX_GPIO_Init+0x2b4>)
 800331e:	f000 fcd3 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_BTN_Pin Down_BTN_Pin Left_BTN_Pin */
  GPIO_InitStruct.Pin = Right_BTN_Pin|Down_BTN_Pin|Left_BTN_Pin;
 8003322:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003328:	2300      	movs	r3, #0
 800332a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800332c:	2302      	movs	r3, #2
 800332e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003334:	4619      	mov	r1, r3
 8003336:	483f      	ldr	r0, [pc, #252]	@ (8003434 <MX_GPIO_Init+0x2c8>)
 8003338:	f000 fcc6 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800333c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800334e:	230b      	movs	r3, #11
 8003350:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003356:	4619      	mov	r1, r3
 8003358:	4830      	ldr	r0, [pc, #192]	@ (800341c <MX_GPIO_Init+0x2b0>)
 800335a:	f000 fcb5 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 800335e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003364:	2301      	movs	r3, #1
 8003366:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	482b      	ldr	r0, [pc, #172]	@ (8003424 <MX_GPIO_Init+0x2b8>)
 8003378:	f000 fca6 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800337c:	2340      	movs	r3, #64	@ 0x40
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003380:	2301      	movs	r3, #1
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800338c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003390:	4619      	mov	r1, r3
 8003392:	4825      	ldr	r0, [pc, #148]	@ (8003428 <MX_GPIO_Init+0x2bc>)
 8003394:	f000 fc98 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339c:	2300      	movs	r3, #0
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	481f      	ldr	r0, [pc, #124]	@ (8003428 <MX_GPIO_Init+0x2bc>)
 80033ac:	f000 fc8c 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80033b0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033be:	2303      	movs	r3, #3
 80033c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033c2:	230a      	movs	r3, #10
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	4818      	ldr	r0, [pc, #96]	@ (8003430 <MX_GPIO_Init+0x2c4>)
 80033ce:	f000 fc7b 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80033d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80033e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	4812      	ldr	r0, [pc, #72]	@ (8003430 <MX_GPIO_Init+0x2c4>)
 80033e8:	f000 fc6e 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80033ec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fa:	2303      	movs	r3, #3
 80033fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033fe:	230b      	movs	r3, #11
 8003400:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003406:	4619      	mov	r1, r3
 8003408:	4807      	ldr	r0, [pc, #28]	@ (8003428 <MX_GPIO_Init+0x2bc>)
 800340a:	f000 fc5d 	bl	8003cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800340e:	bf00      	nop
 8003410:	3738      	adds	r7, #56	@ 0x38
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40020400 	.word	0x40020400
 8003420:	40021400 	.word	0x40021400
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021800 	.word	0x40021800
 800342c:	40020800 	.word	0x40020800
 8003430:	40020000 	.word	0x40020000
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Timer3 has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d11d      	bne.n	8003484 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if(Tim3Count==255){
 8003448:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2bff      	cmp	r3, #255	@ 0xff
 800344e:	d10c      	bne.n	800346a <HAL_TIM_PeriodElapsedCallback+0x32>
			//Handle Idle Animation Delay
			z_iter++;
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800345a:	701a      	strb	r2, [r3, #0]
			z_iter=z_iter%4;
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003468:	701a      	strb	r2, [r3, #0]
		}
		if(Tim3Count>=255){
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2bff      	cmp	r3, #255	@ 0xff
 8003470:	d102      	bne.n	8003478 <HAL_TIM_PeriodElapsedCallback+0x40>
			Tim3Count=0;//Don't let overflow
 8003472:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
		}
		Tim3Count++;
 8003478:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b04      	ldr	r3, [pc, #16]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003482:	701a      	strb	r2, [r3, #0]
	}
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	2000051c 	.word	0x2000051c
 8003494:	200004b5 	.word	0x200004b5
 8003498:	200004b4 	.word	0x200004b4

0800349c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
}
 80034a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <Error_Handler+0x8>

080034a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80034ae:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <HAL_MspInit+0x44>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <HAL_MspInit+0x44>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <HAL_MspInit+0x44>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_MspInit+0x44>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <HAL_MspInit+0x44>)
 80034cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_MspInit+0x44>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	@ 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <HAL_SPI_MspInit+0xb4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d143      	bne.n	800359a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003512:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	4a24      	ldr	r2, [pc, #144]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003518:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800351c:	6453      	str	r3, [r2, #68]	@ 0x44
 800351e:	4b22      	ldr	r3, [pc, #136]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003542:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	6313      	str	r3, [r2, #48]	@ 0x30
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_SPI_MspInit+0xb8>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800355a:	2320      	movs	r3, #32
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800356a:	2305      	movs	r3, #5
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	480d      	ldr	r0, [pc, #52]	@ (80035ac <HAL_SPI_MspInit+0xbc>)
 8003576:	f000 fba7 	bl	8003cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357e:	2302      	movs	r3, #2
 8003580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003586:	2303      	movs	r3, #3
 8003588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800358a:	2305      	movs	r3, #5
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4619      	mov	r1, r3
 8003594:	4806      	ldr	r0, [pc, #24]	@ (80035b0 <HAL_SPI_MspInit+0xc0>)
 8003596:	f000 fb97 	bl	8003cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	@ 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40013000 	.word	0x40013000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020c00 	.word	0x40020c00

080035b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <HAL_TIM_Base_MspInit+0x44>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d113      	bne.n	80035ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <HAL_TIM_Base_MspInit+0x48>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	4a0c      	ldr	r2, [pc, #48]	@ (80035fc <HAL_TIM_Base_MspInit+0x48>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d2:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <HAL_TIM_Base_MspInit+0x48>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	201d      	movs	r0, #29
 80035e4:	f000 faa7 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035e8:	201d      	movs	r0, #29
 80035ea:	f000 fac0 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40023800 	.word	0x40023800

08003600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b0b0      	sub	sp, #192	@ 0xc0
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	2290      	movs	r2, #144	@ 0x90
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fedc 	bl	80073de <memset>
  if(huart->Instance==UART4)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4b      	ldr	r2, [pc, #300]	@ (8003758 <HAL_UART_MspInit+0x158>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d145      	bne.n	80036bc <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003634:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003636:	2300      	movs	r3, #0
 8003638:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800363a:	f107 031c 	add.w	r3, r7, #28
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fa1e 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800364a:	f7ff ff27 	bl	800349c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800364e:	4b43      	ldr	r3, [pc, #268]	@ (800375c <HAL_UART_MspInit+0x15c>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	4a42      	ldr	r2, [pc, #264]	@ (800375c <HAL_UART_MspInit+0x15c>)
 8003654:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003658:	6413      	str	r3, [r2, #64]	@ 0x40
 800365a:	4b40      	ldr	r3, [pc, #256]	@ (800375c <HAL_UART_MspInit+0x15c>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	4b3d      	ldr	r3, [pc, #244]	@ (800375c <HAL_UART_MspInit+0x15c>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	4a3c      	ldr	r2, [pc, #240]	@ (800375c <HAL_UART_MspInit+0x15c>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6313      	str	r3, [r2, #48]	@ 0x30
 8003672:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <HAL_UART_MspInit+0x15c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800367e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003698:	2308      	movs	r3, #8
 800369a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036a2:	4619      	mov	r1, r3
 80036a4:	482e      	ldr	r0, [pc, #184]	@ (8003760 <HAL_UART_MspInit+0x160>)
 80036a6:	f000 fb0f 	bl	8003cc8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2034      	movs	r0, #52	@ 0x34
 80036b0:	f000 fa41 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80036b4:	2034      	movs	r0, #52	@ 0x34
 80036b6:	f000 fa5a 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036ba:	e049      	b.n	8003750 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <HAL_UART_MspInit+0x164>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d144      	bne.n	8003750 <HAL_UART_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80036cc:	2300      	movs	r3, #0
 80036ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036d0:	f107 031c 	add.w	r3, r7, #28
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f9d3 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80036e0:	f7ff fedc 	bl	800349c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_UART_MspInit+0x15c>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	4a1c      	ldr	r2, [pc, #112]	@ (800375c <HAL_UART_MspInit+0x15c>)
 80036ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <HAL_UART_MspInit+0x15c>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036fc:	4b17      	ldr	r3, [pc, #92]	@ (800375c <HAL_UART_MspInit+0x15c>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_UART_MspInit+0x15c>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6313      	str	r3, [r2, #48]	@ 0x30
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_UART_MspInit+0x15c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003714:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003728:	2303      	movs	r3, #3
 800372a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800372e:	2307      	movs	r3, #7
 8003730:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003734:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003738:	4619      	mov	r1, r3
 800373a:	480b      	ldr	r0, [pc, #44]	@ (8003768 <HAL_UART_MspInit+0x168>)
 800373c:	f000 fac4 	bl	8003cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2027      	movs	r0, #39	@ 0x27
 8003746:	f000 f9f6 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800374a:	2027      	movs	r0, #39	@ 0x27
 800374c:	f000 fa0f 	bl	8003b6e <HAL_NVIC_EnableIRQ>
}
 8003750:	bf00      	nop
 8003752:	37c0      	adds	r7, #192	@ 0xc0
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40004c00 	.word	0x40004c00
 800375c:	40023800 	.word	0x40023800
 8003760:	40020800 	.word	0x40020800
 8003764:	40004800 	.word	0x40004800
 8003768:	40020c00 	.word	0x40020c00

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <NMI_Handler+0x4>

08003774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <HardFault_Handler+0x4>

0800377c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <MemManage_Handler+0x4>

08003784 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <BusFault_Handler+0x4>

0800378c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <UsageFault_Handler+0x4>

08003794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c2:	f000 f899 	bl	80038f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037d0:	4802      	ldr	r0, [pc, #8]	@ (80037dc <TIM3_IRQHandler+0x10>)
 80037d2:	f002 f9ef 	bl	8005bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000051c 	.word	0x2000051c

080037e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037e4:	4802      	ldr	r0, [pc, #8]	@ (80037f0 <USART3_IRQHandler+0x10>)
 80037e6:	f002 fe2b 	bl	8006440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200005f0 	.word	0x200005f0

080037f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <UART4_IRQHandler+0x10>)
 80037fa:	f002 fe21 	bl	8006440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000568 	.word	0x20000568

08003808 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <SystemInit+0x20>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	4a05      	ldr	r2, [pc, #20]	@ (8003828 <SystemInit+0x20>)
 8003814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800382c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003830:	480d      	ldr	r0, [pc, #52]	@ (8003868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003832:	490e      	ldr	r1, [pc, #56]	@ (800386c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003834:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003838:	e002      	b.n	8003840 <LoopCopyDataInit>

0800383a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800383c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800383e:	3304      	adds	r3, #4

08003840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003844:	d3f9      	bcc.n	800383a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003846:	4a0b      	ldr	r2, [pc, #44]	@ (8003874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003848:	4c0b      	ldr	r4, [pc, #44]	@ (8003878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800384a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800384c:	e001      	b.n	8003852 <LoopFillZerobss>

0800384e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800384e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003850:	3204      	adds	r2, #4

08003852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003854:	d3fb      	bcc.n	800384e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003856:	f7ff ffd7 	bl	8003808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800385a:	f003 fdc9 	bl	80073f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800385e:	f7ff fae9 	bl	8002e34 <main>
  bx  lr    
 8003862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003864:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800386c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003870:	08008b4c 	.word	0x08008b4c
  ldr r2, =_sbss
 8003874:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003878:	20000710 	.word	0x20000710

0800387c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800387c:	e7fe      	b.n	800387c <ADC_IRQHandler>

0800387e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003882:	2003      	movs	r0, #3
 8003884:	f000 f94c 	bl	8003b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003888:	2000      	movs	r0, #0
 800388a:	f000 f805 	bl	8003898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800388e:	f7ff fe0b 	bl	80034a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_InitTick+0x54>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_InitTick+0x58>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	4619      	mov	r1, r3
 80038aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f967 	bl	8003b8a <HAL_SYSTICK_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00e      	b.n	80038e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d80a      	bhi.n	80038e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038cc:	2200      	movs	r2, #0
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f000 f92f 	bl	8003b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038d8:	4a06      	ldr	r2, [pc, #24]	@ (80038f4 <HAL_InitTick+0x5c>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000008c 	.word	0x2000008c
 80038f0:	20000094 	.word	0x20000094
 80038f4:	20000090 	.word	0x20000090

080038f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_IncTick+0x20>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <HAL_IncTick+0x24>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4413      	add	r3, r2
 8003908:	4a04      	ldr	r2, [pc, #16]	@ (800391c <HAL_IncTick+0x24>)
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000094 	.word	0x20000094
 800391c:	2000070c 	.word	0x2000070c

08003920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return uwTick;
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <HAL_GetTick+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	2000070c 	.word	0x2000070c

08003938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff ffee 	bl	8003920 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d005      	beq.n	800395e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003952:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <HAL_Delay+0x44>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800395e:	bf00      	nop
 8003960:	f7ff ffde 	bl	8003920 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	429a      	cmp	r2, r3
 800396e:	d8f7      	bhi.n	8003960 <HAL_Delay+0x28>
  {
  }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000094 	.word	0x20000094

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <__NVIC_SetPriorityGrouping+0x40>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039a8:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ae:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <__NVIC_SetPriorityGrouping+0x40>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	60d3      	str	r3, [r2, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00
 80039c4:	05fa0000 	.word	0x05fa0000

080039c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0b      	blt.n	8003a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <__NVIC_EnableIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	@ (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	@ (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	@ 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	@ 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aec:	d301      	bcc.n	8003af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00f      	b.n	8003b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <SysTick_Config+0x40>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afa:	210f      	movs	r1, #15
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f7ff ff8e 	bl	8003a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <SysTick_Config+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <SysTick_Config+0x40>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff29 	bl	8003980 <__NVIC_SetPriorityGrouping>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b48:	f7ff ff3e 	bl	80039c8 <__NVIC_GetPriorityGrouping>
 8003b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6978      	ldr	r0, [r7, #20]
 8003b54:	f7ff ff8e 	bl	8003a74 <NVIC_EncodePriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5d 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff31 	bl	80039e4 <__NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ffa2 	bl	8003adc <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff feb6 	bl	8003920 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d008      	beq.n	8003bd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2280      	movs	r2, #128	@ 0x80
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e052      	b.n	8003c7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0216 	bic.w	r2, r2, #22
 8003be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_DMA_Abort+0x62>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0208 	bic.w	r2, r2, #8
 8003c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c24:	e013      	b.n	8003c4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c26:	f7ff fe7b 	bl	8003920 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d90c      	bls.n	8003c4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e015      	b.n	8003c7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e4      	bne.n	8003c26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	223f      	movs	r2, #63	@ 0x3f
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d004      	beq.n	8003ca0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2280      	movs	r2, #128	@ 0x80
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e00c      	b.n	8003cba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	@ 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e175      	b.n	8003fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 8164 	bne.w	8003fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_GPIO_Init+0x56>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80be 	beq.w	8003fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	4a65      	ldr	r2, [pc, #404]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5e:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e6a:	4a61      	ldr	r2, [pc, #388]	@ (8003ff0 <HAL_GPIO_Init+0x328>)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	3302      	adds	r3, #2
 8003e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	220f      	movs	r2, #15
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a58      	ldr	r2, [pc, #352]	@ (8003ff4 <HAL_GPIO_Init+0x32c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d037      	beq.n	8003f06 <HAL_GPIO_Init+0x23e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a57      	ldr	r2, [pc, #348]	@ (8003ff8 <HAL_GPIO_Init+0x330>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d031      	beq.n	8003f02 <HAL_GPIO_Init+0x23a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a56      	ldr	r2, [pc, #344]	@ (8003ffc <HAL_GPIO_Init+0x334>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02b      	beq.n	8003efe <HAL_GPIO_Init+0x236>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a55      	ldr	r2, [pc, #340]	@ (8004000 <HAL_GPIO_Init+0x338>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d025      	beq.n	8003efa <HAL_GPIO_Init+0x232>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a54      	ldr	r2, [pc, #336]	@ (8004004 <HAL_GPIO_Init+0x33c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_GPIO_Init+0x22e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a53      	ldr	r2, [pc, #332]	@ (8004008 <HAL_GPIO_Init+0x340>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d019      	beq.n	8003ef2 <HAL_GPIO_Init+0x22a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	@ (800400c <HAL_GPIO_Init+0x344>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_GPIO_Init+0x226>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a51      	ldr	r2, [pc, #324]	@ (8004010 <HAL_GPIO_Init+0x348>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00d      	beq.n	8003eea <HAL_GPIO_Init+0x222>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a50      	ldr	r2, [pc, #320]	@ (8004014 <HAL_GPIO_Init+0x34c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <HAL_GPIO_Init+0x21e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8004018 <HAL_GPIO_Init+0x350>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_GPIO_Init+0x21a>
 8003ede:	2309      	movs	r3, #9
 8003ee0:	e012      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	e010      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	e00e      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003eea:	2307      	movs	r3, #7
 8003eec:	e00c      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003eee:	2306      	movs	r3, #6
 8003ef0:	e00a      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003ef2:	2305      	movs	r3, #5
 8003ef4:	e008      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	e006      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003efa:	2303      	movs	r3, #3
 8003efc:	e004      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e002      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_GPIO_Init+0x240>
 8003f06:	2300      	movs	r3, #0
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	f002 0203 	and.w	r2, r2, #3
 8003f0e:	0092      	lsls	r2, r2, #2
 8003f10:	4093      	lsls	r3, r2
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f18:	4935      	ldr	r1, [pc, #212]	@ (8003ff0 <HAL_GPIO_Init+0x328>)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f26:	4b3d      	ldr	r3, [pc, #244]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f4a:	4a34      	ldr	r2, [pc, #208]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f50:	4b32      	ldr	r3, [pc, #200]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f74:	4a29      	ldr	r2, [pc, #164]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f7a:	4b28      	ldr	r3, [pc, #160]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc8:	4a14      	ldr	r2, [pc, #80]	@ (800401c <HAL_GPIO_Init+0x354>)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b0f      	cmp	r3, #15
 8003fd8:	f67f ae86 	bls.w	8003ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	3724      	adds	r7, #36	@ 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40013800 	.word	0x40013800
 8003ff4:	40020000 	.word	0x40020000
 8003ff8:	40020400 	.word	0x40020400
 8003ffc:	40020800 	.word	0x40020800
 8004000:	40020c00 	.word	0x40020c00
 8004004:	40021000 	.word	0x40021000
 8004008:	40021400 	.word	0x40021400
 800400c:	40021800 	.word	0x40021800
 8004010:	40021c00 	.word	0x40021c00
 8004014:	40022000 	.word	0x40022000
 8004018:	40022400 	.word	0x40022400
 800401c:	40013c00 	.word	0x40013c00

08004020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	887b      	ldrh	r3, [r7, #2]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e001      	b.n	8004042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800406c:	e003      	b.n	8004076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800406e:	887b      	ldrh	r3, [r7, #2]
 8004070:	041a      	lsls	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	619a      	str	r2, [r3, #24]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004094:	887a      	ldrh	r2, [r7, #2]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4013      	ands	r3, r2
 800409a:	041a      	lsls	r2, r3, #16
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43d9      	mvns	r1, r3
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	400b      	ands	r3, r1
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	619a      	str	r2, [r3, #24]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e29b      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8087 	beq.w	800420a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040fc:	4b96      	ldr	r3, [pc, #600]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b04      	cmp	r3, #4
 8004106:	d00c      	beq.n	8004122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004108:	4b93      	ldr	r3, [pc, #588]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d112      	bne.n	800413a <HAL_RCC_OscConfig+0x62>
 8004114:	4b90      	ldr	r3, [pc, #576]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004120:	d10b      	bne.n	800413a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004122:	4b8d      	ldr	r3, [pc, #564]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d06c      	beq.n	8004208 <HAL_RCC_OscConfig+0x130>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d168      	bne.n	8004208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e275      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x7a>
 8004144:	4b84      	ldr	r3, [pc, #528]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a83      	ldr	r2, [pc, #524]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e02e      	b.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x9c>
 800415a:	4b7f      	ldr	r3, [pc, #508]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a7e      	ldr	r2, [pc, #504]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b7c      	ldr	r3, [pc, #496]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7b      	ldr	r2, [pc, #492]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800416c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0xc0>
 800417e:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a72      	ldr	r2, [pc, #456]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 8004198:	4b6f      	ldr	r3, [pc, #444]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6e      	ldr	r2, [pc, #440]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7ff fbb2 	bl	8003920 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7ff fbae 	bl	8003920 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e229      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xe8>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7ff fb9e 	bl	8003920 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e8:	f7ff fb9a 	bl	8003920 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	@ 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e215      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	4b57      	ldr	r3, [pc, #348]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x110>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d069      	beq.n	80042ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004216:	4b50      	ldr	r3, [pc, #320]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x190>
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x17a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e1e9      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	493d      	ldr	r1, [pc, #244]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	e040      	b.n	80042ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d023      	beq.n	80042b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a38      	ldr	r2, [pc, #224]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7ff fb50 	bl	8003920 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004284:	f7ff fb4c 	bl	8003920 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1c7      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004296:	4b30      	ldr	r3, [pc, #192]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4929      	ldr	r1, [pc, #164]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
 80042b6:	e018      	b.n	80042ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b8:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7ff fb2c 	bl	8003920 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042cc:	f7ff fb28 	bl	8003920 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e1a3      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d038      	beq.n	8004368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d019      	beq.n	8004332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004302:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7ff fb09 	bl	8003920 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004312:	f7ff fb05 	bl	8003920 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e180      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x23a>
 8004330:	e01a      	b.n	8004368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004336:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <HAL_RCC_OscConfig+0x280>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7ff faef 	bl	8003920 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00a      	b.n	800435c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004346:	f7ff faeb 	bl	8003920 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d903      	bls.n	800435c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e166      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
 8004358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800435c:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800435e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ee      	bne.n	8004346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a4 	beq.w	80044be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004376:	4b8c      	ldr	r3, [pc, #560]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004382:	4b89      	ldr	r3, [pc, #548]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	4a88      	ldr	r2, [pc, #544]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	@ 0x40
 800438e:	4b86      	ldr	r3, [pc, #536]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439e:	4b83      	ldr	r3, [pc, #524]	@ (80045ac <HAL_RCC_OscConfig+0x4d4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043aa:	4b80      	ldr	r3, [pc, #512]	@ (80045ac <HAL_RCC_OscConfig+0x4d4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7f      	ldr	r2, [pc, #508]	@ (80045ac <HAL_RCC_OscConfig+0x4d4>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7ff fab3 	bl	8003920 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7ff faaf 	bl	8003920 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b64      	cmp	r3, #100	@ 0x64
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e12a      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d0:	4b76      	ldr	r3, [pc, #472]	@ (80045ac <HAL_RCC_OscConfig+0x4d4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x31a>
 80043e4:	4b70      	ldr	r3, [pc, #448]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a6f      	ldr	r2, [pc, #444]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	e02d      	b.n	800444e <HAL_RCC_OscConfig+0x376>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x33c>
 80043fa:	4b6b      	ldr	r3, [pc, #428]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a6a      	ldr	r2, [pc, #424]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
 8004406:	4b68      	ldr	r3, [pc, #416]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a67      	ldr	r2, [pc, #412]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	e01c      	b.n	800444e <HAL_RCC_OscConfig+0x376>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b05      	cmp	r3, #5
 800441a:	d10c      	bne.n	8004436 <HAL_RCC_OscConfig+0x35e>
 800441c:	4b62      	ldr	r3, [pc, #392]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	4a61      	ldr	r2, [pc, #388]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004422:	f043 0304 	orr.w	r3, r3, #4
 8004426:	6713      	str	r3, [r2, #112]	@ 0x70
 8004428:	4b5f      	ldr	r3, [pc, #380]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4a5e      	ldr	r2, [pc, #376]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	@ 0x70
 8004434:	e00b      	b.n	800444e <HAL_RCC_OscConfig+0x376>
 8004436:	4b5c      	ldr	r3, [pc, #368]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443a:	4a5b      	ldr	r2, [pc, #364]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	6713      	str	r3, [r2, #112]	@ 0x70
 8004442:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	4a58      	ldr	r2, [pc, #352]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d015      	beq.n	8004482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7ff fa63 	bl	8003920 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7ff fa5f 	bl	8003920 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0d8      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ee      	beq.n	800445e <HAL_RCC_OscConfig+0x386>
 8004480:	e014      	b.n	80044ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7ff fa4d 	bl	8003920 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7ff fa49 	bl	8003920 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0c2      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ee      	bne.n	800448a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b2:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	4a3c      	ldr	r2, [pc, #240]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80044b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80ae 	beq.w	8004624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c8:	4b37      	ldr	r3, [pc, #220]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d06d      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d14b      	bne.n	8004574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a31      	ldr	r2, [pc, #196]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7ff fa1a 	bl	8003920 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7ff fa16 	bl	8003920 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e091      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	3b01      	subs	r3, #1
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	071b      	lsls	r3, r3, #28
 800453a:	491b      	ldr	r1, [pc, #108]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7ff f9e8 	bl	8003920 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7ff f9e4 	bl	8003920 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e05f      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x47c>
 8004572:	e057      	b.n	8004624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004574:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0b      	ldr	r2, [pc, #44]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800457e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7ff f9ce 	bl	8003920 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7ff f9ca 	bl	8003920 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e045      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_RCC_OscConfig+0x4d0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x4b0>
 80045a6:	e03d      	b.n	8004624 <HAL_RCC_OscConfig+0x54c>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004630 <HAL_RCC_OscConfig+0x558>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d030      	beq.n	8004620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d129      	bne.n	8004620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d122      	bne.n	8004620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d119      	bne.n	8004620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d10f      	bne.n	8004620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d107      	bne.n	8004620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800

08004634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0d0      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d910      	bls.n	800467c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b67      	ldr	r3, [pc, #412]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 020f 	bic.w	r2, r3, #15
 8004662:	4965      	ldr	r1, [pc, #404]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b63      	ldr	r3, [pc, #396]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0b8      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004694:	4b59      	ldr	r3, [pc, #356]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a58      	ldr	r2, [pc, #352]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800469e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046ac:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a52      	ldr	r2, [pc, #328]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b8:	4b50      	ldr	r3, [pc, #320]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	494d      	ldr	r1, [pc, #308]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d040      	beq.n	8004758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	4b47      	ldr	r3, [pc, #284]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d115      	bne.n	8004716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e07f      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	4b41      	ldr	r3, [pc, #260]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e073      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004706:	4b3d      	ldr	r3, [pc, #244]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06b      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004716:	4b39      	ldr	r3, [pc, #228]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4936      	ldr	r1, [pc, #216]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004728:	f7ff f8fa 	bl	8003920 <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	e00a      	b.n	8004746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004730:	f7ff f8f6 	bl	8003920 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e053      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004746:	4b2d      	ldr	r3, [pc, #180]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 020c 	and.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	429a      	cmp	r2, r3
 8004756:	d1eb      	bne.n	8004730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004758:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d210      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 020f 	bic.w	r2, r3, #15
 800476e:	4922      	ldr	r1, [pc, #136]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b20      	ldr	r3, [pc, #128]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e032      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004794:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4916      	ldr	r1, [pc, #88]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047b2:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	490e      	ldr	r1, [pc, #56]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047c6:	f000 f821 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047ca:	4602      	mov	r2, r0
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	490a      	ldr	r1, [pc, #40]	@ (8004800 <HAL_RCC_ClockConfig+0x1cc>)
 80047d8:	5ccb      	ldrb	r3, [r1, r3]
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <HAL_RCC_ClockConfig+0x1d0>)
 80047e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047e2:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <HAL_RCC_ClockConfig+0x1d4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff f856 	bl	8003898 <HAL_InitTick>

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023c00 	.word	0x40023c00
 80047fc:	40023800 	.word	0x40023800
 8004800:	08008b24 	.word	0x08008b24
 8004804:	2000008c 	.word	0x2000008c
 8004808:	20000090 	.word	0x20000090

0800480c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004810:	b094      	sub	sp, #80	@ 0x50
 8004812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	647b      	str	r3, [r7, #68]	@ 0x44
 8004818:	2300      	movs	r3, #0
 800481a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800481c:	2300      	movs	r3, #0
 800481e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004824:	4b79      	ldr	r3, [pc, #484]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	d00d      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x40>
 8004830:	2b08      	cmp	r3, #8
 8004832:	f200 80e1 	bhi.w	80049f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x34>
 800483a:	2b04      	cmp	r3, #4
 800483c:	d003      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x3a>
 800483e:	e0db      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004840:	4b73      	ldr	r3, [pc, #460]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004844:	e0db      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004846:	4b73      	ldr	r3, [pc, #460]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800484a:	e0d8      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800484c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004854:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004856:	4b6d      	ldr	r3, [pc, #436]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d063      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004862:	4b6a      	ldr	r3, [pc, #424]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	2200      	movs	r2, #0
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800486c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	633b      	str	r3, [r7, #48]	@ 0x30
 8004876:	2300      	movs	r3, #0
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
 800487a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800487e:	4622      	mov	r2, r4
 8004880:	462b      	mov	r3, r5
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	0159      	lsls	r1, r3, #5
 800488c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004890:	0150      	lsls	r0, r2, #5
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4621      	mov	r1, r4
 8004898:	1a51      	subs	r1, r2, r1
 800489a:	6139      	str	r1, [r7, #16]
 800489c:	4629      	mov	r1, r5
 800489e:	eb63 0301 	sbc.w	r3, r3, r1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b0:	4659      	mov	r1, fp
 80048b2:	018b      	lsls	r3, r1, #6
 80048b4:	4651      	mov	r1, sl
 80048b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ba:	4651      	mov	r1, sl
 80048bc:	018a      	lsls	r2, r1, #6
 80048be:	4651      	mov	r1, sl
 80048c0:	ebb2 0801 	subs.w	r8, r2, r1
 80048c4:	4659      	mov	r1, fp
 80048c6:	eb63 0901 	sbc.w	r9, r3, r1
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048de:	4690      	mov	r8, r2
 80048e0:	4699      	mov	r9, r3
 80048e2:	4623      	mov	r3, r4
 80048e4:	eb18 0303 	adds.w	r3, r8, r3
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	462b      	mov	r3, r5
 80048ec:	eb49 0303 	adc.w	r3, r9, r3
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048fe:	4629      	mov	r1, r5
 8004900:	024b      	lsls	r3, r1, #9
 8004902:	4621      	mov	r1, r4
 8004904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004908:	4621      	mov	r1, r4
 800490a:	024a      	lsls	r2, r1, #9
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004912:	2200      	movs	r2, #0
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800491c:	f7fb fc8c 	bl	8000238 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004928:	e058      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b38      	ldr	r3, [pc, #224]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	2200      	movs	r2, #0
 8004932:	4618      	mov	r0, r3
 8004934:	4611      	mov	r1, r2
 8004936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	f04f 0000 	mov.w	r0, #0
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	0159      	lsls	r1, r3, #5
 8004952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004956:	0150      	lsls	r0, r2, #5
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4641      	mov	r1, r8
 800495e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004962:	4649      	mov	r1, r9
 8004964:	eb63 0b01 	sbc.w	fp, r3, r1
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800497c:	ebb2 040a 	subs.w	r4, r2, sl
 8004980:	eb63 050b 	sbc.w	r5, r3, fp
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	464b      	mov	r3, r9
 80049a0:	eb45 0303 	adc.w	r3, r5, r3
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049b2:	4629      	mov	r1, r5
 80049b4:	028b      	lsls	r3, r1, #10
 80049b6:	4621      	mov	r1, r4
 80049b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049bc:	4621      	mov	r1, r4
 80049be:	028a      	lsls	r2, r1, #10
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c6:	2200      	movs	r2, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	61fa      	str	r2, [r7, #28]
 80049cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d0:	f7fb fc32 	bl	8000238 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049f6:	e002      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80049fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3750      	adds	r7, #80	@ 0x50
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	00f42400 	.word	0x00f42400
 8004a14:	007a1200 	.word	0x007a1200

08004a18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a1c:	4b03      	ldr	r3, [pc, #12]	@ (8004a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	2000008c 	.word	0x2000008c

08004a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a34:	f7ff fff0 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0a9b      	lsrs	r3, r3, #10
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	@ (8004a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	08008b34 	.word	0x08008b34

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a5c:	f7ff ffdc 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	0b5b      	lsrs	r3, r3, #13
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4903      	ldr	r1, [pc, #12]	@ (8004a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	08008b34 	.word	0x08008b34

08004a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004aa8:	4b69      	ldr	r3, [pc, #420]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a68      	ldr	r2, [pc, #416]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ab2:	6093      	str	r3, [r2, #8]
 8004ab4:	4b66      	ldr	r3, [pc, #408]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abc:	4964      	ldr	r1, [pc, #400]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d017      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ada:	4b5d      	ldr	r3, [pc, #372]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	4959      	ldr	r1, [pc, #356]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b16:	4b4e      	ldr	r3, [pc, #312]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	494a      	ldr	r1, [pc, #296]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 808b 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b3a      	ldr	r3, [pc, #232]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	4a39      	ldr	r2, [pc, #228]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b70:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fe feca 	bl	8003920 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b90:	f7fe fec6 	bl	8003920 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	@ 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e38f      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bae:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d035      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d02e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bcc:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004be2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bee:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bf4:	4b16      	ldr	r3, [pc, #88]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d114      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fe fe8e 	bl	8003920 <HAL_GetTick>
 8004c04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fe fe8a 	bl	8003920 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e351      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ee      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c36:	d111      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c44:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	4901      	ldr	r1, [pc, #4]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40007000 	.word	0x40007000
 8004c58:	0ffffcff 	.word	0x0ffffcff
 8004c5c:	4bac      	ldr	r3, [pc, #688]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4aab      	ldr	r2, [pc, #684]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c66:	6093      	str	r3, [r2, #8]
 8004c68:	4ba9      	ldr	r3, [pc, #676]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c74:	49a6      	ldr	r1, [pc, #664]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d010      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c86:	4ba2      	ldr	r3, [pc, #648]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8c:	4aa0      	ldr	r2, [pc, #640]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c96:	4b9e      	ldr	r3, [pc, #632]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	499b      	ldr	r1, [pc, #620]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cb4:	4b96      	ldr	r3, [pc, #600]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc2:	4993      	ldr	r1, [pc, #588]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce4:	498a      	ldr	r1, [pc, #552]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cf8:	4b85      	ldr	r3, [pc, #532]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d06:	4982      	ldr	r1, [pc, #520]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4979      	ldr	r1, [pc, #484]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d3c:	4b74      	ldr	r3, [pc, #464]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	4971      	ldr	r1, [pc, #452]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d64:	f023 020c 	bic.w	r2, r3, #12
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6c:	4968      	ldr	r1, [pc, #416]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d80:	4b63      	ldr	r3, [pc, #396]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8e:	4960      	ldr	r1, [pc, #384]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db0:	4957      	ldr	r1, [pc, #348]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dc4:	4b52      	ldr	r3, [pc, #328]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	494f      	ldr	r1, [pc, #316]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004de6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	4946      	ldr	r1, [pc, #280]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e08:	4b41      	ldr	r3, [pc, #260]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e16:	493e      	ldr	r1, [pc, #248]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e2a:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e38:	4935      	ldr	r1, [pc, #212]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e4c:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e5a:	492d      	ldr	r1, [pc, #180]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d011      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e6e:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e7c:	4924      	ldr	r1, [pc, #144]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eae:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebc:	4914      	ldr	r1, [pc, #80]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee0:	490b      	ldr	r1, [pc, #44]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00f      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ef4:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	4902      	ldr	r1, [pc, #8]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f20:	4b8a      	ldr	r3, [pc, #552]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	4986      	ldr	r1, [pc, #536]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f44:	4b81      	ldr	r3, [pc, #516]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f54:	497d      	ldr	r1, [pc, #500]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d006      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80d6 	beq.w	800511c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f70:	4b76      	ldr	r3, [pc, #472]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a75      	ldr	r2, [pc, #468]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fe fcd0 	bl	8003920 <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f84:	f7fe fccc 	bl	8003920 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e195      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f96:	4b6d      	ldr	r3, [pc, #436]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d021      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11d      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fb6:	4b65      	ldr	r3, [pc, #404]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fc4:	4b61      	ldr	r3, [pc, #388]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fca:	0e1b      	lsrs	r3, r3, #24
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	019a      	lsls	r2, r3, #6
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	071b      	lsls	r3, r3, #28
 8004fea:	4958      	ldr	r1, [pc, #352]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501c:	d129      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800501e:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800502c:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005032:	0f1b      	lsrs	r3, r3, #28
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	019a      	lsls	r2, r3, #6
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	493e      	ldr	r1, [pc, #248]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800505a:	4b3c      	ldr	r3, [pc, #240]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005060:	f023 021f 	bic.w	r2, r3, #31
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	3b01      	subs	r3, #1
 800506a:	4938      	ldr	r1, [pc, #224]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01d      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800507e:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800508c:	4b2f      	ldr	r3, [pc, #188]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005092:	0f1b      	lsrs	r3, r3, #28
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	019a      	lsls	r2, r3, #6
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	431a      	orrs	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	431a      	orrs	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	071b      	lsls	r3, r3, #28
 80050b2:	4926      	ldr	r1, [pc, #152]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d011      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	491a      	ldr	r1, [pc, #104]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050ea:	4b18      	ldr	r3, [pc, #96]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fe fc13 	bl	8003920 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050fe:	f7fe fc0f 	bl	8003920 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b64      	cmp	r3, #100	@ 0x64
 800510a:	d901      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e0d8      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005110:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b01      	cmp	r3, #1
 8005120:	f040 80ce 	bne.w	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005124:	4b09      	ldr	r3, [pc, #36]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a08      	ldr	r2, [pc, #32]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fe fbf6 	bl	8003920 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005136:	e00b      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005138:	f7fe fbf2 	bl	8003920 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d904      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0bb      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005150:	4b5e      	ldr	r3, [pc, #376]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800515c:	d0ec      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02e      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d12a      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005186:	4b51      	ldr	r3, [pc, #324]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005194:	4b4d      	ldr	r3, [pc, #308]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	0f1b      	lsrs	r3, r3, #28
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	071b      	lsls	r3, r3, #28
 80051ba:	4944      	ldr	r1, [pc, #272]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051c2:	4b42      	ldr	r3, [pc, #264]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	3b01      	subs	r3, #1
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	493d      	ldr	r1, [pc, #244]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d022      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f0:	d11d      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051f2:	4b36      	ldr	r3, [pc, #216]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	0e1b      	lsrs	r3, r3, #24
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005200:	4b32      	ldr	r3, [pc, #200]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	0f1b      	lsrs	r3, r3, #28
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	019a      	lsls	r2, r3, #6
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	431a      	orrs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	4929      	ldr	r1, [pc, #164]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d028      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	0e1b      	lsrs	r3, r3, #24
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005248:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	019a      	lsls	r2, r3, #6
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	431a      	orrs	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	4917      	ldr	r1, [pc, #92]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005276:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800527c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	4911      	ldr	r1, [pc, #68]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800528c:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0e      	ldr	r2, [pc, #56]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005298:	f7fe fb42 	bl	8003920 <HAL_GetTick>
 800529c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052a0:	f7fe fb3e 	bl	8003920 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	@ 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e007      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b2:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052be:	d1ef      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800

080052d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e09d      	b.n	800541e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052f2:	d009      	beq.n	8005308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	61da      	str	r2, [r3, #28]
 80052fa:	e005      	b.n	8005308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fe f8e4 	bl	80034f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800533e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005348:	d902      	bls.n	8005350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e002      	b.n	8005356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800535e:	d007      	beq.n	8005370 <HAL_SPI_Init+0xa0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005368:	d002      	beq.n	8005370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b2:	ea42 0103 	orr.w	r1, r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	f003 0204 	and.w	r2, r3, #4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053ec:	ea42 0103 	orr.w	r1, r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800540c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b088      	sub	sp, #32
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_SPI_Transmit+0x22>
 8005444:	2302      	movs	r3, #2
 8005446:	e158      	b.n	80056fa <HAL_SPI_Transmit+0x2d4>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005450:	f7fe fa66 	bl	8003920 <HAL_GetTick>
 8005454:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d002      	beq.n	800546c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005466:	2302      	movs	r3, #2
 8005468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800546a:	e13d      	b.n	80056e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_SPI_Transmit+0x52>
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800547c:	e134      	b.n	80056e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2203      	movs	r2, #3
 8005482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	88fa      	ldrh	r2, [r7, #6]
 8005496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c8:	d10f      	bne.n	80054ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f4:	2b40      	cmp	r3, #64	@ 0x40
 80054f6:	d007      	beq.n	8005508 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005510:	d94b      	bls.n	80055aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Transmit+0xfa>
 800551a:	8afb      	ldrh	r3, [r7, #22]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d13e      	bne.n	800559e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005544:	e02b      	b.n	800559e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d112      	bne.n	800557a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	881a      	ldrh	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	1c9a      	adds	r2, r3, #2
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005578:	e011      	b.n	800559e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557a:	f7fe f9d1 	bl	8003920 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d803      	bhi.n	8005592 <HAL_SPI_Transmit+0x16c>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d102      	bne.n	8005598 <HAL_SPI_Transmit+0x172>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800559c:	e0a4      	b.n	80056e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1ce      	bne.n	8005546 <HAL_SPI_Transmit+0x120>
 80055a8:	e07c      	b.n	80056a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0x192>
 80055b2:	8afb      	ldrh	r3, [r7, #22]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d170      	bne.n	800569a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d912      	bls.n	80055e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c6:	881a      	ldrh	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b02      	subs	r3, #2
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055e6:	e058      	b.n	800569a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800560e:	e044      	b.n	800569a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d12b      	bne.n	8005676 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d912      	bls.n	800564e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	1c9a      	adds	r2, r3, #2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b02      	subs	r3, #2
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800564c:	e025      	b.n	800569a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005674:	e011      	b.n	800569a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005676:	f7fe f953 	bl	8003920 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d803      	bhi.n	800568e <HAL_SPI_Transmit+0x268>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d102      	bne.n	8005694 <HAL_SPI_Transmit+0x26e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005698:	e026      	b.n	80056e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1b5      	bne.n	8005610 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f949 	bl	8005940 <SPI_EndRxTxTransaction>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e000      	b.n	80056e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80056e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005714:	f7fe f904 	bl	8003920 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	4413      	add	r3, r2
 8005722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005724:	f7fe f8fc 	bl	8003920 <HAL_GetTick>
 8005728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800572a:	4b39      	ldr	r3, [pc, #228]	@ (8005810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	015b      	lsls	r3, r3, #5
 8005730:	0d1b      	lsrs	r3, r3, #20
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	fb02 f303 	mul.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800573a:	e054      	b.n	80057e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d050      	beq.n	80057e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005744:	f7fe f8ec 	bl	8003920 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	429a      	cmp	r2, r3
 8005752:	d902      	bls.n	800575a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d13d      	bne.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005772:	d111      	bne.n	8005798 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800577c:	d004      	beq.n	8005788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005786:	d107      	bne.n	8005798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a0:	d10f      	bne.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e017      	b.n	8005806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	429a      	cmp	r2, r3
 8005802:	d19b      	bne.n	800573c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	2000008c 	.word	0x2000008c

08005814 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	@ 0x28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005826:	f7fe f87b 	bl	8003920 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	4413      	add	r3, r2
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005836:	f7fe f873 	bl	8003920 <HAL_GetTick>
 800583a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005844:	4b3d      	ldr	r3, [pc, #244]	@ (800593c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	00da      	lsls	r2, r3, #3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	0d1b      	lsrs	r3, r3, #20
 8005854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800585c:	e060      	b.n	8005920 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005864:	d107      	bne.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005874:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d050      	beq.n	8005920 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800587e:	f7fe f84f 	bl	8003920 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800588a:	429a      	cmp	r2, r3
 800588c:	d902      	bls.n	8005894 <SPI_WaitFifoStateUntilTimeout+0x80>
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d13d      	bne.n	8005910 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ac:	d111      	bne.n	80058d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b6:	d004      	beq.n	80058c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c0:	d107      	bne.n	80058d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058da:	d10f      	bne.n	80058fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e010      	b.n	8005932 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	3b01      	subs	r3, #1
 800591e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d196      	bne.n	800585e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3728      	adds	r7, #40	@ 0x28
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	2000008c 	.word	0x2000008c

08005940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2200      	movs	r2, #0
 8005954:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff ff5b 	bl	8005814 <SPI_WaitFifoStateUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e046      	b.n	8005a02 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005974:	4b25      	ldr	r3, [pc, #148]	@ (8005a0c <SPI_EndRxTxTransaction+0xcc>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a25      	ldr	r2, [pc, #148]	@ (8005a10 <SPI_EndRxTxTransaction+0xd0>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	0d5b      	lsrs	r3, r3, #21
 8005980:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005984:	fb02 f303 	mul.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005992:	d112      	bne.n	80059ba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	2180      	movs	r1, #128	@ 0x80
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff feb0 	bl	8005704 <SPI_WaitFlagStateUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d016      	beq.n	80059d8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e023      	b.n	8005a02 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d0:	2b80      	cmp	r3, #128	@ 0x80
 80059d2:	d0f2      	beq.n	80059ba <SPI_EndRxTxTransaction+0x7a>
 80059d4:	e000      	b.n	80059d8 <SPI_EndRxTxTransaction+0x98>
        break;
 80059d6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ff15 	bl	8005814 <SPI_WaitFifoStateUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e000      	b.n	8005a02 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	2000008c 	.word	0x2000008c
 8005a10:	165e9f81 	.word	0x165e9f81

08005a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e049      	b.n	8005aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fd fdba 	bl	80035b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f000 fac0 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d001      	beq.n	8005adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e054      	b.n	8005b86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a26      	ldr	r2, [pc, #152]	@ (8005b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d022      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b06:	d01d      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a22      	ldr	r2, [pc, #136]	@ (8005b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d018      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d013      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00e      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <HAL_TIM_Base_Start_IT+0xe8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d115      	bne.n	8005b70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	4b19      	ldr	r3, [pc, #100]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xec>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b06      	cmp	r3, #6
 8005b54:	d015      	beq.n	8005b82 <HAL_TIM_Base_Start_IT+0xbe>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5c:	d011      	beq.n	8005b82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	e008      	b.n	8005b82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40010400 	.word	0x40010400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40001800 	.word	0x40001800
 8005bb0:	00010007 	.word	0x00010007

08005bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d122      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d11b      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0202 	mvn.w	r2, #2
 8005be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9d0 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f9c2 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f9d3 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d122      	bne.n	8005c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d11b      	bne.n	8005c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0204 	mvn.w	r2, #4
 8005c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9a6 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f998 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f9a9 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d122      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d11b      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0208 	mvn.w	r2, #8
 8005c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f97c 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005ca4:	e005      	b.n	8005cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f96e 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f97f 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d122      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d11b      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0210 	mvn.w	r2, #16
 8005cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f952 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005cf8:	e005      	b.n	8005d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f944 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f955 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10e      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d107      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0201 	mvn.w	r2, #1
 8005d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fd fb80 	bl	8003438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d42:	2b80      	cmp	r3, #128	@ 0x80
 8005d44:	d10e      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d50:	2b80      	cmp	r3, #128	@ 0x80
 8005d52:	d107      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fb0c 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d72:	d10e      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7e:	2b80      	cmp	r3, #128	@ 0x80
 8005d80:	d107      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 faff 	bl	8006390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	d10e      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005daa:	2b40      	cmp	r3, #64	@ 0x40
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f903 	bl	8005fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d10e      	bne.n	8005dea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0220 	mvn.w	r2, #32
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fabf 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIM_ConfigClockSource+0x1c>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e0b4      	b.n	8005f7a <HAL_TIM_ConfigClockSource+0x186>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	4b56      	ldr	r3, [pc, #344]	@ (8005f84 <HAL_TIM_ConfigClockSource+0x190>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e48:	d03e      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4e:	f200 8087 	bhi.w	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e56:	f000 8086 	beq.w	8005f66 <HAL_TIM_ConfigClockSource+0x172>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5e:	d87f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e60:	2b70      	cmp	r3, #112	@ 0x70
 8005e62:	d01a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xa6>
 8005e64:	2b70      	cmp	r3, #112	@ 0x70
 8005e66:	d87b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e68:	2b60      	cmp	r3, #96	@ 0x60
 8005e6a:	d050      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x11a>
 8005e6c:	2b60      	cmp	r3, #96	@ 0x60
 8005e6e:	d877      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e70:	2b50      	cmp	r3, #80	@ 0x50
 8005e72:	d03c      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0xfa>
 8005e74:	2b50      	cmp	r3, #80	@ 0x50
 8005e76:	d873      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b40      	cmp	r3, #64	@ 0x40
 8005e7a:	d058      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x13a>
 8005e7c:	2b40      	cmp	r3, #64	@ 0x40
 8005e7e:	d86f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b30      	cmp	r3, #48	@ 0x30
 8005e82:	d064      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e84:	2b30      	cmp	r3, #48	@ 0x30
 8005e86:	d86b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d060      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d867      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05c      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d05a      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e98:	e062      	b.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eaa:	f000 f9af 	bl	800620c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	609a      	str	r2, [r3, #8]
      break;
 8005ec6:	e04f      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed8:	f000 f998 	bl	800620c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eea:	609a      	str	r2, [r3, #8]
      break;
 8005eec:	e03c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	461a      	mov	r2, r3
 8005efc:	f000 f90c 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2150      	movs	r1, #80	@ 0x50
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f965 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f0c:	e02c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f000 f92b 	bl	8006176 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2160      	movs	r1, #96	@ 0x60
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f955 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e01c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 f8ec 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2140      	movs	r1, #64	@ 0x40
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f945 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e00c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 f93c 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e003      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	fffeff88 	.word	0xfffeff88

08005f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <TIM_Base_SetConfig+0x114>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff6:	d00f      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80060f0 <TIM_Base_SetConfig+0x118>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3c      	ldr	r2, [pc, #240]	@ (80060f4 <TIM_Base_SetConfig+0x11c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3b      	ldr	r2, [pc, #236]	@ (80060f8 <TIM_Base_SetConfig+0x120>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3a      	ldr	r2, [pc, #232]	@ (80060fc <TIM_Base_SetConfig+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <TIM_Base_SetConfig+0x114>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d027      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <TIM_Base_SetConfig+0x118>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d023      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <TIM_Base_SetConfig+0x11c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01f      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2a      	ldr	r2, [pc, #168]	@ (80060f8 <TIM_Base_SetConfig+0x120>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01b      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a29      	ldr	r2, [pc, #164]	@ (80060fc <TIM_Base_SetConfig+0x124>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d017      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a28      	ldr	r2, [pc, #160]	@ (8006100 <TIM_Base_SetConfig+0x128>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a27      	ldr	r2, [pc, #156]	@ (8006104 <TIM_Base_SetConfig+0x12c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00f      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a26      	ldr	r2, [pc, #152]	@ (8006108 <TIM_Base_SetConfig+0x130>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00b      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a25      	ldr	r2, [pc, #148]	@ (800610c <TIM_Base_SetConfig+0x134>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a24      	ldr	r2, [pc, #144]	@ (8006110 <TIM_Base_SetConfig+0x138>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a23      	ldr	r2, [pc, #140]	@ (8006114 <TIM_Base_SetConfig+0x13c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d108      	bne.n	800609c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0a      	ldr	r2, [pc, #40]	@ (80060ec <TIM_Base_SetConfig+0x114>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_Base_SetConfig+0xf8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0c      	ldr	r2, [pc, #48]	@ (80060fc <TIM_Base_SetConfig+0x124>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d103      	bne.n	80060d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	615a      	str	r2, [r3, #20]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40010400 	.word	0x40010400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800
 800610c:	40001800 	.word	0x40001800
 8006110:	40001c00 	.word	0x40001c00
 8006114:	40002000 	.word	0x40002000

08006118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 030a 	bic.w	r3, r3, #10
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f023 0210 	bic.w	r2, r3, #16
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	031b      	lsls	r3, r3, #12
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f043 0307 	orr.w	r3, r3, #7
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e06d      	b.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a30      	ldr	r2, [pc, #192]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2f      	ldr	r2, [pc, #188]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800629e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a20      	ldr	r2, [pc, #128]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d6:	d01d      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10c      	bne.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e040      	b.n	8006438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fd f91a 	bl	8003600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	@ 0x24
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fb3e 	bl	8006a64 <UART_SetConfig>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e022      	b.n	8006438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd96 	bl	8006f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800640e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800641e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fe1d 	bl	8007070 <UART_CheckIdleState>
 8006436:	4603      	mov	r3, r0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b0ba      	sub	sp, #232	@ 0xe8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800646a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800646e:	4013      	ands	r3, r2
 8006470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d115      	bne.n	80064a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800647c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00f      	beq.n	80064a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 82ac 	beq.w	80069f6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
      }
      return;
 80064a6:	e2a6      	b.n	80069f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8117 	beq.w	80066e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064c2:	4b85      	ldr	r3, [pc, #532]	@ (80066d8 <HAL_UART_IRQHandler+0x298>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 810a 	beq.w	80066e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <HAL_UART_IRQHandler+0xbc>
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2201      	movs	r2, #1
 80064ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d011      	beq.n	800652c <HAL_UART_IRQHandler+0xec>
 8006508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2202      	movs	r2, #2
 800651a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006522:	f043 0204 	orr.w	r2, r3, #4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <HAL_UART_IRQHandler+0x11c>
 8006538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2204      	movs	r2, #4
 800654a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006552:	f043 0202 	orr.w	r2, r3, #2
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d017      	beq.n	8006598 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006578:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2208      	movs	r2, #8
 8006586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800658e:	f043 0208 	orr.w	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d012      	beq.n	80065ca <HAL_UART_IRQHandler+0x18a>
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065c0:	f043 0220 	orr.w	r2, r3, #32
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8212 	beq.w	80069fa <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006612:	2b40      	cmp	r3, #64	@ 0x40
 8006614:	d005      	beq.n	8006622 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800661a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04f      	beq.n	80066c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fe37 	bl	8007296 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	2b40      	cmp	r3, #64	@ 0x40
 8006634:	d141      	bne.n	80066ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800664c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800666e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800667a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1d9      	bne.n	8006636 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006686:	2b00      	cmp	r3, #0
 8006688:	d013      	beq.n	80066b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668e:	4a13      	ldr	r2, [pc, #76]	@ (80066dc <HAL_UART_IRQHandler+0x29c>)
 8006690:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd faf3 	bl	8003c82 <HAL_DMA_Abort_IT>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e00f      	b.n	80066d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9b6 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e00b      	b.n	80066d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9b2 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	e007      	b.n	80066d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9ae 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80066d0:	e193      	b.n	80069fa <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d2:	bf00      	nop
    return;
 80066d4:	e191      	b.n	80069fa <HAL_UART_IRQHandler+0x5ba>
 80066d6:	bf00      	nop
 80066d8:	04000120 	.word	0x04000120
 80066dc:	0800735f 	.word	0x0800735f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	f040 814c 	bne.w	8006982 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8145 	beq.w	8006982 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 813e 	beq.w	8006982 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2210      	movs	r2, #16
 800670c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b40      	cmp	r3, #64	@ 0x40
 800671a:	f040 80b6 	bne.w	800688a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800672a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8165 	beq.w	80069fe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800673a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800673e:	429a      	cmp	r2, r3
 8006740:	f080 815d 	bcs.w	80069fe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800674a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006758:	f000 8086 	beq.w	8006868 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800678a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800679e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1da      	bne.n	800675c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e1      	bne.n	80067a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3308      	adds	r3, #8
 80067e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006808:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800680c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e3      	bne.n	80067e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006838:	f023 0310 	bic.w	r3, r3, #16
 800683c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800684c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006850:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e4      	bne.n	8006828 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006862:	4618      	mov	r0, r3
 8006864:	f7fd f99d 	bl	8003ba2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800687a:	b29b      	uxth	r3, r3
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8d8 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006888:	e0b9      	b.n	80069fe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006896:	b29b      	uxth	r3, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80ab 	beq.w	8006a02 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80068ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80a6 	beq.w	8006a02 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e4      	bne.n	80068b6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	623b      	str	r3, [r7, #32]
   return(result);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006910:	633a      	str	r2, [r7, #48]	@ 0x30
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800691e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e3      	bne.n	80068ec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	60fb      	str	r3, [r7, #12]
   return(result);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 0310 	bic.w	r3, r3, #16
 800694c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	69b9      	ldr	r1, [r7, #24]
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	617b      	str	r3, [r7, #20]
   return(result);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e4      	bne.n	8006938 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2202      	movs	r2, #2
 8006972:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f85c 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006980:	e03f      	b.n	8006a02 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <HAL_UART_IRQHandler+0x56c>
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80069a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f853 	bl	8006a50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069aa:	e02d      	b.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01c      	beq.n	8006a06 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
    }
    return;
 80069d4:	e017      	b.n	8006a06 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d012      	beq.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fccb 	bl	800738a <UART_EndTransmit_IT>
    return;
 80069f4:	e008      	b.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
      return;
 80069f6:	bf00      	nop
 80069f8:	e006      	b.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
    return;
 80069fa:	bf00      	nop
 80069fc:	e004      	b.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
      return;
 80069fe:	bf00      	nop
 8006a00:	e002      	b.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006a06:	bf00      	nop
  }

}
 8006a08:	37e8      	adds	r7, #232	@ 0xe8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop

08006a10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4ba6      	ldr	r3, [pc, #664]	@ (8006d28 <UART_SetConfig+0x2c4>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	6979      	ldr	r1, [r7, #20]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a94      	ldr	r2, [pc, #592]	@ (8006d2c <UART_SetConfig+0x2c8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d120      	bne.n	8006b22 <UART_SetConfig+0xbe>
 8006ae0:	4b93      	ldr	r3, [pc, #588]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d816      	bhi.n	8006b1c <UART_SetConfig+0xb8>
 8006aee:	a201      	add	r2, pc, #4	@ (adr r2, 8006af4 <UART_SetConfig+0x90>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b0b 	.word	0x08006b0b
 8006b00:	08006b17 	.word	0x08006b17
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e150      	b.n	8006dac <UART_SetConfig+0x348>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e14d      	b.n	8006dac <UART_SetConfig+0x348>
 8006b10:	2304      	movs	r3, #4
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e14a      	b.n	8006dac <UART_SetConfig+0x348>
 8006b16:	2308      	movs	r3, #8
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e147      	b.n	8006dac <UART_SetConfig+0x348>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e144      	b.n	8006dac <UART_SetConfig+0x348>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a83      	ldr	r2, [pc, #524]	@ (8006d34 <UART_SetConfig+0x2d0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d132      	bne.n	8006b92 <UART_SetConfig+0x12e>
 8006b2c:	4b80      	ldr	r3, [pc, #512]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	2b0c      	cmp	r3, #12
 8006b38:	d828      	bhi.n	8006b8c <UART_SetConfig+0x128>
 8006b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <UART_SetConfig+0xdc>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006b8d 	.word	0x08006b8d
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006b8d 	.word	0x08006b8d
 8006b50:	08006b81 	.word	0x08006b81
 8006b54:	08006b8d 	.word	0x08006b8d
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006b8d 	.word	0x08006b8d
 8006b60:	08006b7b 	.word	0x08006b7b
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006b8d 	.word	0x08006b8d
 8006b70:	08006b87 	.word	0x08006b87
 8006b74:	2300      	movs	r3, #0
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e118      	b.n	8006dac <UART_SetConfig+0x348>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e115      	b.n	8006dac <UART_SetConfig+0x348>
 8006b80:	2304      	movs	r3, #4
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e112      	b.n	8006dac <UART_SetConfig+0x348>
 8006b86:	2308      	movs	r3, #8
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e10f      	b.n	8006dac <UART_SetConfig+0x348>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e10c      	b.n	8006dac <UART_SetConfig+0x348>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a68      	ldr	r2, [pc, #416]	@ (8006d38 <UART_SetConfig+0x2d4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d120      	bne.n	8006bde <UART_SetConfig+0x17a>
 8006b9c:	4b64      	ldr	r3, [pc, #400]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ba6:	2b30      	cmp	r3, #48	@ 0x30
 8006ba8:	d013      	beq.n	8006bd2 <UART_SetConfig+0x16e>
 8006baa:	2b30      	cmp	r3, #48	@ 0x30
 8006bac:	d814      	bhi.n	8006bd8 <UART_SetConfig+0x174>
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d009      	beq.n	8006bc6 <UART_SetConfig+0x162>
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d810      	bhi.n	8006bd8 <UART_SetConfig+0x174>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <UART_SetConfig+0x15c>
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d006      	beq.n	8006bcc <UART_SetConfig+0x168>
 8006bbe:	e00b      	b.n	8006bd8 <UART_SetConfig+0x174>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e0f2      	b.n	8006dac <UART_SetConfig+0x348>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e0ef      	b.n	8006dac <UART_SetConfig+0x348>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e0ec      	b.n	8006dac <UART_SetConfig+0x348>
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e0e9      	b.n	8006dac <UART_SetConfig+0x348>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e0e6      	b.n	8006dac <UART_SetConfig+0x348>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a56      	ldr	r2, [pc, #344]	@ (8006d3c <UART_SetConfig+0x2d8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d120      	bne.n	8006c2a <UART_SetConfig+0x1c6>
 8006be8:	4b51      	ldr	r3, [pc, #324]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bf4:	d013      	beq.n	8006c1e <UART_SetConfig+0x1ba>
 8006bf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bf8:	d814      	bhi.n	8006c24 <UART_SetConfig+0x1c0>
 8006bfa:	2b80      	cmp	r3, #128	@ 0x80
 8006bfc:	d009      	beq.n	8006c12 <UART_SetConfig+0x1ae>
 8006bfe:	2b80      	cmp	r3, #128	@ 0x80
 8006c00:	d810      	bhi.n	8006c24 <UART_SetConfig+0x1c0>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <UART_SetConfig+0x1a8>
 8006c06:	2b40      	cmp	r3, #64	@ 0x40
 8006c08:	d006      	beq.n	8006c18 <UART_SetConfig+0x1b4>
 8006c0a:	e00b      	b.n	8006c24 <UART_SetConfig+0x1c0>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e0cc      	b.n	8006dac <UART_SetConfig+0x348>
 8006c12:	2302      	movs	r3, #2
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e0c9      	b.n	8006dac <UART_SetConfig+0x348>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e0c6      	b.n	8006dac <UART_SetConfig+0x348>
 8006c1e:	2308      	movs	r3, #8
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e0c3      	b.n	8006dac <UART_SetConfig+0x348>
 8006c24:	2310      	movs	r3, #16
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e0c0      	b.n	8006dac <UART_SetConfig+0x348>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a44      	ldr	r2, [pc, #272]	@ (8006d40 <UART_SetConfig+0x2dc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d125      	bne.n	8006c80 <UART_SetConfig+0x21c>
 8006c34:	4b3e      	ldr	r3, [pc, #248]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c42:	d017      	beq.n	8006c74 <UART_SetConfig+0x210>
 8006c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c48:	d817      	bhi.n	8006c7a <UART_SetConfig+0x216>
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4e:	d00b      	beq.n	8006c68 <UART_SetConfig+0x204>
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c54:	d811      	bhi.n	8006c7a <UART_SetConfig+0x216>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <UART_SetConfig+0x1fe>
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5e:	d006      	beq.n	8006c6e <UART_SetConfig+0x20a>
 8006c60:	e00b      	b.n	8006c7a <UART_SetConfig+0x216>
 8006c62:	2300      	movs	r3, #0
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e0a1      	b.n	8006dac <UART_SetConfig+0x348>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e09e      	b.n	8006dac <UART_SetConfig+0x348>
 8006c6e:	2304      	movs	r3, #4
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e09b      	b.n	8006dac <UART_SetConfig+0x348>
 8006c74:	2308      	movs	r3, #8
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e098      	b.n	8006dac <UART_SetConfig+0x348>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e095      	b.n	8006dac <UART_SetConfig+0x348>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2f      	ldr	r2, [pc, #188]	@ (8006d44 <UART_SetConfig+0x2e0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d125      	bne.n	8006cd6 <UART_SetConfig+0x272>
 8006c8a:	4b29      	ldr	r3, [pc, #164]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c98:	d017      	beq.n	8006cca <UART_SetConfig+0x266>
 8006c9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c9e:	d817      	bhi.n	8006cd0 <UART_SetConfig+0x26c>
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca4:	d00b      	beq.n	8006cbe <UART_SetConfig+0x25a>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006caa:	d811      	bhi.n	8006cd0 <UART_SetConfig+0x26c>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <UART_SetConfig+0x254>
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb4:	d006      	beq.n	8006cc4 <UART_SetConfig+0x260>
 8006cb6:	e00b      	b.n	8006cd0 <UART_SetConfig+0x26c>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e076      	b.n	8006dac <UART_SetConfig+0x348>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e073      	b.n	8006dac <UART_SetConfig+0x348>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e070      	b.n	8006dac <UART_SetConfig+0x348>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e06d      	b.n	8006dac <UART_SetConfig+0x348>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e06a      	b.n	8006dac <UART_SetConfig+0x348>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1b      	ldr	r2, [pc, #108]	@ (8006d48 <UART_SetConfig+0x2e4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d138      	bne.n	8006d52 <UART_SetConfig+0x2ee>
 8006ce0:	4b13      	ldr	r3, [pc, #76]	@ (8006d30 <UART_SetConfig+0x2cc>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cee:	d017      	beq.n	8006d20 <UART_SetConfig+0x2bc>
 8006cf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cf4:	d82a      	bhi.n	8006d4c <UART_SetConfig+0x2e8>
 8006cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cfa:	d00b      	beq.n	8006d14 <UART_SetConfig+0x2b0>
 8006cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d00:	d824      	bhi.n	8006d4c <UART_SetConfig+0x2e8>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <UART_SetConfig+0x2aa>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	d006      	beq.n	8006d1a <UART_SetConfig+0x2b6>
 8006d0c:	e01e      	b.n	8006d4c <UART_SetConfig+0x2e8>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e04b      	b.n	8006dac <UART_SetConfig+0x348>
 8006d14:	2302      	movs	r3, #2
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e048      	b.n	8006dac <UART_SetConfig+0x348>
 8006d1a:	2304      	movs	r3, #4
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e045      	b.n	8006dac <UART_SetConfig+0x348>
 8006d20:	2308      	movs	r3, #8
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e042      	b.n	8006dac <UART_SetConfig+0x348>
 8006d26:	bf00      	nop
 8006d28:	efff69f3 	.word	0xefff69f3
 8006d2c:	40011000 	.word	0x40011000
 8006d30:	40023800 	.word	0x40023800
 8006d34:	40004400 	.word	0x40004400
 8006d38:	40004800 	.word	0x40004800
 8006d3c:	40004c00 	.word	0x40004c00
 8006d40:	40005000 	.word	0x40005000
 8006d44:	40011400 	.word	0x40011400
 8006d48:	40007800 	.word	0x40007800
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e02c      	b.n	8006dac <UART_SetConfig+0x348>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a72      	ldr	r2, [pc, #456]	@ (8006f20 <UART_SetConfig+0x4bc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d125      	bne.n	8006da8 <UART_SetConfig+0x344>
 8006d5c:	4b71      	ldr	r3, [pc, #452]	@ (8006f24 <UART_SetConfig+0x4c0>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d6a:	d017      	beq.n	8006d9c <UART_SetConfig+0x338>
 8006d6c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d70:	d817      	bhi.n	8006da2 <UART_SetConfig+0x33e>
 8006d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d76:	d00b      	beq.n	8006d90 <UART_SetConfig+0x32c>
 8006d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d7c:	d811      	bhi.n	8006da2 <UART_SetConfig+0x33e>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <UART_SetConfig+0x326>
 8006d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d86:	d006      	beq.n	8006d96 <UART_SetConfig+0x332>
 8006d88:	e00b      	b.n	8006da2 <UART_SetConfig+0x33e>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e00d      	b.n	8006dac <UART_SetConfig+0x348>
 8006d90:	2302      	movs	r3, #2
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e00a      	b.n	8006dac <UART_SetConfig+0x348>
 8006d96:	2304      	movs	r3, #4
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e007      	b.n	8006dac <UART_SetConfig+0x348>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e004      	b.n	8006dac <UART_SetConfig+0x348>
 8006da2:	2310      	movs	r3, #16
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e001      	b.n	8006dac <UART_SetConfig+0x348>
 8006da8:	2310      	movs	r3, #16
 8006daa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db4:	d15b      	bne.n	8006e6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006db6:	7ffb      	ldrb	r3, [r7, #31]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d828      	bhi.n	8006e0e <UART_SetConfig+0x3aa>
 8006dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <UART_SetConfig+0x360>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006df9 	.word	0x08006df9
 8006dd0:	08006e0f 	.word	0x08006e0f
 8006dd4:	08006dff 	.word	0x08006dff
 8006dd8:	08006e0f 	.word	0x08006e0f
 8006ddc:	08006e0f 	.word	0x08006e0f
 8006de0:	08006e0f 	.word	0x08006e0f
 8006de4:	08006e07 	.word	0x08006e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de8:	f7fd fe22 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 8006dec:	61b8      	str	r0, [r7, #24]
        break;
 8006dee:	e013      	b.n	8006e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df0:	f7fd fe32 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8006df4:	61b8      	str	r0, [r7, #24]
        break;
 8006df6:	e00f      	b.n	8006e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df8:	4b4b      	ldr	r3, [pc, #300]	@ (8006f28 <UART_SetConfig+0x4c4>)
 8006dfa:	61bb      	str	r3, [r7, #24]
        break;
 8006dfc:	e00c      	b.n	8006e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfe:	f7fd fd05 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8006e02:	61b8      	str	r0, [r7, #24]
        break;
 8006e04:	e008      	b.n	8006e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0a:	61bb      	str	r3, [r7, #24]
        break;
 8006e0c:	e004      	b.n	8006e18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	77bb      	strb	r3, [r7, #30]
        break;
 8006e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d074      	beq.n	8006f08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	005a      	lsls	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	441a      	add	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	2b0f      	cmp	r3, #15
 8006e38:	d916      	bls.n	8006e68 <UART_SetConfig+0x404>
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e40:	d212      	bcs.n	8006e68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f023 030f 	bic.w	r3, r3, #15
 8006e4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	89fb      	ldrh	r3, [r7, #14]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	89fa      	ldrh	r2, [r7, #14]
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	e04f      	b.n	8006f08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	77bb      	strb	r3, [r7, #30]
 8006e6c:	e04c      	b.n	8006f08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e6e:	7ffb      	ldrb	r3, [r7, #31]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d828      	bhi.n	8006ec6 <UART_SetConfig+0x462>
 8006e74:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <UART_SetConfig+0x418>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006ec7 	.word	0x08006ec7
 8006e8c:	08006eb7 	.word	0x08006eb7
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006ec7 	.word	0x08006ec7
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ebf 	.word	0x08006ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fd fdc6 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 8006ea4:	61b8      	str	r0, [r7, #24]
        break;
 8006ea6:	e013      	b.n	8006ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7fd fdd6 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8006eac:	61b8      	str	r0, [r7, #24]
        break;
 8006eae:	e00f      	b.n	8006ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f28 <UART_SetConfig+0x4c4>)
 8006eb2:	61bb      	str	r3, [r7, #24]
        break;
 8006eb4:	e00c      	b.n	8006ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fd fca9 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8006eba:	61b8      	str	r0, [r7, #24]
        break;
 8006ebc:	e008      	b.n	8006ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec2:	61bb      	str	r3, [r7, #24]
        break;
 8006ec4:	e004      	b.n	8006ed0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ece:	bf00      	nop
    }

    if (pclk != 0U)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d018      	beq.n	8006f08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	085a      	lsrs	r2, r3, #1
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	441a      	add	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b0f      	cmp	r3, #15
 8006eee:	d909      	bls.n	8006f04 <UART_SetConfig+0x4a0>
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef6:	d205      	bcs.n	8006f04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60da      	str	r2, [r3, #12]
 8006f02:	e001      	b.n	8006f08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006f14:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40007c00 	.word	0x40007c00
 8006f24:	40023800 	.word	0x40023800
 8006f28:	00f42400 	.word	0x00f42400

08006f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01a      	beq.n	8007042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800702a:	d10a      	bne.n	8007042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007080:	f7fc fc4e 	bl	8003920 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b08      	cmp	r3, #8
 8007092:	d10e      	bne.n	80070b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f831 	bl	800710a <UART_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e027      	b.n	8007102 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d10e      	bne.n	80070de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f81b 	bl	800710a <UART_WaitOnFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e011      	b.n	8007102 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b09c      	sub	sp, #112	@ 0x70
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	4613      	mov	r3, r2
 8007118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711a:	e0a7      	b.n	800726c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	f000 80a3 	beq.w	800726c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fc fbfb 	bl	8003920 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <UART_WaitOnFlagUntilTimeout+0x32>
 8007136:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007138:	2b00      	cmp	r3, #0
 800713a:	d13f      	bne.n	80071bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800714a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007150:	667b      	str	r3, [r7, #100]	@ 0x64
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800715a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800715c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007160:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	663b      	str	r3, [r7, #96]	@ 0x60
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800718e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007190:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800719c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e068      	b.n	800728e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d050      	beq.n	800726c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d8:	d148      	bne.n	800726c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80071f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
 8007204:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e6      	bne.n	80071e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	613b      	str	r3, [r7, #16]
   return(result);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007236:	623a      	str	r2, [r7, #32]
 8007238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	69f9      	ldr	r1, [r7, #28]
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	61bb      	str	r3, [r7, #24]
   return(result);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e5      	bne.n	8007216 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e010      	b.n	800728e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	bf0c      	ite	eq
 800727c:	2301      	moveq	r3, #1
 800727e:	2300      	movne	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	429a      	cmp	r2, r3
 8007288:	f43f af48 	beq.w	800711c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3770      	adds	r7, #112	@ 0x70
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007296:	b480      	push	{r7}
 8007298:	b095      	sub	sp, #84	@ 0x54
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80072be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e6      	bne.n	800729e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3308      	adds	r3, #8
 80072ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e5      	bne.n	80072d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007308:	2b01      	cmp	r3, #1
 800730a:	d118      	bne.n	800733e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	60bb      	str	r3, [r7, #8]
   return(result);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f023 0310 	bic.w	r3, r3, #16
 8007320:	647b      	str	r3, [r7, #68]	@ 0x44
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	613b      	str	r3, [r7, #16]
   return(result);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e6      	bne.n	800730c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007352:	bf00      	nop
 8007354:	3754      	adds	r7, #84	@ 0x54
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fb51 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b088      	sub	sp, #32
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6979      	ldr	r1, [r7, #20]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	613b      	str	r3, [r7, #16]
   return(result);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e6      	bne.n	8007392 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fb1d 	bl	8006a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d6:	bf00      	nop
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <memset>:
 80073de:	4402      	add	r2, r0
 80073e0:	4603      	mov	r3, r0
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d100      	bne.n	80073e8 <memset+0xa>
 80073e6:	4770      	bx	lr
 80073e8:	f803 1b01 	strb.w	r1, [r3], #1
 80073ec:	e7f9      	b.n	80073e2 <memset+0x4>
	...

080073f0 <__libc_init_array>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007428 <__libc_init_array+0x38>)
 80073f4:	4c0d      	ldr	r4, [pc, #52]	@ (800742c <__libc_init_array+0x3c>)
 80073f6:	1b64      	subs	r4, r4, r5
 80073f8:	10a4      	asrs	r4, r4, #2
 80073fa:	2600      	movs	r6, #0
 80073fc:	42a6      	cmp	r6, r4
 80073fe:	d109      	bne.n	8007414 <__libc_init_array+0x24>
 8007400:	4d0b      	ldr	r5, [pc, #44]	@ (8007430 <__libc_init_array+0x40>)
 8007402:	4c0c      	ldr	r4, [pc, #48]	@ (8007434 <__libc_init_array+0x44>)
 8007404:	f000 f818 	bl	8007438 <_init>
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	2600      	movs	r6, #0
 800740e:	42a6      	cmp	r6, r4
 8007410:	d105      	bne.n	800741e <__libc_init_array+0x2e>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	f855 3b04 	ldr.w	r3, [r5], #4
 8007418:	4798      	blx	r3
 800741a:	3601      	adds	r6, #1
 800741c:	e7ee      	b.n	80073fc <__libc_init_array+0xc>
 800741e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007422:	4798      	blx	r3
 8007424:	3601      	adds	r6, #1
 8007426:	e7f2      	b.n	800740e <__libc_init_array+0x1e>
 8007428:	08008b44 	.word	0x08008b44
 800742c:	08008b44 	.word	0x08008b44
 8007430:	08008b44 	.word	0x08008b44
 8007434:	08008b48 	.word	0x08008b48

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
