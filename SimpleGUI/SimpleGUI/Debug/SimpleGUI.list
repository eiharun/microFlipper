
SimpleGUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ec  08007be8  08007be8  00008be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d4  080092d4  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080092d4  080092d4  0000a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092dc  080092dc  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092dc  080092dc  0000a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092e0  080092e0  0000a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080092e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0800937c  0000b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0800941c  0000b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000be8  200001d8  080094bc  0000b1d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000dc0  080094bc  0000bdc0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005a76c  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c35  00000000  00000000  00065972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004108  00000000  00000000  0006a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003156  00000000  00000000  0006e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029961  00000000  00000000  00071806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b31a  00000000  00000000  0009b167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011fa33  00000000  00000000  000c6481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e5eb4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00011ec8  00000000  00000000  001e5ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  001f7dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d8 	.word	0x200001d8
 8000214:	00000000 	.word	0x00000000
 8000218:	08007bd0 	.word	0x08007bd0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001dc 	.word	0x200001dc
 8000234:	08007bd0 	.word	0x08007bd0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	78fa      	ldrb	r2, [r7, #3]
 8000538:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	4608      	mov	r0, r1
 8000552:	4611      	mov	r1, r2
 8000554:	461a      	mov	r2, r3
 8000556:	4603      	mov	r3, r0
 8000558:	817b      	strh	r3, [r7, #10]
 800055a:	460b      	mov	r3, r1
 800055c:	813b      	strh	r3, [r7, #8]
 800055e:	4613      	mov	r3, r2
 8000560:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000568:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800056a:	7dbb      	ldrb	r3, [r7, #22]
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf0c      	ite	eq
 8000570:	2301      	moveq	r3, #1
 8000572:	2300      	movne	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000578:	897a      	ldrh	r2, [r7, #10]
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	4413      	add	r3, r2
 800057e:	b298      	uxth	r0, r3
 8000580:	893b      	ldrh	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	893a      	ldrh	r2, [r7, #8]
 8000588:	8979      	ldrh	r1, [r7, #10]
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4603      	mov	r3, r0
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f001 f893 	bl	80016ba <u8g2_IsIntersection>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d040      	beq.n	800061c <u8g2_DrawHXBMP+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 800059e:	e035      	b.n	800060c <u8g2_DrawHXBMP+0xc4>
  {
    if( u8x8_pgm_read(b) & mask ) {
 80005a0:	6a3b      	ldr	r3, [r7, #32]
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	4013      	ands	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00c      	beq.n	80005c8 <u8g2_DrawHXBMP+0x80>
      u8g2->draw_color = color;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	7dba      	ldrb	r2, [r7, #22]
 80005b2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80005b6:	893a      	ldrh	r2, [r7, #8]
 80005b8:	8979      	ldrh	r1, [r7, #10]
 80005ba:	2300      	movs	r3, #0
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	68f8      	ldr	r0, [r7, #12]
 80005c2:	f000 ff72 	bl	80014aa <u8g2_DrawHVLine>
 80005c6:	e010      	b.n	80005ea <u8g2_DrawHXBMP+0xa2>
    } else if( u8g2->bitmap_transparency == 0 ) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10b      	bne.n	80005ea <u8g2_DrawHXBMP+0xa2>
      u8g2->draw_color = ncolor;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	7d7a      	ldrb	r2, [r7, #21]
 80005d6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80005da:	893a      	ldrh	r2, [r7, #8]
 80005dc:	8979      	ldrh	r1, [r7, #10]
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f000 ff60 	bl	80014aa <u8g2_DrawHVLine>
    }
   
    x++;
 80005ea:	897b      	ldrh	r3, [r7, #10]
 80005ec:	3301      	adds	r3, #1
 80005ee:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80005f0:	7dfb      	ldrb	r3, [r7, #23]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d104      	bne.n	8000606 <u8g2_DrawHXBMP+0xbe>
    {
      mask = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	75fb      	strb	r3, [r7, #23]
      b++;
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	3301      	adds	r3, #1
 8000604:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	3b01      	subs	r3, #1
 800060a:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1c6      	bne.n	80005a0 <u8g2_DrawHXBMP+0x58>
  }
  u8g2->draw_color = color;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	7dba      	ldrb	r2, [r7, #22]
 8000616:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 800061a:	e000      	b.n	800061e <u8g2_DrawHXBMP+0xd6>
    return;
 800061c:	bf00      	nop
}
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	817b      	strh	r3, [r7, #10]
 8000636:	460b      	mov	r3, r1
 8000638:	813b      	strh	r3, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8000642:	8afb      	ldrh	r3, [r7, #22]
 8000644:	3307      	adds	r3, #7
 8000646:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000648:	8afb      	ldrh	r3, [r7, #22]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800064e:	897a      	ldrh	r2, [r7, #10]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4413      	add	r3, r2
 8000654:	b298      	uxth	r0, r3
 8000656:	893a      	ldrh	r2, [r7, #8]
 8000658:	8c3b      	ldrh	r3, [r7, #32]
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	893a      	ldrh	r2, [r7, #8]
 8000660:	8979      	ldrh	r1, [r7, #10]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4603      	mov	r3, r0
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f001 f827 	bl	80016ba <u8g2_IsIntersection>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d017      	beq.n	80006a2 <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000672:	e012      	b.n	800069a <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8000674:	88f8      	ldrh	r0, [r7, #6]
 8000676:	893a      	ldrh	r2, [r7, #8]
 8000678:	8979      	ldrh	r1, [r7, #10]
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4603      	mov	r3, r0
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff ff61 	bl	8000548 <u8g2_DrawHXBMP>
    bitmap += blen;
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068a:	4413      	add	r3, r2
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800068e:	893b      	ldrh	r3, [r7, #8]
 8000690:	3301      	adds	r3, #1
 8000692:	813b      	strh	r3, [r7, #8]
    h--;
 8000694:	8c3b      	ldrh	r3, [r7, #32]
 8000696:	3b01      	subs	r3, #1
 8000698:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800069a:	8c3b      	ldrh	r3, [r7, #32]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1e9      	bne.n	8000674 <u8g2_DrawXBMP+0x50>
 80006a0:	e000      	b.n	80006a4 <u8g2_DrawXBMP+0x80>
    return;
 80006a2:	bf00      	nop
  }
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	4608      	mov	r0, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4603      	mov	r3, r0
 80006ba:	817b      	strh	r3, [r7, #10]
 80006bc:	460b      	mov	r3, r1
 80006be:	813b      	strh	r3, [r7, #8]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80006c4:	897a      	ldrh	r2, [r7, #10]
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4413      	add	r3, r2
 80006ca:	b298      	uxth	r0, r3
 80006cc:	893a      	ldrh	r2, [r7, #8]
 80006ce:	8b3b      	ldrh	r3, [r7, #24]
 80006d0:	4413      	add	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	893a      	ldrh	r2, [r7, #8]
 80006d6:	8979      	ldrh	r1, [r7, #10]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	4603      	mov	r3, r0
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f000 ffec 	bl	80016ba <u8g2_IsIntersection>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d012      	beq.n	800070e <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80006e8:	e00d      	b.n	8000706 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	893a      	ldrh	r2, [r7, #8]
 80006ee:	8979      	ldrh	r1, [r7, #10]
 80006f0:	2000      	movs	r0, #0
 80006f2:	9000      	str	r0, [sp, #0]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 fed8 	bl	80014aa <u8g2_DrawHVLine>
    y++;    
 80006fa:	893b      	ldrh	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	813b      	strh	r3, [r7, #8]
    h--;
 8000700:	8b3b      	ldrh	r3, [r7, #24]
 8000702:	3b01      	subs	r3, #1
 8000704:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8000706:	8b3b      	ldrh	r3, [r7, #24]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1ee      	bne.n	80006ea <u8g2_DrawBox+0x40>
 800070c:	e000      	b.n	8000710 <u8g2_DrawBox+0x66>
    return;
 800070e:	bf00      	nop
  }
}
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800072c:	461a      	mov	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f007 fa17 	bl	8007b78 <memset>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af02      	add	r7, sp, #8
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	70fb      	strb	r3, [r7, #3]
 800075e:	4613      	mov	r3, r2
 8000760:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	7c1b      	ldrb	r3, [r3, #16]
 8000768:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000772:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	b29b      	uxth	r3, r3
 8000778:	89ba      	ldrh	r2, [r7, #12]
 800077a:	fb12 f303 	smulbb	r3, r2, r3
 800077e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000780:	89bb      	ldrh	r3, [r7, #12]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000786:	89bb      	ldrh	r3, [r7, #12]
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	4413      	add	r3, r2
 800078c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800078e:	7bf9      	ldrb	r1, [r7, #15]
 8000790:	78ba      	ldrb	r2, [r7, #2]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	460b      	mov	r3, r1
 8000798:	2100      	movs	r1, #0
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f001 fc29 	bl	8001ff2 <u8x8_DrawTile>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80007ba:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80007c2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7c5b      	ldrb	r3, [r3, #17]
 80007ca:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80007cc:	7bba      	ldrb	r2, [r7, #14]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffbd 	bl	8000752 <u8g2_send_tile_row>
    src_row++;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	3301      	adds	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	7b7b      	ldrb	r3, [r7, #13]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d203      	bcs.n	80007f4 <u8g2_send_buffer+0x4c>
 80007ec:	7bba      	ldrb	r2, [r7, #14]
 80007ee:	7b3b      	ldrb	r3, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3eb      	bcc.n	80007cc <u8g2_send_buffer+0x24>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffcf 	bl	80007a8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f001 fc42 	bl	8002094 <u8x8_RefreshDisplay>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2208      	movs	r2, #8
 8000824:	701a      	strb	r2, [r3, #0]
  return buf;
 8000826:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	200001f4 	.word	0x200001f4

08000838 <u8g2_Setup_ssd1309_128x64_noname2_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname2_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af02      	add	r7, sp, #8
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname2, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <u8g2_Setup_ssd1309_128x64_noname2_f+0x44>)
 800084e:	490c      	ldr	r1, [pc, #48]	@ (8000880 <u8g2_Setup_ssd1309_128x64_noname2_f+0x48>)
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f001 fc7f 	bl	8002154 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000856:	f107 0313 	add.w	r3, r7, #19
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffdc 	bl	8000818 <u8g2_m_16_8_f>
 8000860:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000862:	7cfa      	ldrb	r2, [r7, #19]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <u8g2_Setup_ssd1309_128x64_noname2_f+0x4c>)
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f001 f80e 	bl	800188e <u8g2_SetupBuffer>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08001d25 	.word	0x08001d25
 8000880:	08001ea9 	.word	0x08001ea9
 8000884:	08001711 	.word	0x08001711

08000888 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	81fb      	strh	r3, [r7, #14]
    font++;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	4413      	add	r3, r2
 80008dc:	81fb      	strh	r3, [r7, #14]
    return pos;
 80008de:	89fb      	ldrh	r3, [r7, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff ffc5 	bl	8000888 <u8g2_font_get_byte>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000906:	2101      	movs	r1, #1
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	f7ff ffbd 	bl	8000888 <u8g2_font_get_byte>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000916:	2102      	movs	r1, #2
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f7ff ffb5 	bl	8000888 <u8g2_font_get_byte>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000926:	2103      	movs	r1, #3
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff ffad 	bl	8000888 <u8g2_font_get_byte>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000936:	2104      	movs	r1, #4
 8000938:	6838      	ldr	r0, [r7, #0]
 800093a:	f7ff ffa5 	bl	8000888 <u8g2_font_get_byte>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000946:	2105      	movs	r1, #5
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f7ff ff9d 	bl	8000888 <u8g2_font_get_byte>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000956:	2106      	movs	r1, #6
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f7ff ff95 	bl	8000888 <u8g2_font_get_byte>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000966:	2107      	movs	r1, #7
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f7ff ff8d 	bl	8000888 <u8g2_font_get_byte>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000976:	2108      	movs	r1, #8
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f7ff ff85 	bl	8000888 <u8g2_font_get_byte>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000986:	2109      	movs	r1, #9
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff ff7d 	bl	8000888 <u8g2_font_get_byte>
 800098e:	4603      	mov	r3, r0
 8000990:	b25a      	sxtb	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000996:	210a      	movs	r1, #10
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f7ff ff75 	bl	8000888 <u8g2_font_get_byte>
 800099e:	4603      	mov	r3, r0
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80009a6:	210b      	movs	r1, #11
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f7ff ff6d 	bl	8000888 <u8g2_font_get_byte>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b25a      	sxtb	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80009b6:	210c      	movs	r1, #12
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f7ff ff65 	bl	8000888 <u8g2_font_get_byte>
 80009be:	4603      	mov	r3, r0
 80009c0:	b25a      	sxtb	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80009c6:	210d      	movs	r1, #13
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f7ff ff5d 	bl	8000888 <u8g2_font_get_byte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80009d6:	210e      	movs	r1, #14
 80009d8:	6838      	ldr	r0, [r7, #0]
 80009da:	f7ff ff55 	bl	8000888 <u8g2_font_get_byte>
 80009de:	4603      	mov	r3, r0
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80009e6:	210f      	movs	r1, #15
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f7ff ff4d 	bl	8000888 <u8g2_font_get_byte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b25a      	sxtb	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80009f6:	2110      	movs	r1, #16
 80009f8:	6838      	ldr	r0, [r7, #0]
 80009fa:	f7ff ff45 	bl	8000888 <u8g2_font_get_byte>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b25a      	sxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000a06:	2111      	movs	r1, #17
 8000a08:	6838      	ldr	r0, [r7, #0]
 8000a0a:	f7ff ff4f 	bl	80008ac <u8g2_font_get_word>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000a16:	2113      	movs	r1, #19
 8000a18:	6838      	ldr	r0, [r7, #0]
 8000a1a:	f7ff ff47 	bl	80008ac <u8g2_font_get_word>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000a26:	2115      	movs	r1, #21
 8000a28:	6838      	ldr	r0, [r7, #0]
 8000a2a:	f7ff ff3f 	bl	80008ac <u8g2_font_get_word>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	82da      	strh	r2, [r3, #22]
#endif
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7b1b      	ldrb	r3, [r3, #12]
 8000a4e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	fa42 f303 	asr.w	r3, r2, r3
 8000a60:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000a66:	7bba      	ldrb	r2, [r7, #14]
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	2b07      	cmp	r3, #7
 8000a72:	d91a      	bls.n	8000aaa <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000a74:	2308      	movs	r3, #8
 8000a76:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000a78:	7b3a      	ldrb	r2, [r7, #12]
 8000a7a:	7b7b      	ldrb	r3, [r7, #13]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	7b3b      	ldrb	r3, [r7, #12]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4013      	ands	r3, r2
 8000abe:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7bba      	ldrb	r2, [r7, #14]
 8000ac4:	731a      	strb	r2, [r3, #12]
  return val;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffaa 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000af8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
  return v;
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000b1a:	b490      	push	{r4, r7}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4604      	mov	r4, r0
 8000b22:	4608      	mov	r0, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	461a      	mov	r2, r3
 8000b28:	4623      	mov	r3, r4
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	717b      	strb	r3, [r7, #5]
 8000b30:	460b      	mov	r3, r1
 8000b32:	713b      	strb	r3, [r7, #4]
 8000b34:	4613      	mov	r3, r2
 8000b36:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d014      	beq.n	8000b68 <u8g2_add_vector_y+0x4e>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	dc19      	bgt.n	8000b76 <u8g2_add_vector_y+0x5c>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <u8g2_add_vector_y+0x32>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d007      	beq.n	8000b5a <u8g2_add_vector_y+0x40>
 8000b4a:	e014      	b.n	8000b76 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000b4c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4413      	add	r3, r2
 8000b56:	80fb      	strh	r3, [r7, #6]
      break;
 8000b58:	e014      	b.n	8000b84 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4413      	add	r3, r2
 8000b64:	80fb      	strh	r3, [r7, #6]
      break;
 8000b66:	e00d      	b.n	8000b84 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000b68:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	88fa      	ldrh	r2, [r7, #6]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	80fb      	strh	r3, [r7, #6]
      break;
 8000b74:	e006      	b.n	8000b84 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000b76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	88fa      	ldrh	r2, [r7, #6]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	80fb      	strh	r3, [r7, #6]
      break;      
 8000b82:	bf00      	nop
  }
  return dy;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc90      	pop	{r4, r7}
 8000b8e:	4770      	bx	lr

08000b90 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000b90:	b490      	push	{r4, r7}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4604      	mov	r4, r0
 8000b98:	4608      	mov	r0, r1
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	80fb      	strh	r3, [r7, #6]
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	717b      	strb	r3, [r7, #5]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	713b      	strb	r3, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d014      	beq.n	8000bde <u8g2_add_vector_x+0x4e>
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	dc19      	bgt.n	8000bec <u8g2_add_vector_x+0x5c>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <u8g2_add_vector_x+0x32>
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d007      	beq.n	8000bd0 <u8g2_add_vector_x+0x40>
 8000bc0:	e014      	b.n	8000bec <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000bc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4413      	add	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
      break;
 8000bce:	e014      	b.n	8000bfa <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000bd0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	80fb      	strh	r3, [r7, #6]
      break;
 8000bdc:	e00d      	b.n	8000bfa <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000bde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	80fb      	strh	r3, [r7, #6]
      break;
 8000bea:	e006      	b.n	8000bfa <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000bec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	80fb      	strh	r3, [r7, #6]
      break;      
 8000bf8:	bf00      	nop
  }
  return dx;
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc90      	pop	{r4, r7}
 8000c04:	4770      	bx	lr

08000c06 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b088      	sub	sp, #32
 8000c0a:	af02      	add	r7, sp, #8
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	4613      	mov	r3, r2
 8000c14:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3360      	adds	r3, #96	@ 0x60
 8000c1a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c26:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c2e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c36:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	7d7b      	ldrb	r3, [r7, #21]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000c44:	7dfa      	ldrb	r2, [r7, #23]
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d201      	bcs.n	8000c50 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
 8000c4e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	889b      	ldrh	r3, [r3, #4]
 8000c54:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	88db      	ldrh	r3, [r3, #6]
 8000c5a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000c5c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c60:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	7c1b      	ldrb	r3, [r3, #16]
 8000c68:	89b8      	ldrh	r0, [r7, #12]
 8000c6a:	f7ff ff91 	bl	8000b90 <u8g2_add_vector_x>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000c72:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c76:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	7c1b      	ldrb	r3, [r3, #16]
 8000c7e:	8978      	ldrh	r0, [r7, #10]
 8000c80:	f7ff ff4b 	bl	8000b1a <u8g2_add_vector_y>
 8000c84:	4603      	mov	r3, r0
 8000c86:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d010      	beq.n	8000cb0 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	7b9a      	ldrb	r2, [r3, #14]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	7c1b      	ldrb	r3, [r3, #16]
 8000ca0:	897a      	ldrh	r2, [r7, #10]
 8000ca2:	89b9      	ldrh	r1, [r7, #12]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fbfe 	bl	80014aa <u8g2_DrawHVLine>
 8000cae:	e013      	b.n	8000cd8 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	7b5b      	ldrb	r3, [r3, #13]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10f      	bne.n	8000cd8 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	7bda      	ldrb	r2, [r3, #15]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	b298      	uxth	r0, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	7c1b      	ldrb	r3, [r3, #16]
 8000cca:	897a      	ldrh	r2, [r7, #10]
 8000ccc:	89b9      	ldrh	r1, [r7, #12]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 fbe9 	bl	80014aa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000cd8:	7dfa      	ldrb	r2, [r7, #23]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d309      	bcc.n	8000cf4 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8000ce0:	7dfa      	ldrb	r2, [r7, #23]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	757b      	strb	r3, [r7, #21]
    ly++;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000cf2:	e79d      	b.n	8000c30 <u8g2_font_decode_len+0x2a>
      break;
 8000cf4:	bf00      	nop
  }
  lx += cnt;
 8000cf6:	7d7a      	ldrb	r2, [r7, #21]
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000cfe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8000d06:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	725a      	strb	r2, [r3, #9]
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3360      	adds	r3, #96	@ 0x60
 8000d24:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff fe7f 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b25a      	sxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8000d4e:	4619      	mov	r1, r3
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fe74 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	7b9b      	ldrb	r3, [r3, #14]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf0c      	ite	eq
 8000d70:	2301      	moveq	r3, #1
 8000d72:	2300      	movne	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	73da      	strb	r2, [r3, #15]
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3360      	adds	r3, #96	@ 0x60
 8000d92:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8000d94:	6839      	ldr	r1, [r7, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffbd 	bl	8000d16 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8000da2:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8000daa:	4619      	mov	r1, r3
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff fe91 	bl	8000ad4 <u8g2_font_decode_get_signed_bits>
 8000db2:	4603      	mov	r3, r0
 8000db4:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff fe88 	bl	8000ad4 <u8g2_font_decode_get_signed_bits>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6978      	ldr	r0, [r7, #20]
 8000dd2:	f7ff fe7f 	bl	8000ad4 <u8g2_font_decode_get_signed_bits>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f340 80d7 	ble.w	8000f94 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	8898      	ldrh	r0, [r3, #4]
 8000dea:	7cfa      	ldrb	r2, [r7, #19]
 8000dec:	7c7b      	ldrb	r3, [r7, #17]
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	425b      	negs	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b25a      	sxtb	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	7c1b      	ldrb	r3, [r3, #16]
 8000dfc:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e00:	f7ff fec6 	bl	8000b90 <u8g2_add_vector_x>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	88d8      	ldrh	r0, [r3, #6]
 8000e10:	7cfa      	ldrb	r2, [r7, #19]
 8000e12:	7c7b      	ldrb	r3, [r7, #17]
 8000e14:	4413      	add	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	425b      	negs	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	7c1b      	ldrb	r3, [r3, #16]
 8000e22:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e26:	f7ff fe78 	bl	8000b1a <u8g2_add_vector_y>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	88db      	ldrh	r3, [r3, #6]
 8000e3c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8000e3e:	8bfb      	ldrh	r3, [r7, #30]
 8000e40:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8000e42:	8b7b      	ldrh	r3, [r7, #26]
 8000e44:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	7c1b      	ldrb	r3, [r3, #16]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d85a      	bhi.n	8000f04 <u8g2_font_decode_glyph+0x180>
 8000e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <u8g2_font_decode_glyph+0xd0>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000e65 	.word	0x08000e65
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	08000ea9 	.word	0x08000ea9
 8000e60:	08000edd 	.word	0x08000edd
      {
	case 0:
	    x1 += decode->glyph_width;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	8bbb      	ldrh	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8000e72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	8b3b      	ldrh	r3, [r7, #24]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	833b      	strh	r3, [r7, #24]
	    break;
 8000e7e:	e041      	b.n	8000f04 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8000e80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	8bfa      	ldrh	r2, [r7, #30]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000e8c:	8bfb      	ldrh	r3, [r7, #30]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000e92:	8bbb      	ldrh	r3, [r7, #28]
 8000e94:	3301      	adds	r3, #1
 8000e96:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	8b3b      	ldrh	r3, [r7, #24]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	833b      	strh	r3, [r7, #24]
	    break;
 8000ea6:	e02d      	b.n	8000f04 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	8bfa      	ldrh	r2, [r7, #30]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000eb6:	8bfb      	ldrh	r3, [r7, #30]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000ebc:	8bbb      	ldrh	r3, [r7, #28]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8000ec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	8b7a      	ldrh	r2, [r7, #26]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ece:	8b7b      	ldrh	r3, [r7, #26]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000ed4:	8b3b      	ldrh	r3, [r7, #24]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000eda:	e013      	b.n	8000f04 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8000edc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	8bbb      	ldrh	r3, [r7, #28]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	8b7a      	ldrh	r2, [r7, #26]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ef6:	8b7b      	ldrh	r3, [r7, #26]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	3301      	adds	r3, #1
 8000f00:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000f02:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000f04:	8bb8      	ldrh	r0, [r7, #28]
 8000f06:	8b7a      	ldrh	r2, [r7, #26]
 8000f08:	8bf9      	ldrh	r1, [r7, #30]
 8000f0a:	8b3b      	ldrh	r3, [r7, #24]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fbd2 	bl	80016ba <u8g2_IsIntersection>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <u8g2_font_decode_glyph+0x19e>
	return d;
 8000f1c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000f20:	e03a      	b.n	8000f98 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000f34:	4619      	mov	r1, r3
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff fd81 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8000f46:	4619      	mov	r1, r3
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff fd78 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fe54 	bl	8000c06 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fe4e 	bl	8000c06 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff fd66 	bl	8000a3e <u8g2_font_decode_get_unsigned_bits>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ec      	bne.n	8000f52 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000f7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dd00      	ble.n	8000f88 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f86:	e7d2      	b.n	8000f2e <u8g2_font_decode_glyph+0x1aa>
	break;
 8000f88:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	7b9a      	ldrb	r2, [r3, #14]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8000f94:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3317      	adds	r3, #23
 8000fb6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	2bff      	cmp	r3, #255	@ 0xff
 8000fbc:	d82a      	bhi.n	8001014 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	2b60      	cmp	r3, #96	@ 0x60
 8000fc2:	d907      	bls.n	8000fd4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8000fca:	461a      	mov	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	2b40      	cmp	r3, #64	@ 0x40
 8000fd8:	d906      	bls.n	8000fe8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d04e      	beq.n	8001090 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d102      	bne.n	8001004 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3302      	adds	r3, #2
 8001002:	e049      	b.n	8001098 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001012:	e7e9      	b.n	8000fe8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800101a:	461a      	mov	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	4413      	add	r3, r2
 8001020:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001026:	2100      	movs	r1, #0
 8001028:	6938      	ldr	r0, [r7, #16]
 800102a:	f7ff fc3f 	bl	80008ac <u8g2_font_get_word>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001038:	2102      	movs	r1, #2
 800103a:	6938      	ldr	r0, [r7, #16]
 800103c:	f7ff fc36 	bl	80008ac <u8g2_font_get_word>
 8001040:	4603      	mov	r3, r0
 8001042:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3304      	adds	r3, #4
 8001048:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800104a:	89fa      	ldrh	r2, [r7, #14]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3e9      	bcc.n	8001026 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	4313      	orrs	r3, r2
 800106a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d010      	beq.n	8001094 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001072:	89fa      	ldrh	r2, [r7, #14]
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	429a      	cmp	r2, r3
 8001078:	d102      	bne.n	8001080 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3303      	adds	r3, #3
 800107e:	e00b      	b.n	8001098 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3302      	adds	r3, #2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800108e:	e7e0      	b.n	8001052 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001090:	bf00      	nop
 8001092:	e000      	b.n	8001096 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001094:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	4608      	mov	r0, r1
 80010aa:	4611      	mov	r1, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	817b      	strh	r3, [r7, #10]
 80010b2:	460b      	mov	r3, r1
 80010b4:	813b      	strh	r3, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	897a      	ldrh	r2, [r7, #10]
 80010c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	893a      	ldrh	r2, [r7, #8]
 80010ca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff ff64 	bl	8000fa0 <u8g2_font_get_glyph_data>
 80010d8:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fe4e 	bl	8000d84 <u8g2_font_decode_glyph>
 80010e8:	4603      	mov	r3, r0
 80010ea:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80010ec:	8afb      	ldrh	r3, [r7, #22]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	4608      	mov	r0, r1
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	4603      	mov	r3, r0
 8001108:	817b      	strh	r3, [r7, #10]
 800110a:	460b      	mov	r3, r1
 800110c:	813b      	strh	r3, [r7, #8]
 800110e:	4613      	mov	r3, r2
 8001110:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001118:	2b03      	cmp	r3, #3
 800111a:	d833      	bhi.n	8001184 <u8g2_DrawGlyph+0x8c>
 800111c:	a201      	add	r2, pc, #4	@ (adr r2, 8001124 <u8g2_DrawGlyph+0x2c>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001135 	.word	0x08001135
 8001128:	08001149 	.word	0x08001149
 800112c:	0800115d 	.word	0x0800115d
 8001130:	08001171 	.word	0x08001171
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	893b      	ldrh	r3, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	813b      	strh	r3, [r7, #8]
      break;
 8001146:	e01d      	b.n	8001184 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	4798      	blx	r3
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	897b      	ldrh	r3, [r7, #10]
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	817b      	strh	r3, [r7, #10]
      break;
 800115a:	e013      	b.n	8001184 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	4798      	blx	r3
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	893b      	ldrh	r3, [r7, #8]
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	813b      	strh	r3, [r7, #8]
      break;
 800116e:	e009      	b.n	8001184 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	4798      	blx	r3
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	897b      	ldrh	r3, [r7, #10]
 800117e:	4413      	add	r3, r2
 8001180:	817b      	strh	r3, [r7, #10]
      break;
 8001182:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	893a      	ldrh	r2, [r7, #8]
 8001188:	8979      	ldrh	r1, [r7, #10]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f7ff ff88 	bl	80010a0 <u8g2_font_draw_glyph>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop

0800119c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	817b      	strh	r3, [r7, #10]
 80011aa:	4613      	mov	r3, r2
 80011ac:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fcb3 	bl	8001b1a <u8x8_utf8_init>
  sum = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	4611      	mov	r1, r2
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	4798      	blx	r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80011ca:	8abb      	ldrh	r3, [r7, #20]
 80011cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d038      	beq.n	8001246 <u8g2_draw_string+0xaa>
      break;
    str++;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d0e9      	beq.n	80011b8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80011e4:	8abb      	ldrh	r3, [r7, #20]
 80011e6:	893a      	ldrh	r2, [r7, #8]
 80011e8:	8979      	ldrh	r1, [r7, #10]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff84 	bl	80010f8 <u8g2_DrawGlyph>
 80011f0:	4603      	mov	r3, r0
 80011f2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d81e      	bhi.n	800123c <u8g2_draw_string+0xa0>
 80011fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001204 <u8g2_draw_string+0x68>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	0800121f 	.word	0x0800121f
 800120c:	08001229 	.word	0x08001229
 8001210:	08001233 	.word	0x08001233
      {
	case 0:
	  x += delta;
 8001214:	897a      	ldrh	r2, [r7, #10]
 8001216:	8a7b      	ldrh	r3, [r7, #18]
 8001218:	4413      	add	r3, r2
 800121a:	817b      	strh	r3, [r7, #10]
	  break;
 800121c:	e00e      	b.n	800123c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800121e:	893a      	ldrh	r2, [r7, #8]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	4413      	add	r3, r2
 8001224:	813b      	strh	r3, [r7, #8]
	  break;
 8001226:	e009      	b.n	800123c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001228:	897a      	ldrh	r2, [r7, #10]
 800122a:	8a7b      	ldrh	r3, [r7, #18]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	817b      	strh	r3, [r7, #10]
	  break;
 8001230:	e004      	b.n	800123c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001232:	893a      	ldrh	r2, [r7, #8]
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	813b      	strh	r3, [r7, #8]
	  break;
 800123a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800123c:	8afa      	ldrh	r2, [r7, #22]
 800123e:	8a7b      	ldrh	r3, [r7, #18]
 8001240:	4413      	add	r3, r2
 8001242:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001244:	e7b8      	b.n	80011b8 <u8g2_draw_string+0x1c>
      break;
 8001246:	bf00      	nop
    }
  }
  return sum;
 8001248:	8afb      	ldrh	r3, [r7, #22]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop

08001254 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	817b      	strh	r3, [r7, #10]
 8001262:	4613      	mov	r3, r2
 8001264:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <u8g2_DrawStr+0x30>)
 800126a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800126c:	893a      	ldrh	r2, [r7, #8]
 800126e:	8979      	ldrh	r1, [r7, #10]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff ff92 	bl	800119c <u8g2_draw_string>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08001b37 	.word	0x08001b37

08001288 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05d      	beq.n	8001354 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d04d      	beq.n	8001356 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d11c      	bne.n	80012fe <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80012d0:	429a      	cmp	r2, r3
 80012d2:	da05      	bge.n	80012e0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dd32      	ble.n	8001356 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80012fc:	e02b      	b.n	8001356 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800130c:	4619      	mov	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001314:	440b      	add	r3, r1
 8001316:	429a      	cmp	r2, r3
 8001318:	da0d      	bge.n	8001336 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b25a      	sxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001342:	429a      	cmp	r2, r3
 8001344:	dd07      	ble.n	8001356 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001352:	e000      	b.n	8001356 <u8g2_UpdateRefHeight+0xce>
    return;
 8001354:	bf00      	nop
  }  
}
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <u8g2_SetFontPosBaseline+0x1c>)
 8001384:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	08001361 	.word	0x08001361

08001398 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d00b      	beq.n	80013c4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3374      	adds	r3, #116	@ 0x74
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fa97 	bl	80008ec <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff62 	bl	8001288 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	460b      	mov	r3, r1
 80013dc:	80fb      	strh	r3, [r7, #6]
 80013de:	4613      	mov	r3, r2
 80013e0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80013e8:	8afb      	ldrh	r3, [r7, #22]
 80013ea:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	881a      	ldrh	r2, [r3, #0]
 80013f0:	8abb      	ldrh	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80013f6:	8afa      	ldrh	r2, [r7, #22]
 80013f8:	8abb      	ldrh	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d90b      	bls.n	8001416 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80013fe:	8afa      	ldrh	r2, [r7, #22]
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d205      	bcs.n	8001412 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	82bb      	strh	r3, [r7, #20]
      b--;
 800140a:	8abb      	ldrh	r3, [r7, #20]
 800140c:	3b01      	subs	r3, #1
 800140e:	82bb      	strh	r3, [r7, #20]
 8001410:	e001      	b.n	8001416 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001416:	8afa      	ldrh	r2, [r7, #22]
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d301      	bcc.n	8001422 <u8g2_clip_intersection2+0x56>
    return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e01c      	b.n	800145c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001422:	8aba      	ldrh	r2, [r7, #20]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	429a      	cmp	r2, r3
 8001428:	d801      	bhi.n	800142e <u8g2_clip_intersection2+0x62>
    return 0;
 800142a:	2300      	movs	r3, #0
 800142c:	e016      	b.n	800145c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800142e:	8afa      	ldrh	r2, [r7, #22]
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	429a      	cmp	r2, r3
 8001434:	d201      	bcs.n	800143a <u8g2_clip_intersection2+0x6e>
    a = c;
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800143a:	8aba      	ldrh	r2, [r7, #20]
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d901      	bls.n	8001446 <u8g2_clip_intersection2+0x7a>
    b = d;
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8afa      	ldrh	r2, [r7, #22]
 800144a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800144c:	8aba      	ldrh	r2, [r7, #20]
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	8aba      	ldrh	r2, [r7, #20]
 8001458:	801a      	strh	r2, [r3, #0]
  return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	817b      	strh	r3, [r7, #10]
 800147a:	460b      	mov	r3, r1
 800147c:	813b      	strh	r3, [r7, #8]
 800147e:	4613      	mov	r3, r2
 8001480:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001486:	893a      	ldrh	r2, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001490:	88f8      	ldrh	r0, [r7, #6]
 8001492:	893a      	ldrh	r2, [r7, #8]
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4603      	mov	r3, r0
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	47a0      	blx	r4
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af02      	add	r7, sp, #8
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	4608      	mov	r0, r1
 80014b4:	4611      	mov	r1, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	460b      	mov	r3, r1
 80014be:	813b      	strh	r3, [r7, #8]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d072      	beq.n	80015ba <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d91a      	bls.n	8001510 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80014da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d109      	bne.n	80014f6 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80014e2:	897a      	ldrh	r2, [r7, #10]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	817b      	strh	r3, [r7, #10]
	  x++;
 80014ec:	897b      	ldrh	r3, [r7, #10]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	817b      	strh	r3, [r7, #10]
 80014f4:	e00c      	b.n	8001510 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80014f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d108      	bne.n	8001510 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80014fe:	893a      	ldrh	r2, [r7, #8]
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	813b      	strh	r3, [r7, #8]
	  y++;
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	3301      	adds	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800151c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11a      	bne.n	800155a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800152a:	893b      	ldrh	r3, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d83b      	bhi.n	80015a8 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	429a      	cmp	r2, r3
 800153a:	d937      	bls.n	80015ac <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001548:	1db9      	adds	r1, r7, #6
 800154a:	f107 000a 	add.w	r0, r7, #10
 800154e:	f7ff ff3d 	bl	80013cc <u8g2_clip_intersection2>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11a      	bne.n	800158e <u8g2_DrawHVLine+0xe4>
	  return;
 8001558:	e02f      	b.n	80015ba <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	429a      	cmp	r2, r3
 8001564:	d824      	bhi.n	80015b0 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	429a      	cmp	r2, r3
 8001570:	d920      	bls.n	80015b4 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800157e:	1db9      	adds	r1, r7, #6
 8001580:	f107 0008 	add.w	r0, r7, #8
 8001584:	f7ff ff22 	bl	80013cc <u8g2_clip_intersection2>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d014      	beq.n	80015b8 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	689c      	ldr	r4, [r3, #8]
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	893a      	ldrh	r2, [r7, #8]
 8001598:	88f8      	ldrh	r0, [r7, #6]
 800159a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4603      	mov	r3, r0
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	47a0      	blx	r4
 80015a6:	e008      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015a8:	bf00      	nop
 80015aa:	e006      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015ac:	bf00      	nop
 80015ae:	e004      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015b0:	bf00      	nop
 80015b2:	e002      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015b4:	bf00      	nop
 80015b6:	e000      	b.n	80015ba <u8g2_DrawHVLine+0x110>
	  return;
 80015b8:	bf00      	nop
    }
}
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d31a      	bcc.n	8001612 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80015e2:	883a      	ldrh	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d216      	bcs.n	8001616 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d312      	bcc.n	800161a <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d20e      	bcs.n	800161e <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001600:	883a      	ldrh	r2, [r7, #0]
 8001602:	8879      	ldrh	r1, [r7, #2]
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff4d 	bl	80014aa <u8g2_DrawHVLine>
 8001610:	e006      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 8001612:	bf00      	nop
 8001614:	e004      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 8001616:	bf00      	nop
 8001618:	e002      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 800161a:	bf00      	nop
 800161c:	e000      	b.n	8001620 <u8g2_DrawPixel+0x60>
    return;
 800161e:	bf00      	nop
}
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d903      	bls.n	8001648 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001654:	b490      	push	{r4, r7}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4604      	mov	r4, r0
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4623      	mov	r3, r4
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	4603      	mov	r3, r0
 8001668:	80bb      	strh	r3, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]
 800166e:	4613      	mov	r3, r2
 8001670:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20d      	bcs.n	8001696 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800167a:	883a      	ldrh	r2, [r7, #0]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	429a      	cmp	r2, r3
 8001680:	d901      	bls.n	8001686 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001682:	2301      	movs	r3, #1
 8001684:	e014      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	883b      	ldrh	r3, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d901      	bls.n	8001692 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001692:	2300      	movs	r3, #0
 8001694:	e00c      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001696:	883a      	ldrh	r2, [r7, #0]
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	429a      	cmp	r2, r3
 800169c:	d907      	bls.n	80016ae <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	883b      	ldrh	r3, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d901      	bls.n	80016aa <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e002      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80016ae:	2300      	movs	r3, #0
    }
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc90      	pop	{r4, r7}
 80016b8:	4770      	bx	lr

080016ba <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	4608      	mov	r0, r1
 80016c4:	4611      	mov	r1, r2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	817b      	strh	r3, [r7, #10]
 80016cc:	460b      	mov	r3, r1
 80016ce:	813b      	strh	r3, [r7, #8]
 80016d0:	4613      	mov	r3, r2
 80016d2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 80016e0:	8b3b      	ldrh	r3, [r7, #24]
 80016e2:	893a      	ldrh	r2, [r7, #8]
 80016e4:	f7ff ffb6 	bl	8001654 <u8g2_is_intersection_decision_tree>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <u8g2_IsIntersection+0x38>
    return 0; 
 80016ee:	2300      	movs	r3, #0
 80016f0:	e00a      	b.n	8001708 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	897a      	ldrh	r2, [r7, #10]
 8001702:	f7ff ffa7 	bl	8001654 <u8g2_is_intersection_decision_tree>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4603      	mov	r3, r0
 8001720:	817b      	strh	r3, [r7, #10]
 8001722:	460b      	mov	r3, r1
 8001724:	813b      	strh	r3, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800172a:	893b      	ldrh	r3, [r7, #8]
 800172c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800172e:	7efb      	ldrb	r3, [r7, #27]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800173a:	7e3a      	ldrb	r2, [r7, #24]
 800173c:	7efb      	ldrb	r3, [r7, #27]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001752:	2b01      	cmp	r3, #1
 8001754:	d801      	bhi.n	800175a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001756:	7e3b      	ldrb	r3, [r7, #24]
 8001758:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001760:	2b01      	cmp	r3, #1
 8001762:	d001      	beq.n	8001768 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001764:	7e3b      	ldrb	r3, [r7, #24]
 8001766:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001768:	893b      	ldrh	r3, [r7, #8]
 800176a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	7c1b      	ldrb	r3, [r3, #16]
 800177a:	461a      	mov	r2, r3
 800177c:	8afb      	ldrh	r3, [r7, #22]
 800177e:	fb13 f302 	smulbb	r3, r3, r2
 8001782:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001788:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800178a:	8afb      	ldrh	r3, [r7, #22]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001792:	897b      	ldrh	r3, [r7, #10]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800179a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d117      	bne.n	80017d2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	7ebb      	ldrb	r3, [r7, #26]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	7e7b      	ldrb	r3, [r7, #25]
 80017b6:	4053      	eors	r3, r2
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	701a      	strb	r2, [r3, #0]
	ptr++;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
	len--;
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e8      	bne.n	80017a2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80017d0:	e038      	b.n	8001844 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	7ebb      	ldrb	r3, [r7, #26]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	7e7b      	ldrb	r3, [r7, #25]
 80017e6:	4053      	eors	r3, r2
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80017ee:	7efb      	ldrb	r3, [r7, #27]
 80017f0:	3301      	adds	r3, #1
 80017f2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80017f4:	7efb      	ldrb	r3, [r7, #27]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	76fb      	strb	r3, [r7, #27]
      len--;
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	3b01      	subs	r3, #1
 8001800:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001802:	7efb      	ldrb	r3, [r7, #27]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d114      	bne.n	8001832 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800180c:	461a      	mov	r2, r3
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800181a:	2b01      	cmp	r3, #1
 800181c:	d801      	bhi.n	8001822 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001828:	2b01      	cmp	r3, #1
 800182a:	d008      	beq.n	800183e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800182c:	2301      	movs	r3, #1
 800182e:	767b      	strb	r3, [r7, #25]
 8001830:	e005      	b.n	800183e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001832:	7ebb      	ldrb	r3, [r7, #26]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001838:	7e7b      	ldrb	r3, [r7, #25]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1c6      	bne.n	80017d2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001844:	bf00      	nop
 8001846:	3724      	adds	r7, #36	@ 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800186e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001878:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	79fa      	ldrb	r2, [r7, #7]
 80018b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ffa9 	bl	8001850 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fd3a 	bl	8001378 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001928:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	89fa      	ldrh	r2, [r7, #14]
 8001934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	7c1b      	ldrb	r3, [r3, #16]
 800193a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	89fa      	ldrh	r2, [r7, #14]
 8001946:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800194e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	89fa      	ldrh	r2, [r7, #14]
 800195a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001962:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800196c:	4413      	add	r3, r2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	7c52      	ldrb	r2, [r2, #17]
 8001972:	4293      	cmp	r3, r2
 8001974:	dd07      	ble.n	8001986 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	7c5b      	ldrb	r3, [r3, #17]
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	4413      	add	r3, r2
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	8a9a      	ldrh	r2, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	8ada      	ldrh	r2, [r3, #22]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4603      	mov	r3, r0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fe5e 	bl	80016ba <u8g2_IsIntersection>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d104      	bne.n	8001a0e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001a0c:	e03b      	b.n	8001a86 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d205      	bcs.n	8001a32 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d905      	bls.n	8001a4e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d205      	bcs.n	8001a6a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d905      	bls.n	8001a86 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff3c 	bl	8001914 <u8g2_update_dimension_common>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff7b 	bl	80019d4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af02      	add	r7, sp, #8
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4603      	mov	r3, r0
 8001af6:	817b      	strh	r3, [r7, #10]
 8001af8:	460b      	mov	r3, r1
 8001afa:	813b      	strh	r3, [r7, #8]
 8001afc:	4613      	mov	r3, r2
 8001afe:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001b00:	88f8      	ldrh	r0, [r7, #6]
 8001b02:	893a      	ldrh	r2, [r7, #8]
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	7e3b      	ldrb	r3, [r7, #24]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff fcab 	bl	8001468 <u8g2_draw_hv_line_2dir>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <u8x8_ascii_next+0x18>
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d102      	bne.n	8001b54 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b52:	e001      	b.n	8001b58 <u8x8_ascii_next+0x22>
  return b;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	b29b      	uxth	r3, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691c      	ldr	r4, [r3, #16]
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2120      	movs	r1, #32
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	47a0      	blx	r4
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	460b      	mov	r3, r1
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	691c      	ldr	r4, [r3, #16]
 8001b9a:	7afa      	ldrb	r2, [r7, #11]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2117      	movs	r1, #23
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	47a0      	blx	r4
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}

08001bae <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001bba:	1cfb      	adds	r3, r7, #3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffe1 	bl	8001b88 <u8x8_byte_SendBytes>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68dc      	ldr	r4, [r3, #12]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	2300      	movs	r3, #0
 8001be4:	2115      	movs	r1, #21
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	47a0      	blx	r4
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68dc      	ldr	r4, [r3, #12]
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2116      	movs	r1, #22
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	47a0      	blx	r4
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}

08001c18 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	460b      	mov	r3, r1
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	68dc      	ldr	r4, [r3, #12]
 8001c2a:	7afa      	ldrb	r2, [r7, #11]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2117      	movs	r1, #23
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	47a0      	blx	r4
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}

08001c3e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001c3e:	b590      	push	{r4, r7, lr}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68dc      	ldr	r4, [r3, #12]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2118      	movs	r1, #24
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	47a0      	blx	r4
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68dc      	ldr	r4, [r3, #12]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2119      	movs	r1, #25
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	47a0      	blx	r4
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}

08001c7e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001c7e:	b590      	push	{r4, r7, lr}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	73fb      	strb	r3, [r7, #15]
    data++;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c98:	d031      	beq.n	8001cfe <u8x8_cad_SendSequence+0x80>
 8001c9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c9c:	dc3d      	bgt.n	8001d1a <u8x8_cad_SendSequence+0x9c>
 8001c9e:	2b19      	cmp	r3, #25
 8001ca0:	dc3b      	bgt.n	8001d1a <u8x8_cad_SendSequence+0x9c>
 8001ca2:	2b18      	cmp	r3, #24
 8001ca4:	da23      	bge.n	8001cee <u8x8_cad_SendSequence+0x70>
 8001ca6:	2b16      	cmp	r3, #22
 8001ca8:	dc02      	bgt.n	8001cb0 <u8x8_cad_SendSequence+0x32>
 8001caa:	2b15      	cmp	r3, #21
 8001cac:	da03      	bge.n	8001cb6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001cae:	e034      	b.n	8001d1a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001cb0:	2b17      	cmp	r3, #23
 8001cb2:	d00e      	beq.n	8001cd2 <u8x8_cad_SendSequence+0x54>
	return;
 8001cb4:	e031      	b.n	8001d1a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68dc      	ldr	r4, [r3, #12]
 8001cc0:	7bba      	ldrb	r2, [r7, #14]
 8001cc2:	7bf9      	ldrb	r1, [r7, #15]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	47a0      	blx	r4
	  data++;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	603b      	str	r3, [r7, #0]
	  break;
 8001cd0:	e022      	b.n	8001d18 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001cd8:	f107 030e 	add.w	r3, r7, #14
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2101      	movs	r1, #1
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff99 	bl	8001c18 <u8x8_cad_SendData>
	  data++;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	603b      	str	r3, [r7, #0]
	  break;
 8001cec:	e014      	b.n	8001d18 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68dc      	ldr	r4, [r3, #12]
 8001cf2:	7bf9      	ldrb	r1, [r7, #15]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	47a0      	blx	r4
	  break;
 8001cfc:	e00c      	b.n	8001d18 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	461a      	mov	r2, r3
 8001d08:	2129      	movs	r1, #41	@ 0x29
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9d1 	bl	80020b2 <u8x8_gpio_call>
	  data++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
	  break;
 8001d16:	bf00      	nop
    cmd = *data;
 8001d18:	e7b6      	b.n	8001c88 <u8x8_cad_SendSequence+0xa>
	return;
 8001d1a:	bf00      	nop
    }
  }
}
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
	...

08001d24 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	72fb      	strb	r3, [r7, #11]
 8001d32:	4613      	mov	r3, r2
 8001d34:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	3b14      	subs	r3, #20
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d82f      	bhi.n	8001d9e <u8x8_cad_001+0x7a>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <u8x8_cad_001+0x20>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d8d 	.word	0x08001d8d
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d71 	.word	0x08001d71
 8001d50:	08001d85 	.word	0x08001d85
 8001d54:	08001d8d 	.word	0x08001d8d
 8001d58:	08001d8d 	.word	0x08001d8d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff ff00 	bl	8001b64 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d64:	7abb      	ldrb	r3, [r7, #10]
 8001d66:	4619      	mov	r1, r3
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff ff20 	bl	8001bae <u8x8_byte_SendByte>
      break;
 8001d6e:	e018      	b.n	8001da2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001d70:	2100      	movs	r1, #0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fef6 	bl	8001b64 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d78:	7abb      	ldrb	r3, [r7, #10]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff ff16 	bl	8001bae <u8x8_byte_SendByte>
      break;
 8001d82:	e00e      	b.n	8001da2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001d84:	2101      	movs	r1, #1
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff feec 	bl	8001b64 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691c      	ldr	r4, [r3, #16]
 8001d90:	7aba      	ldrb	r2, [r7, #10]
 8001d92:	7af9      	ldrb	r1, [r7, #11]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	47a0      	blx	r4
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	e002      	b.n	8001da4 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <u8x8_cad_001+0x80>
  }
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	72fb      	strb	r3, [r7, #11]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d006      	beq.n	8001dd2 <u8x8_d_ssd1309_generic+0x26>
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	dc63      	bgt.n	8001e90 <u8x8_d_ssd1309_generic+0xe4>
 8001dc8:	2b0b      	cmp	r3, #11
 8001dca:	d044      	beq.n	8001e56 <u8x8_d_ssd1309_generic+0xaa>
 8001dcc:	2b0e      	cmp	r3, #14
 8001dce:	d04f      	beq.n	8001e70 <u8x8_d_ssd1309_generic+0xc4>
 8001dd0:	e05e      	b.n	8001e90 <u8x8_d_ssd1309_generic+0xe4>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ff33 	bl	8001c3e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	795b      	ldrb	r3, [r3, #5]
 8001ddc:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	4413      	add	r3, r2
 8001dee:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fee6 	bl	8001bd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fede 	bl	8001bd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	799b      	ldrb	r3, [r3, #6]
 8001e18:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4619      	mov	r1, r3
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fed5 	bl	8001bd0 <u8x8_cad_SendCmd>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8001e32:	7dbb      	ldrb	r3, [r7, #22]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff feeb 	bl	8001c18 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1eb      	bne.n	8001e26 <u8x8_d_ssd1309_generic+0x7a>
      
      u8x8_cad_EndTransfer(u8x8);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff ff05 	bl	8001c5e <u8x8_cad_EndTransfer>
      break;
 8001e54:	e01e      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001e56:	7abb      	ldrb	r3, [r7, #10]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <u8x8_d_ssd1309_generic+0xba>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 8001e5c:	4910      	ldr	r1, [pc, #64]	@ (8001ea0 <u8x8_d_ssd1309_generic+0xf4>)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff0d 	bl	8001c7e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 8001e64:	e016      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8001e66:	490f      	ldr	r1, [pc, #60]	@ (8001ea4 <u8x8_d_ssd1309_generic+0xf8>)
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff ff08 	bl	8001c7e <u8x8_cad_SendSequence>
      break;
 8001e6e:	e011      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fee4 	bl	8001c3e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001e76:	2181      	movs	r1, #129	@ 0x81
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fea9 	bl	8001bd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8001e7e:	7abb      	ldrb	r3, [r7, #10]
 8001e80:	4619      	mov	r1, r3
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff feb6 	bl	8001bf4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fee8 	bl	8001c5e <u8x8_cad_EndTransfer>
      break;
 8001e8e:	e001      	b.n	8001e94 <u8x8_d_ssd1309_generic+0xe8>
#endif
    default:
      return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <u8x8_d_ssd1309_generic+0xea>
  }
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08008c3c 	.word	0x08008c3c
 8001ea4:	08008c44 	.word	0x08008c44

08001ea8 <u8x8_d_ssd1309_128x64_noname2>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1309_128x64_noname2(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	72fb      	strb	r3, [r7, #11]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8001eba:	7aba      	ldrb	r2, [r7, #10]
 8001ebc:	7af9      	ldrb	r1, [r7, #11]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff ff73 	bl	8001dac <u8x8_d_ssd1309_generic>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <u8x8_d_ssd1309_128x64_noname2+0x28>
    return 1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <u8x8_d_ssd1309_128x64_noname2+0x8e>
  
  switch(msg)
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	2b0d      	cmp	r3, #13
 8001ed4:	d006      	beq.n	8001ee4 <u8x8_d_ssd1309_128x64_noname2+0x3c>
 8001ed6:	2b0d      	cmp	r3, #13
 8001ed8:	dc2a      	bgt.n	8001f30 <u8x8_d_ssd1309_128x64_noname2+0x88>
 8001eda:	2b09      	cmp	r3, #9
 8001edc:	d023      	beq.n	8001f26 <u8x8_d_ssd1309_128x64_noname2+0x7e>
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d019      	beq.n	8001f16 <u8x8_d_ssd1309_128x64_noname2+0x6e>
 8001ee2:	e025      	b.n	8001f30 <u8x8_d_ssd1309_128x64_noname2+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8001ee4:	7abb      	ldrb	r3, [r7, #10]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10a      	bne.n	8001f00 <u8x8_d_ssd1309_128x64_noname2+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8001eea:	4915      	ldr	r1, [pc, #84]	@ (8001f40 <u8x8_d_ssd1309_128x64_noname2+0x98>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fec6 	bl	8001c7e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	7c9a      	ldrb	r2, [r3, #18]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8001efe:	e019      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8001f00:	4910      	ldr	r1, [pc, #64]	@ (8001f44 <u8x8_d_ssd1309_128x64_noname2+0x9c>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff febb 	bl	8001c7e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	7cda      	ldrb	r2, [r3, #19]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8001f14:	e00e      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f82e 	bl	8001f78 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8001f1c:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <u8x8_d_ssd1309_128x64_noname2+0xa0>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff fead 	bl	8001c7e <u8x8_cad_SendSequence>
      break;
 8001f24:	e006      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname2_display_info);
 8001f26:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <u8x8_d_ssd1309_128x64_noname2+0xa4>)
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f811 	bl	8001f50 <u8x8_d_helper_display_setup_memory>
      break;
 8001f2e:	e001      	b.n	8001f34 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    default:
      return 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <u8x8_d_ssd1309_128x64_noname2+0x8e>
  }
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	08008c4c 	.word	0x08008c4c
 8001f44:	08008c54 	.word	0x08008c54
 8001f48:	08008c74 	.word	0x08008c74
 8001f4c:	08008c5c 	.word	0x08008c5c

08001f50 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	7c9a      	ldrb	r2, [r3, #18]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695c      	ldr	r4, [r3, #20]
 8001f84:	2300      	movs	r3, #0
 8001f86:	2200      	movs	r2, #0
 8001f88:	2128      	movs	r1, #40	@ 0x28
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68dc      	ldr	r4, [r3, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2200      	movs	r2, #0
 8001f96:	2114      	movs	r1, #20
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	214b      	movs	r1, #75	@ 0x4b
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f886 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	791b      	ldrb	r3, [r3, #4]
 8001fac:	461a      	mov	r2, r3
 8001fae:	2129      	movs	r1, #41	@ 0x29
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f87e 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	214b      	movs	r1, #75	@ 0x4b
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f879 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2129      	movs	r1, #41	@ 0x29
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f871 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	214b      	movs	r1, #75	@ 0x4b
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f86c 	bl	80020b2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	795b      	ldrb	r3, [r3, #5]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2129      	movs	r1, #41	@ 0x29
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f864 	bl	80020b2 <u8x8_gpio_call>
}    
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}

08001ff2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001ff2:	b590      	push	{r4, r7, lr}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	4603      	mov	r3, r0
 8002002:	70fb      	strb	r3, [r7, #3]
 8002004:	460b      	mov	r3, r1
 8002006:	70bb      	strb	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002010:	78bb      	ldrb	r3, [r7, #2]
 8002012:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689c      	ldr	r4, [r3, #8]
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	2201      	movs	r2, #1
 8002026:	210f      	movs	r1, #15
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	47a0      	blx	r4
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}

08002036 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002036:	b590      	push	{r4, r7, lr}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689c      	ldr	r4, [r3, #8]
 8002042:	2300      	movs	r3, #0
 8002044:	2200      	movs	r2, #0
 8002046:	2109      	movs	r1, #9
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	47a0      	blx	r4
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689c      	ldr	r4, [r3, #8]
 8002060:	2300      	movs	r3, #0
 8002062:	2200      	movs	r2, #0
 8002064:	210a      	movs	r1, #10
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}

08002072 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002072:	b590      	push	{r4, r7, lr}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689c      	ldr	r4, [r3, #8]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	2300      	movs	r3, #0
 8002086:	210b      	movs	r1, #11
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	47a0      	blx	r4
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689c      	ldr	r4, [r3, #8]
 80020a0:	2300      	movs	r3, #0
 80020a2:	2200      	movs	r2, #0
 80020a4:	2110      	movs	r1, #16
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	47a0      	blx	r4
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd90      	pop	{r4, r7, pc}

080020b2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80020b2:	b590      	push	{r4, r7, lr}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
 80020be:	4613      	mov	r3, r2
 80020c0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695c      	ldr	r4, [r3, #20]
 80020c6:	78ba      	ldrb	r2, [r7, #2]
 80020c8:	78f9      	ldrb	r1, [r7, #3]
 80020ca:	2300      	movs	r3, #0
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	47a0      	blx	r4
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}

080020d8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	72fb      	strb	r3, [r7, #11]
 80020e6:	4613      	mov	r3, r2
 80020e8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 800210a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 8002110:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 8002116:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <u8x8_SetupDefaults+0x58>)
 800211c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	22ff      	movs	r2, #255	@ 0xff
 8002138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	22ff      	movs	r2, #255	@ 0xff
 8002140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	080020d9 	.word	0x080020d9

08002154 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff ffc8 	bl	80020f8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff ff58 	bl	8002036 <u8x8_SetupMemory>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <handleInput>:
/**
  * @brief Handle Input Function
  * @param bool retTap (to determin if the function returns the tapped value or pressed value)
  * @retval pinState struct
  */
pinState handleInput(t_p Tap_Press){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
	button_inputs[up].last = button_inputs[up].current;
 800219c:	4b9c      	ldr	r3, [pc, #624]	@ (8002410 <handleInput+0x280>)
 800219e:	799a      	ldrb	r2, [r3, #6]
 80021a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002410 <handleInput+0x280>)
 80021a2:	71da      	strb	r2, [r3, #7]
	button_inputs[up].current = HAL_GPIO_ReadPin(Up_BTN_GPIO_Port,Up_BTN_Pin);
 80021a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021a8:	489a      	ldr	r0, [pc, #616]	@ (8002414 <handleInput+0x284>)
 80021aa:	f002 fa7f 	bl	80046ac <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b97      	ldr	r3, [pc, #604]	@ (8002410 <handleInput+0x280>)
 80021b4:	719a      	strb	r2, [r3, #6]
	button_inputs[up].isTapped = button_inputs[up].current && !button_inputs[up].last;
 80021b6:	4b96      	ldr	r3, [pc, #600]	@ (8002410 <handleInput+0x280>)
 80021b8:	799b      	ldrb	r3, [r3, #6]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <handleInput+0x3a>
 80021be:	4b94      	ldr	r3, [pc, #592]	@ (8002410 <handleInput+0x280>)
 80021c0:	79db      	ldrb	r3, [r3, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <handleInput+0x3a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <handleInput+0x3c>
 80021ca:	2300      	movs	r3, #0
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <handleInput+0x280>)
 80021d4:	721a      	strb	r2, [r3, #8]
	button_inputs[up].isPressed = button_inputs[up].current && button_inputs[up].last;
 80021d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002410 <handleInput+0x280>)
 80021d8:	799b      	ldrb	r3, [r3, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <handleInput+0x5a>
 80021de:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <handleInput+0x280>)
 80021e0:	79db      	ldrb	r3, [r3, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <handleInput+0x5a>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <handleInput+0x5c>
 80021ea:	2300      	movs	r3, #0
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b87      	ldr	r3, [pc, #540]	@ (8002410 <handleInput+0x280>)
 80021f4:	725a      	strb	r2, [r3, #9]

	button_inputs[down].last = button_inputs[down].current;
 80021f6:	4b86      	ldr	r3, [pc, #536]	@ (8002410 <handleInput+0x280>)
 80021f8:	7ada      	ldrb	r2, [r3, #11]
 80021fa:	4b85      	ldr	r3, [pc, #532]	@ (8002410 <handleInput+0x280>)
 80021fc:	731a      	strb	r2, [r3, #12]
	button_inputs[down].current = HAL_GPIO_ReadPin(Down_BTN_GPIO_Port,Down_BTN_Pin);
 80021fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002202:	4885      	ldr	r0, [pc, #532]	@ (8002418 <handleInput+0x288>)
 8002204:	f002 fa52 	bl	80046ac <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <handleInput+0x280>)
 800220e:	72da      	strb	r2, [r3, #11]
	button_inputs[down].isTapped = button_inputs[down].current && !button_inputs[down].last;
 8002210:	4b7f      	ldr	r3, [pc, #508]	@ (8002410 <handleInput+0x280>)
 8002212:	7adb      	ldrb	r3, [r3, #11]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <handleInput+0x94>
 8002218:	4b7d      	ldr	r3, [pc, #500]	@ (8002410 <handleInput+0x280>)
 800221a:	7b1b      	ldrb	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <handleInput+0x94>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <handleInput+0x96>
 8002224:	2300      	movs	r3, #0
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b78      	ldr	r3, [pc, #480]	@ (8002410 <handleInput+0x280>)
 800222e:	735a      	strb	r2, [r3, #13]
	button_inputs[down].isPressed = button_inputs[down].current && button_inputs[down].last;
 8002230:	4b77      	ldr	r3, [pc, #476]	@ (8002410 <handleInput+0x280>)
 8002232:	7adb      	ldrb	r3, [r3, #11]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <handleInput+0xb4>
 8002238:	4b75      	ldr	r3, [pc, #468]	@ (8002410 <handleInput+0x280>)
 800223a:	7b1b      	ldrb	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <handleInput+0xb4>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <handleInput+0xb6>
 8002244:	2300      	movs	r3, #0
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <handleInput+0x280>)
 800224e:	739a      	strb	r2, [r3, #14]

	button_inputs[left].last = button_inputs[left].current;
 8002250:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <handleInput+0x280>)
 8002252:	7c1a      	ldrb	r2, [r3, #16]
 8002254:	4b6e      	ldr	r3, [pc, #440]	@ (8002410 <handleInput+0x280>)
 8002256:	745a      	strb	r2, [r3, #17]
	button_inputs[left].current = HAL_GPIO_ReadPin(Left_BTN_GPIO_Port,Left_BTN_Pin);
 8002258:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800225c:	486e      	ldr	r0, [pc, #440]	@ (8002418 <handleInput+0x288>)
 800225e:	f002 fa25 	bl	80046ac <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b6a      	ldr	r3, [pc, #424]	@ (8002410 <handleInput+0x280>)
 8002268:	741a      	strb	r2, [r3, #16]
	button_inputs[left].isTapped = button_inputs[left].current && !button_inputs[left].last;
 800226a:	4b69      	ldr	r3, [pc, #420]	@ (8002410 <handleInput+0x280>)
 800226c:	7c1b      	ldrb	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <handleInput+0xee>
 8002272:	4b67      	ldr	r3, [pc, #412]	@ (8002410 <handleInput+0x280>)
 8002274:	7c5b      	ldrb	r3, [r3, #17]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <handleInput+0xee>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <handleInput+0xf0>
 800227e:	2300      	movs	r3, #0
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b62      	ldr	r3, [pc, #392]	@ (8002410 <handleInput+0x280>)
 8002288:	749a      	strb	r2, [r3, #18]
	button_inputs[left].isPressed = button_inputs[left].current && button_inputs[left].last;
 800228a:	4b61      	ldr	r3, [pc, #388]	@ (8002410 <handleInput+0x280>)
 800228c:	7c1b      	ldrb	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <handleInput+0x10e>
 8002292:	4b5f      	ldr	r3, [pc, #380]	@ (8002410 <handleInput+0x280>)
 8002294:	7c5b      	ldrb	r3, [r3, #17]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <handleInput+0x10e>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <handleInput+0x110>
 800229e:	2300      	movs	r3, #0
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002410 <handleInput+0x280>)
 80022a8:	74da      	strb	r2, [r3, #19]

	button_inputs[right].last = button_inputs[right].current;
 80022aa:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <handleInput+0x280>)
 80022ac:	7d5a      	ldrb	r2, [r3, #21]
 80022ae:	4b58      	ldr	r3, [pc, #352]	@ (8002410 <handleInput+0x280>)
 80022b0:	759a      	strb	r2, [r3, #22]
	button_inputs[right].current = HAL_GPIO_ReadPin(Right_BTN_GPIO_Port,Right_BTN_Pin);
 80022b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022b6:	4858      	ldr	r0, [pc, #352]	@ (8002418 <handleInput+0x288>)
 80022b8:	f002 f9f8 	bl	80046ac <HAL_GPIO_ReadPin>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <handleInput+0x280>)
 80022c2:	755a      	strb	r2, [r3, #21]
	button_inputs[right].isTapped = button_inputs[right].current && !button_inputs[right].last;
 80022c4:	4b52      	ldr	r3, [pc, #328]	@ (8002410 <handleInput+0x280>)
 80022c6:	7d5b      	ldrb	r3, [r3, #21]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <handleInput+0x148>
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <handleInput+0x280>)
 80022ce:	7d9b      	ldrb	r3, [r3, #22]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <handleInput+0x148>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <handleInput+0x14a>
 80022d8:	2300      	movs	r3, #0
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <handleInput+0x280>)
 80022e2:	75da      	strb	r2, [r3, #23]
	button_inputs[right].isPressed = button_inputs[right].current && button_inputs[right].last;
 80022e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002410 <handleInput+0x280>)
 80022e6:	7d5b      	ldrb	r3, [r3, #21]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <handleInput+0x168>
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <handleInput+0x280>)
 80022ee:	7d9b      	ldrb	r3, [r3, #22]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <handleInput+0x168>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <handleInput+0x16a>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <handleInput+0x280>)
 8002302:	761a      	strb	r2, [r3, #24]

	button_inputs[select].last = button_inputs[select].current;
 8002304:	4b42      	ldr	r3, [pc, #264]	@ (8002410 <handleInput+0x280>)
 8002306:	7e9a      	ldrb	r2, [r3, #26]
 8002308:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <handleInput+0x280>)
 800230a:	76da      	strb	r2, [r3, #27]
	button_inputs[select].current = HAL_GPIO_ReadPin(Select_BTN_GPIO_Port,Select_BTN_Pin);
 800230c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002310:	4840      	ldr	r0, [pc, #256]	@ (8002414 <handleInput+0x284>)
 8002312:	f002 f9cb 	bl	80046ac <HAL_GPIO_ReadPin>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <handleInput+0x280>)
 800231c:	769a      	strb	r2, [r3, #26]
	button_inputs[select].isTapped = button_inputs[select].current && !button_inputs[select].last;
 800231e:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <handleInput+0x280>)
 8002320:	7e9b      	ldrb	r3, [r3, #26]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <handleInput+0x1a2>
 8002326:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <handleInput+0x280>)
 8002328:	7edb      	ldrb	r3, [r3, #27]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <handleInput+0x1a2>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <handleInput+0x1a4>
 8002332:	2300      	movs	r3, #0
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <handleInput+0x280>)
 800233c:	771a      	strb	r2, [r3, #28]
	button_inputs[select].isPressed = button_inputs[select].current && button_inputs[select].last;
 800233e:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <handleInput+0x280>)
 8002340:	7e9b      	ldrb	r3, [r3, #26]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <handleInput+0x1c2>
 8002346:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <handleInput+0x280>)
 8002348:	7edb      	ldrb	r3, [r3, #27]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <handleInput+0x1c2>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <handleInput+0x1c4>
 8002352:	2300      	movs	r3, #0
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <handleInput+0x280>)
 800235c:	775a      	strb	r2, [r3, #29]

	button_inputs[back].last = button_inputs[back].current;
 800235e:	4b2c      	ldr	r3, [pc, #176]	@ (8002410 <handleInput+0x280>)
 8002360:	7fda      	ldrb	r2, [r3, #31]
 8002362:	4b2b      	ldr	r3, [pc, #172]	@ (8002410 <handleInput+0x280>)
 8002364:	f883 2020 	strb.w	r2, [r3, #32]
	button_inputs[back].current = HAL_GPIO_ReadPin(Back_BTN_GPIO_Port,Back_BTN_Pin);
 8002368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800236c:	4829      	ldr	r0, [pc, #164]	@ (8002414 <handleInput+0x284>)
 800236e:	f002 f99d 	bl	80046ac <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <handleInput+0x280>)
 8002378:	77da      	strb	r2, [r3, #31]
	button_inputs[back].isTapped = button_inputs[back].current && !button_inputs[back].last;
 800237a:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <handleInput+0x280>)
 800237c:	7fdb      	ldrb	r3, [r3, #31]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <handleInput+0x200>
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <handleInput+0x280>)
 8002384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <handleInput+0x200>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <handleInput+0x202>
 8002390:	2300      	movs	r3, #0
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <handleInput+0x280>)
 800239a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	button_inputs[back].isPressed = button_inputs[back].current && button_inputs[back].last;
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <handleInput+0x280>)
 80023a0:	7fdb      	ldrb	r3, [r3, #31]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <handleInput+0x224>
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <handleInput+0x280>)
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <handleInput+0x224>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <handleInput+0x226>
 80023b4:	2300      	movs	r3, #0
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <handleInput+0x280>)
 80023be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	if(Tap_Press==Tap){
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d155      	bne.n	8002474 <handleInput+0x2e4>
		if(button_inputs[up].isTapped){
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <handleInput+0x280>)
 80023ca:	7a1b      	ldrb	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <handleInput+0x250>
			return button_inputs[up];//UP
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <handleInput+0x280>)
 80023d4:	3305      	adds	r3, #5
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	6011      	str	r1, [r2, #0]
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	7113      	strb	r3, [r2, #4]
 80023de:	e098      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[down].isTapped){
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <handleInput+0x280>)
 80023e2:	7b5b      	ldrb	r3, [r3, #13]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <handleInput+0x268>
			return button_inputs[down];//DOWN
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <handleInput+0x280>)
 80023ec:	330a      	adds	r3, #10
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	6011      	str	r1, [r2, #0]
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	7113      	strb	r3, [r2, #4]
 80023f6:	e08c      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[left].isTapped){
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <handleInput+0x280>)
 80023fa:	7c9b      	ldrb	r3, [r3, #18]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <handleInput+0x28c>
			return button_inputs[left];//LEFT
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <handleInput+0x280>)
 8002404:	330f      	adds	r3, #15
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	7113      	strb	r3, [r2, #4]
 800240e:	e080      	b.n	8002512 <handleInput+0x382>
 8002410:	20000060 	.word	0x20000060
 8002414:	40021400 	.word	0x40021400
 8002418:	40021000 	.word	0x40021000
		}
		else if(button_inputs[right].isTapped){
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <handleInput+0x38c>)
 800241e:	7ddb      	ldrb	r3, [r3, #23]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <handleInput+0x2a4>
			return button_inputs[right];//RIGHT
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <handleInput+0x38c>)
 8002428:	3314      	adds	r3, #20
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	6010      	str	r0, [r2, #0]
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	7113      	strb	r3, [r2, #4]
 8002432:	e06e      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[select].isTapped){
 8002434:	4b39      	ldr	r3, [pc, #228]	@ (800251c <handleInput+0x38c>)
 8002436:	7f1b      	ldrb	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <handleInput+0x2bc>
			return button_inputs[select];//SELECT
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4b37      	ldr	r3, [pc, #220]	@ (800251c <handleInput+0x38c>)
 8002440:	3319      	adds	r3, #25
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	791b      	ldrb	r3, [r3, #4]
 8002448:	7113      	strb	r3, [r2, #4]
 800244a:	e062      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[back].isTapped){
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <handleInput+0x38c>)
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <handleInput+0x2d6>
			return button_inputs[back];//BACK
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4b30      	ldr	r3, [pc, #192]	@ (800251c <handleInput+0x38c>)
 800245a:	331e      	adds	r3, #30
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	6011      	str	r1, [r2, #0]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	7113      	strb	r3, [r2, #4]
 8002464:	e055      	b.n	8002512 <handleInput+0x382>
		}
		else{
			return button_inputs[null];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2c      	ldr	r2, [pc, #176]	@ (800251c <handleInput+0x38c>)
 800246a:	6810      	ldr	r0, [r2, #0]
 800246c:	6018      	str	r0, [r3, #0]
 800246e:	7912      	ldrb	r2, [r2, #4]
 8002470:	711a      	strb	r2, [r3, #4]
 8002472:	e04e      	b.n	8002512 <handleInput+0x382>
		}
	}
	else{
		if(button_inputs[up].isPressed){
 8002474:	4b29      	ldr	r3, [pc, #164]	@ (800251c <handleInput+0x38c>)
 8002476:	7a5b      	ldrb	r3, [r3, #9]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <handleInput+0x2fc>
			return button_inputs[up];//UP
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <handleInput+0x38c>)
 8002480:	3305      	adds	r3, #5
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	7113      	strb	r3, [r2, #4]
 800248a:	e042      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[down].isPressed){
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <handleInput+0x38c>)
 800248e:	7b9b      	ldrb	r3, [r3, #14]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <handleInput+0x314>
			return button_inputs[down];//DOWN
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <handleInput+0x38c>)
 8002498:	330a      	adds	r3, #10
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	6011      	str	r1, [r2, #0]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	7113      	strb	r3, [r2, #4]
 80024a2:	e036      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[left].isPressed){
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <handleInput+0x38c>)
 80024a6:	7cdb      	ldrb	r3, [r3, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <handleInput+0x32c>
			return button_inputs[left];//LEFT
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <handleInput+0x38c>)
 80024b0:	330f      	adds	r3, #15
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	7113      	strb	r3, [r2, #4]
 80024ba:	e02a      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[right].isPressed){
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <handleInput+0x38c>)
 80024be:	7e1b      	ldrb	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <handleInput+0x344>
			return button_inputs[right];//RIGHT
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <handleInput+0x38c>)
 80024c8:	3314      	adds	r3, #20
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	6010      	str	r0, [r2, #0]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	7113      	strb	r3, [r2, #4]
 80024d2:	e01e      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[select].isPressed){
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <handleInput+0x38c>)
 80024d6:	7f5b      	ldrb	r3, [r3, #29]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <handleInput+0x35c>
			return button_inputs[select];//SELECT
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <handleInput+0x38c>)
 80024e0:	3319      	adds	r3, #25
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	7113      	strb	r3, [r2, #4]
 80024ea:	e012      	b.n	8002512 <handleInput+0x382>
		}
		else if(button_inputs[back].isPressed){
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <handleInput+0x38c>)
 80024ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <handleInput+0x376>
			return button_inputs[back];//BACK
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <handleInput+0x38c>)
 80024fa:	331e      	adds	r3, #30
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	6011      	str	r1, [r2, #0]
 8002500:	791b      	ldrb	r3, [r3, #4]
 8002502:	7113      	strb	r3, [r2, #4]
 8002504:	e005      	b.n	8002512 <handleInput+0x382>
		}
		else{
			return button_inputs[null];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <handleInput+0x38c>)
 800250a:	6810      	ldr	r0, [r2, #0]
 800250c:	6018      	str	r0, [r3, #0]
 800250e:	7912      	ldrb	r2, [r2, #4]
 8002510:	711a      	strb	r2, [r3, #4]
		}
	}
	//TODO Later: USE TIMER, if still isPressed after timer expires, then move
}
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000060 	.word	0x20000060

08002520 <handle_Windows>:
  * @brief Handle Window Function
  * @param0 u8g2_t* u8g2 (u8g2 struct instance)
  *
  * @retval None
  */
void handle_Windows(u8g2_t* u8g2){
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	switch(currWindow){
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <handle_Windows+0x78>)
 800252a:	f993 3000 	ldrsb.w	r3, [r3]
 800252e:	3301      	adds	r3, #1
 8002530:	2b06      	cmp	r3, #6
 8002532:	d82d      	bhi.n	8002590 <handle_Windows+0x70>
 8002534:	a201      	add	r2, pc, #4	@ (adr r2, 800253c <handle_Windows+0x1c>)
 8002536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253a:	bf00      	nop
 800253c:	08002559 	.word	0x08002559
 8002540:	08002569 	.word	0x08002569
 8002544:	08002589 	.word	0x08002589
 8002548:	08002579 	.word	0x08002579
 800254c:	08002571 	.word	0x08002571
 8002550:	08002561 	.word	0x08002561
 8002554:	08002581 	.word	0x08002581
	case menu:
		window_Menu(u8g2);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f81f 	bl	800259c <window_Menu>
		break;
 800255e:	e017      	b.n	8002590 <handle_Windows+0x70>
	case game:
		window_Game(u8g2);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f939 	bl	80027d8 <window_Game>
		break;
 8002566:	e013      	b.n	8002590 <handle_Windows+0x70>
	case idle:
		window_Idle(u8g2);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9b5 	bl	80028d8 <window_Idle>
		break;
 800256e:	e00f      	b.n	8002590 <handle_Windows+0x70>
	case nfc:
		window_NFC(u8g2);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa69 	bl	8002a48 <window_NFC>
		break;
 8002576:	e00b      	b.n	8002590 <handle_Windows+0x70>
	case rfid:
		window_RFID(u8g2);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 faa7 	bl	8002acc <window_RFID>
		break;
 800257e:	e007      	b.n	8002590 <handle_Windows+0x70>
	case settings:
		window_Settings(u8g2);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fae5 	bl	8002b50 <window_Settings>
		break;
 8002586:	e003      	b.n	8002590 <handle_Windows+0x70>
	case subghz:
		window_Subghz(u8g2);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb23 	bl	8002bd4 <window_Subghz>
		break;
 800258e:	bf00      	nop
	}
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000083 	.word	0x20000083

0800259c <window_Menu>:
  * @retval None
  */
int8_t item_sel=0;
int8_t item_prev=5;
int8_t item_next=1;
void window_Menu(u8g2_t* u8g2){
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]

	button input = handleInput(Tap).direction;
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fdf0 	bl	8002190 <handleInput>
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	73fb      	strb	r3, [r7, #15]
	switch(input){
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d82a      	bhi.n	8002610 <window_Menu+0x74>
 80025ba:	a201      	add	r2, pc, #4	@ (adr r2, 80025c0 <window_Menu+0x24>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	08002611 	.word	0x08002611
 80025c4:	080025dd 	.word	0x080025dd
 80025c8:	080025f1 	.word	0x080025f1
 80025cc:	08002611 	.word	0x08002611
 80025d0:	08002611 	.word	0x08002611
 80025d4:	08002605 	.word	0x08002605
 80025d8:	08002611 	.word	0x08002611
	case up:
		//isTapped, else isPushed
		item_sel--;
 80025dc:	4b75      	ldr	r3, [pc, #468]	@ (80027b4 <window_Menu+0x218>)
 80025de:	f993 3000 	ldrsb.w	r3, [r3]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <window_Menu+0x218>)
 80025ec:	701a      	strb	r2, [r3, #0]
		break;
 80025ee:	e00f      	b.n	8002610 <window_Menu+0x74>
	case down:
		item_sel++;
 80025f0:	4b70      	ldr	r3, [pc, #448]	@ (80027b4 <window_Menu+0x218>)
 80025f2:	f993 3000 	ldrsb.w	r3, [r3]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	b25a      	sxtb	r2, r3
 80025fe:	4b6d      	ldr	r3, [pc, #436]	@ (80027b4 <window_Menu+0x218>)
 8002600:	701a      	strb	r2, [r3, #0]
		break;
 8002602:	e005      	b.n	8002610 <window_Menu+0x74>
	case select:
		//Enter new window
		currWindow=item_sel;
 8002604:	4b6b      	ldr	r3, [pc, #428]	@ (80027b4 <window_Menu+0x218>)
 8002606:	f993 2000 	ldrsb.w	r2, [r3]
 800260a:	4b6b      	ldr	r3, [pc, #428]	@ (80027b8 <window_Menu+0x21c>)
 800260c:	701a      	strb	r2, [r3, #0]
		break;
 800260e:	bf00      	nop
		break;
	case null:
		break;
	}

	item_prev=item_sel-1;
 8002610:	4b68      	ldr	r3, [pc, #416]	@ (80027b4 <window_Menu+0x218>)
 8002612:	f993 3000 	ldrsb.w	r3, [r3]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	b25a      	sxtb	r2, r3
 800261e:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <window_Menu+0x220>)
 8002620:	701a      	strb	r2, [r3, #0]
	item_next=item_sel+1;
 8002622:	4b64      	ldr	r3, [pc, #400]	@ (80027b4 <window_Menu+0x218>)
 8002624:	f993 3000 	ldrsb.w	r3, [r3]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3301      	adds	r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	b25a      	sxtb	r2, r3
 8002630:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <window_Menu+0x224>)
 8002632:	701a      	strb	r2, [r3, #0]

	if(item_sel<0){
 8002634:	4b5f      	ldr	r3, [pc, #380]	@ (80027b4 <window_Menu+0x218>)
 8002636:	f993 3000 	ldrsb.w	r3, [r3]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da03      	bge.n	8002646 <window_Menu+0xaa>
		item_sel=icon_len-1;
 800263e:	4b5d      	ldr	r3, [pc, #372]	@ (80027b4 <window_Menu+0x218>)
 8002640:	2205      	movs	r2, #5
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e007      	b.n	8002656 <window_Menu+0xba>
	}
	else if(item_sel>=icon_len){
 8002646:	4b5b      	ldr	r3, [pc, #364]	@ (80027b4 <window_Menu+0x218>)
 8002648:	f993 3000 	ldrsb.w	r3, [r3]
 800264c:	2b05      	cmp	r3, #5
 800264e:	dd02      	ble.n	8002656 <window_Menu+0xba>
		item_sel=0;
 8002650:	4b58      	ldr	r3, [pc, #352]	@ (80027b4 <window_Menu+0x218>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
	}

	if(item_prev<0){
 8002656:	4b59      	ldr	r3, [pc, #356]	@ (80027bc <window_Menu+0x220>)
 8002658:	f993 3000 	ldrsb.w	r3, [r3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da02      	bge.n	8002666 <window_Menu+0xca>
		item_prev=5;
 8002660:	4b56      	ldr	r3, [pc, #344]	@ (80027bc <window_Menu+0x220>)
 8002662:	2205      	movs	r2, #5
 8002664:	701a      	strb	r2, [r3, #0]
	}
	if(item_next>=icon_len){
 8002666:	4b56      	ldr	r3, [pc, #344]	@ (80027c0 <window_Menu+0x224>)
 8002668:	f993 3000 	ldrsb.w	r3, [r3]
 800266c:	2b05      	cmp	r3, #5
 800266e:	dd02      	ble.n	8002676 <window_Menu+0xda>
		item_next=0;
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <window_Menu+0x224>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
	}

	u8g2_ClearBuffer(u8g2);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f84d 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 800267c:	2101      	movs	r1, #1
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe ffd1 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetBitmapMode(u8g2,1);
 8002684:	2101      	movs	r1, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fd ff4e 	bl	8000528 <u8g2_SetBitmapMode>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 800268c:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <window_Menu+0x228>)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fe82 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawXBMP(u8g2, icn_x, top_icn_y, icon_wh, icon_wh,  menu_item[item_prev].icon);
 8002694:	4b49      	ldr	r3, [pc, #292]	@ (80027bc <window_Menu+0x220>)
 8002696:	f993 3000 	ldrsb.w	r3, [r3]
 800269a:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <window_Menu+0x22c>)
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	2310      	movs	r3, #16
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2310      	movs	r3, #16
 80026aa:	2202      	movs	r2, #2
 80026ac:	2104      	movs	r1, #4
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ffb8 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawStr(u8g2, title_x, top_title_y, menu_item[item_prev].icon_name);
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <window_Menu+0x220>)
 80026b6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4a42      	ldr	r2, [pc, #264]	@ (80027c8 <window_Menu+0x22c>)
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	220f      	movs	r2, #15
 80026c4:	211b      	movs	r1, #27
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fdc4 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawXBMP(u8g2, icn_x, mid_icn_y, icon_wh, icon_wh,  menu_item[item_sel].icon);
 80026cc:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <window_Menu+0x218>)
 80026ce:	f993 3000 	ldrsb.w	r3, [r3]
 80026d2:	4a3d      	ldr	r2, [pc, #244]	@ (80027c8 <window_Menu+0x22c>)
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2310      	movs	r3, #16
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2310      	movs	r3, #16
 80026e2:	2218      	movs	r2, #24
 80026e4:	2104      	movs	r1, #4
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fd ff9c 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawStr(u8g2, title_x, mid_title_y, menu_item[item_sel].icon_name);
 80026ec:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <window_Menu+0x218>)
 80026ee:	f993 3000 	ldrsb.w	r3, [r3]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4a34      	ldr	r2, [pc, #208]	@ (80027c8 <window_Menu+0x22c>)
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	2225      	movs	r2, #37	@ 0x25
 80026fc:	211b      	movs	r1, #27
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fda8 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawXBMP(u8g2, icn_x, bot_icn_y, icon_wh, icon_wh,  menu_item[item_next].icon);
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <window_Menu+0x224>)
 8002706:	f993 3000 	ldrsb.w	r3, [r3]
 800270a:	4a2f      	ldr	r2, [pc, #188]	@ (80027c8 <window_Menu+0x22c>)
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2310      	movs	r3, #16
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2310      	movs	r3, #16
 800271a:	222e      	movs	r2, #46	@ 0x2e
 800271c:	2104      	movs	r1, #4
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fd ff80 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawStr(u8g2, title_x, bot_title_y, menu_item[item_next].icon_name);
 8002724:	4b26      	ldr	r3, [pc, #152]	@ (80027c0 <window_Menu+0x224>)
 8002726:	f993 3000 	ldrsb.w	r3, [r3]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <window_Menu+0x22c>)
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	223b      	movs	r2, #59	@ 0x3b
 8002734:	211b      	movs	r1, #27
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fd8c 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawXBMP(u8g2, -2, 22, Select_width,  Select_height, Select_bits);
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <window_Menu+0x230>)
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2315      	movs	r3, #21
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	2216      	movs	r2, #22
 8002748:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fd ff69 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawXBMP(u8g2, 126-ScrollBar_width, 0, ScrollBar_width,  ScrollBar_height, ScrollBar_bits);
 8002752:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <window_Menu+0x234>)
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	2340      	movs	r3, #64	@ 0x40
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2307      	movs	r3, #7
 800275c:	2200      	movs	r2, #0
 800275e:	2177      	movs	r1, #119	@ 0x77
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fd ff5f 	bl	8000624 <u8g2_DrawXBMP>
	u8g2_DrawBox(u8g2,127-4, (64/icon_len)*item_sel, 3, (64/icon_len) + ((64%icon_len) * ((item_sel/(icon_len-1)))));
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <window_Menu+0x218>)
 8002768:	f993 3000 	ldrsb.w	r3, [r3]
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	b299      	uxth	r1, r3
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <window_Menu+0x218>)
 800277a:	f993 3000 	ldrsb.w	r3, [r3]
 800277e:	4a15      	ldr	r2, [pc, #84]	@ (80027d4 <window_Menu+0x238>)
 8002780:	fb82 0203 	smull	r0, r2, r2, r3
 8002784:	1052      	asrs	r2, r2, #1
 8002786:	17db      	asrs	r3, r3, #31
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	b25b      	sxtb	r3, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	b29b      	uxth	r3, r3
 8002792:	330a      	adds	r3, #10
 8002794:	b29b      	uxth	r3, r3
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2303      	movs	r3, #3
 800279a:	460a      	mov	r2, r1
 800279c:	217b      	movs	r1, #123	@ 0x7b
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fd ff83 	bl	80006aa <u8g2_DrawBox>

	u8g2_SendBuffer(u8g2);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe f829 	bl	80007fc <u8g2_SendBuffer>

}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200005f6 	.word	0x200005f6
 80027b8:	20000083 	.word	0x20000083
 80027bc:	20000084 	.word	0x20000084
 80027c0:	20000085 	.word	0x20000085
 80027c4:	080082b4 	.word	0x080082b4
 80027c8:	20000000 	.word	0x20000000
 80027cc:	08008da0 	.word	0x08008da0
 80027d0:	08008d60 	.word	0x08008d60
 80027d4:	66666667 	.word	0x66666667

080027d8 <window_Game>:

playerInfo Player={2,2};
void window_Game(u8g2_t* u8g2){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	button input = handleInput(Press).direction;
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2101      	movs	r1, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fcd2 	bl	8002190 <handleInput>
 80027ec:	7a3b      	ldrb	r3, [r7, #8]
 80027ee:	73fb      	strb	r3, [r7, #15]
	switch(input){
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d847      	bhi.n	8002886 <window_Game+0xae>
 80027f6:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <window_Game+0x24>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002887 	.word	0x08002887
 8002800:	08002819 	.word	0x08002819
 8002804:	0800282f 	.word	0x0800282f
 8002808:	0800284d 	.word	0x0800284d
 800280c:	08002863 	.word	0x08002863
 8002810:	08002887 	.word	0x08002887
 8002814:	08002845 	.word	0x08002845
	case up:
		if(Player.y_pos>0){
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <window_Game+0xf0>)
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02b      	beq.n	8002878 <window_Game+0xa0>
			Player.y_pos--;
 8002820:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <window_Game+0xf0>)
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	3b01      	subs	r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <window_Game+0xf0>)
 800282a:	705a      	strb	r2, [r3, #1]
		}
		break;
 800282c:	e024      	b.n	8002878 <window_Game+0xa0>
	case down:
		if(Player.y_pos<63){
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <window_Game+0xf0>)
 8002830:	785b      	ldrb	r3, [r3, #1]
 8002832:	2b3e      	cmp	r3, #62	@ 0x3e
 8002834:	d822      	bhi.n	800287c <window_Game+0xa4>
				Player.y_pos++;
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <window_Game+0xf0>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <window_Game+0xf0>)
 8002840:	705a      	strb	r2, [r3, #1]
			}
		break;
 8002842:	e01b      	b.n	800287c <window_Game+0xa4>
	case select:
		break;
	case back:
		currWindow=menu;
 8002844:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <window_Game+0xf4>)
 8002846:	22ff      	movs	r2, #255	@ 0xff
 8002848:	701a      	strb	r2, [r3, #0]
		break;
 800284a:	e01c      	b.n	8002886 <window_Game+0xae>
	case left:
		if(Player.x_pos>0){
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <window_Game+0xf0>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <window_Game+0xa8>
				Player.x_pos--;
 8002854:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <window_Game+0xf0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <window_Game+0xf0>)
 800285e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002860:	e00e      	b.n	8002880 <window_Game+0xa8>
	case right:
		if(Player.x_pos<127){
 8002862:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <window_Game+0xf0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b7e      	cmp	r3, #126	@ 0x7e
 8002868:	d80c      	bhi.n	8002884 <window_Game+0xac>
				Player.x_pos++;
 800286a:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <window_Game+0xf0>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <window_Game+0xf0>)
 8002874:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002876:	e005      	b.n	8002884 <window_Game+0xac>
		break;
 8002878:	bf00      	nop
 800287a:	e004      	b.n	8002886 <window_Game+0xae>
		break;
 800287c:	bf00      	nop
 800287e:	e002      	b.n	8002886 <window_Game+0xae>
		break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <window_Game+0xae>
		break;
 8002884:	bf00      	nop
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fd ff45 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 800288c:	2101      	movs	r1, #1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fec9 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <window_Game+0xf8>)
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fd7e 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 800289c:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <window_Game+0xfc>)
 800289e:	221e      	movs	r2, #30
 80028a0:	210f      	movs	r1, #15
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fcd6 	bl	8001254 <u8g2_DrawStr>

	u8g2_DrawPixel(u8g2,Player.x_pos,Player.y_pos);
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <window_Game+0xf0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <window_Game+0xf0>)
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	461a      	mov	r2, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fe83 	bl	80015c0 <u8g2_DrawPixel>



	u8g2_SendBuffer(u8g2);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fd ff9e 	bl	80007fc <u8g2_SendBuffer>

}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000088 	.word	0x20000088
 80028cc:	20000083 	.word	0x20000083
 80028d0:	080082b4 	.word	0x080082b4
 80028d4:	08007be8 	.word	0x08007be8

080028d8 <window_Idle>:

void window_Idle(u8g2_t* u8g2){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af02      	add	r7, sp, #8
 80028de:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fc52 	bl	8002190 <handleInput>
 80028ec:	7a3b      	ldrb	r3, [r7, #8]
 80028ee:	73fb      	strb	r3, [r7, #15]
	switch(input){
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d828      	bhi.n	8002948 <window_Idle+0x70>
 80028f6:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <window_Idle+0x24>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002949 	.word	0x08002949
 8002900:	08002919 	.word	0x08002919
 8002904:	08002921 	.word	0x08002921
 8002908:	08002939 	.word	0x08002939
 800290c:	08002941 	.word	0x08002941
 8002910:	08002929 	.word	0x08002929
 8002914:	08002931 	.word	0x08002931
	case up:
		currWindow=menu;
 8002918:	4b43      	ldr	r3, [pc, #268]	@ (8002a28 <window_Idle+0x150>)
 800291a:	22ff      	movs	r2, #255	@ 0xff
 800291c:	701a      	strb	r2, [r3, #0]
		break;
 800291e:	e013      	b.n	8002948 <window_Idle+0x70>
	case down:
		currWindow=menu;
 8002920:	4b41      	ldr	r3, [pc, #260]	@ (8002a28 <window_Idle+0x150>)
 8002922:	22ff      	movs	r2, #255	@ 0xff
 8002924:	701a      	strb	r2, [r3, #0]
		break;
 8002926:	e00f      	b.n	8002948 <window_Idle+0x70>
	case select:
		currWindow=menu;
 8002928:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <window_Idle+0x150>)
 800292a:	22ff      	movs	r2, #255	@ 0xff
 800292c:	701a      	strb	r2, [r3, #0]
		break;
 800292e:	e00b      	b.n	8002948 <window_Idle+0x70>
	case back:
		currWindow=menu;
 8002930:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <window_Idle+0x150>)
 8002932:	22ff      	movs	r2, #255	@ 0xff
 8002934:	701a      	strb	r2, [r3, #0]
		break;
 8002936:	e007      	b.n	8002948 <window_Idle+0x70>
	case left:
		currWindow=menu;
 8002938:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <window_Idle+0x150>)
 800293a:	22ff      	movs	r2, #255	@ 0xff
 800293c:	701a      	strb	r2, [r3, #0]
		break;
 800293e:	e003      	b.n	8002948 <window_Idle+0x70>
	case right:
		currWindow=menu;
 8002940:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <window_Idle+0x150>)
 8002942:	22ff      	movs	r2, #255	@ 0xff
 8002944:	701a      	strb	r2, [r3, #0]
		break;
 8002946:	bf00      	nop
	case null:
		/*-------------------------*/
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fd fee4 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 800294e:	2101      	movs	r1, #1
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fe fe68 	bl	8001626 <u8g2_SetDrawColor>
	switch(z_iter){
 8002956:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <window_Idle+0x154>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d85d      	bhi.n	8002a1a <window_Idle+0x142>
 800295e:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <window_Idle+0x8c>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002975 	.word	0x08002975
 8002968:	0800299f 	.word	0x0800299f
 800296c:	080029c9 	.word	0x080029c9
 8002970:	080029f3 	.word	0x080029f3
	case 0:
		u8g2_DrawXBMP(u8g2, 20, 20, panda0_width, panda0_height,  panda0_bits);
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <window_Idle+0x158>)
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	2329      	movs	r3, #41	@ 0x29
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	235b      	movs	r3, #91	@ 0x5b
 800297e:	2214      	movs	r2, #20
 8002980:	2114      	movs	r1, #20
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd fe4e 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_5x8);
 8002988:	492a      	ldr	r1, [pc, #168]	@ (8002a34 <window_Idle+0x15c>)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fd04 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 30, 35, "z");
 8002990:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <window_Idle+0x160>)
 8002992:	2223      	movs	r2, #35	@ 0x23
 8002994:	211e      	movs	r1, #30
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fc5c 	bl	8001254 <u8g2_DrawStr>
		break;
 800299c:	e03d      	b.n	8002a1a <window_Idle+0x142>
	case 1:
		u8g2_DrawXBMP(u8g2, 20, 21, panda1_width, panda1_height,  panda1_bits);
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <window_Idle+0x164>)
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2328      	movs	r3, #40	@ 0x28
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	235b      	movs	r3, #91	@ 0x5b
 80029a8:	2215      	movs	r2, #21
 80029aa:	2114      	movs	r1, #20
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fd fe39 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_7x14);
 80029b2:	4923      	ldr	r1, [pc, #140]	@ (8002a40 <window_Idle+0x168>)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fe fcef 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 23, 27, "z");
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <window_Idle+0x160>)
 80029bc:	221b      	movs	r2, #27
 80029be:	2117      	movs	r1, #23
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe fc47 	bl	8001254 <u8g2_DrawStr>
		break;
 80029c6:	e028      	b.n	8002a1a <window_Idle+0x142>
	case 2:
		u8g2_DrawXBMP(u8g2, 20, 21, panda1_width, panda1_height,  panda1_bits);
 80029c8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <window_Idle+0x164>)
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	2328      	movs	r3, #40	@ 0x28
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	235b      	movs	r3, #91	@ 0x5b
 80029d2:	2215      	movs	r2, #21
 80029d4:	2114      	movs	r1, #20
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd fe24 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_7x14);
 80029dc:	4918      	ldr	r1, [pc, #96]	@ (8002a40 <window_Idle+0x168>)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fcda 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 13, 15, "Z");
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <window_Idle+0x16c>)
 80029e6:	220f      	movs	r2, #15
 80029e8:	210d      	movs	r1, #13
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fc32 	bl	8001254 <u8g2_DrawStr>
		break;
 80029f0:	e013      	b.n	8002a1a <window_Idle+0x142>
	case 3:
		u8g2_DrawXBMP(u8g2, 20, 20, panda0_width, panda0_height,  panda0_bits);
 80029f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <window_Idle+0x158>)
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2329      	movs	r3, #41	@ 0x29
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	235b      	movs	r3, #91	@ 0x5b
 80029fc:	2214      	movs	r2, #20
 80029fe:	2114      	movs	r1, #20
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7fd fe0f 	bl	8000624 <u8g2_DrawXBMP>
		u8g2_SetFont(u8g2,u8g_font_7x14);
 8002a06:	490e      	ldr	r1, [pc, #56]	@ (8002a40 <window_Idle+0x168>)
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe fcc5 	bl	8001398 <u8g2_SetFont>
		u8g2_DrawStr(u8g2, 13, 15, "Z");
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <window_Idle+0x16c>)
 8002a10:	220f      	movs	r2, #15
 8002a12:	210d      	movs	r1, #13
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fe fc1d 	bl	8001254 <u8g2_DrawStr>
	}
	u8g2_SendBuffer(u8g2);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd feee 	bl	80007fc <u8g2_SendBuffer>
	//Animation Delay is Handled in Tim3 PeriodElapsedCallback IRQ in main.c [User Code 4]
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000083 	.word	0x20000083
 8002a2c:	200005f4 	.word	0x200005f4
 8002a30:	08008ef0 	.word	0x08008ef0
 8002a34:	08007c00 	.word	0x08007c00
 8002a38:	08007bf8 	.word	0x08007bf8
 8002a3c:	080090dc 	.word	0x080090dc
 8002a40:	080082b4 	.word	0x080082b4
 8002a44:	08007bfc 	.word	0x08007bfc

08002a48 <window_NFC>:

void window_NFC(u8g2_t* u8g2){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fb9a 	bl	8002190 <handleInput>
 8002a5c:	7a3b      	ldrb	r3, [r7, #8]
 8002a5e:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d814      	bhi.n	8002a90 <window_NFC+0x48>
 8002a66:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <window_NFC+0x24>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a91 	.word	0x08002a91
 8002a70:	08002a91 	.word	0x08002a91
 8002a74:	08002a91 	.word	0x08002a91
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002a89 	.word	0x08002a89
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002a88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <window_NFC+0x78>)
 8002a8a:	22ff      	movs	r2, #255	@ 0xff
 8002a8c:	701a      	strb	r2, [r3, #0]
		break;
 8002a8e:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fd fe40 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe fdc4 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002a9e:	4909      	ldr	r1, [pc, #36]	@ (8002ac4 <window_NFC+0x7c>)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe fc79 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <window_NFC+0x80>)
 8002aa8:	221e      	movs	r2, #30
 8002aaa:	210f      	movs	r1, #15
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe fbd1 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fea2 	bl	80007fc <u8g2_SendBuffer>

}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000083 	.word	0x20000083
 8002ac4:	080082b4 	.word	0x080082b4
 8002ac8:	08007be8 	.word	0x08007be8

08002acc <window_RFID>:

void window_RFID(u8g2_t* u8g2){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002ad4:	f107 0308 	add.w	r3, r7, #8
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fb58 	bl	8002190 <handleInput>
 8002ae0:	7a3b      	ldrb	r3, [r7, #8]
 8002ae2:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d814      	bhi.n	8002b14 <window_RFID+0x48>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <window_RFID+0x24>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002b15 	.word	0x08002b15
 8002af8:	08002b15 	.word	0x08002b15
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b15 	.word	0x08002b15
 8002b04:	08002b15 	.word	0x08002b15
 8002b08:	08002b0d 	.word	0x08002b0d
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <window_RFID+0x78>)
 8002b0e:	22ff      	movs	r2, #255	@ 0xff
 8002b10:	701a      	strb	r2, [r3, #0]
		break;
 8002b12:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fd fdfe 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7fe fd82 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002b22:	4909      	ldr	r1, [pc, #36]	@ (8002b48 <window_RFID+0x7c>)
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fe fc37 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <window_RFID+0x80>)
 8002b2c:	221e      	movs	r2, #30
 8002b2e:	210f      	movs	r1, #15
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe fb8f 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fd fe60 	bl	80007fc <u8g2_SendBuffer>

}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000083 	.word	0x20000083
 8002b48:	080082b4 	.word	0x080082b4
 8002b4c:	08007be8 	.word	0x08007be8

08002b50 <window_Settings>:

void window_Settings(u8g2_t* u8g2){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002b58:	f107 0308 	add.w	r3, r7, #8
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fb16 	bl	8002190 <handleInput>
 8002b64:	7a3b      	ldrb	r3, [r7, #8]
 8002b66:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d814      	bhi.n	8002b98 <window_Settings+0x48>
 8002b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <window_Settings+0x24>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002b99 	.word	0x08002b99
 8002b7c:	08002b99 	.word	0x08002b99
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002b99 	.word	0x08002b99
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002b91 	.word	0x08002b91
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <window_Settings+0x78>)
 8002b92:	22ff      	movs	r2, #255	@ 0xff
 8002b94:	701a      	strb	r2, [r3, #0]
		break;
 8002b96:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fd fdbc 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe fd40 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002ba6:	4909      	ldr	r1, [pc, #36]	@ (8002bcc <window_Settings+0x7c>)
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fbf5 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <window_Settings+0x80>)
 8002bb0:	221e      	movs	r2, #30
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fe fb4d 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fe1e 	bl	80007fc <u8g2_SendBuffer>

}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000083 	.word	0x20000083
 8002bcc:	080082b4 	.word	0x080082b4
 8002bd0:	08007be8 	.word	0x08007be8

08002bd4 <window_Subghz>:

void window_Subghz(u8g2_t* u8g2){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	button input = handleInput(Tap).direction;
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fad4 	bl	8002190 <handleInput>
 8002be8:	7a3b      	ldrb	r3, [r7, #8]
 8002bea:	73fb      	strb	r3, [r7, #15]
	switch(input){
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d814      	bhi.n	8002c1c <window_Subghz+0x48>
 8002bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <window_Subghz+0x24>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c1d 	.word	0x08002c1d
 8002c00:	08002c1d 	.word	0x08002c1d
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c1d 	.word	0x08002c1d
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c15 	.word	0x08002c15
	case down:
		break;
	case select:
		break;
	case back:
		currWindow=menu;
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <window_Subghz+0x78>)
 8002c16:	22ff      	movs	r2, #255	@ 0xff
 8002c18:	701a      	strb	r2, [r3, #0]
		break;
 8002c1a:	bf00      	nop
	case right:
		break;
	case null:
		break;
	}
	u8g2_ClearBuffer(u8g2);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fd fd7a 	bl	8000716 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(u8g2,1);
 8002c22:	2101      	movs	r1, #1
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe fcfe 	bl	8001626 <u8g2_SetDrawColor>
	u8g2_SetFont(u8g2,u8g_font_7x14);
 8002c2a:	4909      	ldr	r1, [pc, #36]	@ (8002c50 <window_Subghz+0x7c>)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fe fbb3 	bl	8001398 <u8g2_SetFont>
	u8g2_DrawStr(u8g2, 15, 30, "404 Not Found");
 8002c32:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <window_Subghz+0x80>)
 8002c34:	221e      	movs	r2, #30
 8002c36:	210f      	movs	r1, #15
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe fb0b 	bl	8001254 <u8g2_DrawStr>
	u8g2_SendBuffer(u8g2);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd fddc 	bl	80007fc <u8g2_SendBuffer>

}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000083 	.word	0x20000083
 8002c50:	080082b4 	.word	0x080082b4
 8002c54:	08007be8 	.word	0x08007be8

08002c58 <u8g2_gpio_and_delay_stm32>:
static void MX_SPI1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	72fb      	strb	r3, [r7, #11]
 8002c66:	4613      	mov	r3, r2
 8002c68:	72bb      	strb	r3, [r7, #10]
	switch(msg){
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	3b28      	subs	r3, #40	@ 0x28
 8002c6e:	2b23      	cmp	r3, #35	@ 0x23
 8002c70:	d875      	bhi.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
 8002c72:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <u8g2_gpio_and_delay_stm32+0x20>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002d5f 	.word	0x08002d5f
 8002c7c:	08002d09 	.word	0x08002d09
 8002c80:	08002d13 	.word	0x08002d13
 8002c84:	08002d2b 	.word	0x08002d2b
 8002c88:	08002d5f 	.word	0x08002d5f
 8002c8c:	08002d5f 	.word	0x08002d5f
 8002c90:	08002d5f 	.word	0x08002d5f
 8002c94:	08002d5f 	.word	0x08002d5f
 8002c98:	08002d5f 	.word	0x08002d5f
 8002c9c:	08002d5f 	.word	0x08002d5f
 8002ca0:	08002d5f 	.word	0x08002d5f
 8002ca4:	08002d5f 	.word	0x08002d5f
 8002ca8:	08002d5f 	.word	0x08002d5f
 8002cac:	08002d5f 	.word	0x08002d5f
 8002cb0:	08002d5f 	.word	0x08002d5f
 8002cb4:	08002d5f 	.word	0x08002d5f
 8002cb8:	08002d5f 	.word	0x08002d5f
 8002cbc:	08002d5f 	.word	0x08002d5f
 8002cc0:	08002d5f 	.word	0x08002d5f
 8002cc4:	08002d5f 	.word	0x08002d5f
 8002cc8:	08002d5f 	.word	0x08002d5f
 8002ccc:	08002d5f 	.word	0x08002d5f
 8002cd0:	08002d5f 	.word	0x08002d5f
 8002cd4:	08002d5f 	.word	0x08002d5f
 8002cd8:	08002d5f 	.word	0x08002d5f
 8002cdc:	08002d5f 	.word	0x08002d5f
 8002ce0:	08002d5f 	.word	0x08002d5f
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d5f 	.word	0x08002d5f
 8002cec:	08002d5f 	.word	0x08002d5f
 8002cf0:	08002d5f 	.word	0x08002d5f
 8002cf4:	08002d5f 	.word	0x08002d5f
 8002cf8:	08002d5f 	.word	0x08002d5f
 8002cfc:	08002d2f 	.word	0x08002d2f
 8002d00:	08002d3f 	.word	0x08002d3f
 8002d04:	08002d4f 	.word	0x08002d4f

		break;

		//Function which implements a delay, arg_int contains the amount of ms
		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8002d08:	7abb      	ldrb	r3, [r7, #10]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fec6 	bl	8003a9c <HAL_Delay>

		break;
 8002d10:	e025      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
		for (uint16_t n = 0; n < 320; n++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	82fb      	strh	r3, [r7, #22]
 8002d16:	e003      	b.n	8002d20 <u8g2_gpio_and_delay_stm32+0xc8>
		{
			__NOP();
 8002d18:	bf00      	nop
		for (uint16_t n = 0; n < 320; n++)
 8002d1a:	8afb      	ldrh	r3, [r7, #22]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	82fb      	strh	r3, [r7, #22]
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d26:	d3f7      	bcc.n	8002d18 <u8g2_gpio_and_delay_stm32+0xc0>
		}

		break;
 8002d28:	e019      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function which delays 100ns
		case U8X8_MSG_DELAY_100NANO:
		__NOP();
 8002d2a:	bf00      	nop

		break;
 8002d2c:	e017      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		// Function to define the logic level of the CS line
		case U8X8_MSG_GPIO_CS:
			HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8002d2e:	7abb      	ldrb	r3, [r7, #10]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d36:	480c      	ldr	r0, [pc, #48]	@ (8002d68 <u8g2_gpio_and_delay_stm32+0x110>)
 8002d38:	f001 fcd0 	bl	80046dc <HAL_GPIO_WritePin>
			//Disable NSS and enable another gpio pin as CS
		break;
 8002d3c:	e00f      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function to define the logic level of the Data/ Command line
		case U8X8_MSG_GPIO_DC:
			HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8002d3e:	7abb      	ldrb	r3, [r7, #10]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d46:	4808      	ldr	r0, [pc, #32]	@ (8002d68 <u8g2_gpio_and_delay_stm32+0x110>)
 8002d48:	f001 fcc8 	bl	80046dc <HAL_GPIO_WritePin>
		break;
 8002d4c:	e007      	b.n	8002d5e <u8g2_gpio_and_delay_stm32+0x106>
		//Function to define the logic level of the RESET line
		case U8X8_MSG_GPIO_RESET:
			HAL_GPIO_WritePin(OLED_Reset_GPIO_Port, OLED_Reset_Pin, arg_int);
 8002d4e:	7abb      	ldrb	r3, [r7, #10]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d56:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <u8g2_gpio_and_delay_stm32+0x114>)
 8002d58:	f001 fcc0 	bl	80046dc <HAL_GPIO_WritePin>
		break;
 8002d5c:	bf00      	nop

	}

	return 1; // command processed successfully.
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021400 	.word	0x40021400

08002d70 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	72fb      	strb	r3, [r7, #11]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	3b14      	subs	r3, #20
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d847      	bhi.n	8002e1a <u8x8_byte_stm32_hw_spi+0xaa>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <u8x8_byte_stm32_hw_spi+0x20>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002e1f 	.word	0x08002e1f
 8002d94:	08002e1b 	.word	0x08002e1b
 8002d98:	08002e1b 	.word	0x08002e1b
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002deb 	.word	0x08002deb
 8002da4:	08002e03 	.word	0x08002e03
 8002da8:	08002e1b 	.word	0x08002e1b
 8002dac:	08002e1b 	.word	0x08002e1b
 8002db0:	08002e1b 	.word	0x08002e1b
 8002db4:	08002e1b 	.word	0x08002e1b
 8002db8:	08002e1b 	.word	0x08002e1b
 8002dbc:	08002e1b 	.word	0x08002e1b
 8002dc0:	08002ddd 	.word	0x08002ddd
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8002dc4:	7abb      	ldrb	r3, [r7, #10]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	2364      	movs	r3, #100	@ 0x64
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4818      	ldr	r0, [pc, #96]	@ (8002e30 <u8x8_byte_stm32_hw_spi+0xc0>)
 8002dce:	f002 ffb8 	bl	8005d42 <HAL_SPI_Transmit>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d024      	beq.n	8002e22 <u8x8_byte_stm32_hw_spi+0xb2>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e024      	b.n	8002e26 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8002ddc:	7abb      	ldrb	r3, [r7, #10]
 8002dde:	461a      	mov	r2, r3
 8002de0:	214a      	movs	r1, #74	@ 0x4a
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff f965 	bl	80020b2 <u8x8_gpio_call>
		break;
 8002de8:	e01c      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	2149      	movs	r1, #73	@ 0x49
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff f95c 	bl	80020b2 <u8x8_gpio_call>
		HAL_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 fe4e 	bl	8003a9c <HAL_Delay>
		break;
 8002e00:	e010      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f000 fe4a 	bl	8003a9c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2149      	movs	r1, #73	@ 0x49
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff f94d 	bl	80020b2 <u8x8_gpio_call>
		break;
 8002e18:	e004      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e003      	b.n	8002e26 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8002e22:	bf00      	nop
	}
	return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200006e0 	.word	0x200006e0

08002e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e38:	f000 fdd3 	bl	80039e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3c:	f000 f83a 	bl	8002eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e40:	f000 f9e0 	bl	8003204 <MX_GPIO_Init>
  MX_ETH_Init();
 8002e44:	f000 f8a2 	bl	8002f8c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002e48:	f000 f97e 	bl	8003148 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002e4c:	f000 f9ac 	bl	80031a8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8002e50:	f000 f8ea 	bl	8003028 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002e54:	f000 f926 	bl	80030a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	@ 0x80
 8002e5c:	480f      	ldr	r0, [pc, #60]	@ (8002e9c <main+0x68>)
 8002e5e:	f001 fc3d 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);
 8002e62:	480f      	ldr	r0, [pc, #60]	@ (8002ea0 <main+0x6c>)
 8002e64:	f003 fabc 	bl	80063e0 <HAL_TIM_Base_Start_IT>

  u8g2_Setup_ssd1309_128x64_noname2_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8002e68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <main+0x70>)
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <main+0x74>)
 8002e6c:	490f      	ldr	r1, [pc, #60]	@ (8002eac <main+0x78>)
 8002e6e:	4810      	ldr	r0, [pc, #64]	@ (8002eb0 <main+0x7c>)
 8002e70:	f7fd fce2 	bl	8000838 <u8g2_Setup_ssd1309_128x64_noname2_f>
  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8002e74:	480e      	ldr	r0, [pc, #56]	@ (8002eb0 <main+0x7c>)
 8002e76:	f7ff f8ed 	bl	8002054 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	480c      	ldr	r0, [pc, #48]	@ (8002eb0 <main+0x7c>)
 8002e7e:	f7ff f8f8 	bl	8002072 <u8x8_SetPowerSave>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //USE FREE RTOS
  	handle_Windows(&u8g2);//Task1
 8002e82:	480b      	ldr	r0, [pc, #44]	@ (8002eb0 <main+0x7c>)
 8002e84:	f7ff fb4c 	bl	8002520 <handle_Windows>
  	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);//Task2
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <main+0x68>)
 8002e8c:	f001 fc3f 	bl	800470e <HAL_GPIO_TogglePin>
  	HAL_Delay(10);
 8002e90:	200a      	movs	r0, #10
 8002e92:	f000 fe03 	bl	8003a9c <HAL_Delay>
  	handle_Windows(&u8g2);//Task1
 8002e96:	bf00      	nop
 8002e98:	e7f3      	b.n	8002e82 <main+0x4e>
 8002e9a:	bf00      	nop
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	20000744 	.word	0x20000744
 8002ea4:	08002c59 	.word	0x08002c59
 8002ea8:	08002d71 	.word	0x08002d71
 8002eac:	08008c30 	.word	0x08008c30
 8002eb0:	20000d20 	.word	0x20000d20

08002eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b094      	sub	sp, #80	@ 0x50
 8002eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	2234      	movs	r2, #52	@ 0x34
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fe58 	bl	8007b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec8:	f107 0308 	add.w	r3, r7, #8
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ed8:	f001 fd7c 	bl	80049d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <SystemClock_Config+0xd0>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	4a28      	ldr	r2, [pc, #160]	@ (8002f84 <SystemClock_Config+0xd0>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee8:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <SystemClock_Config+0xd0>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ef4:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <SystemClock_Config+0xd4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002efc:	4a22      	ldr	r2, [pc, #136]	@ (8002f88 <SystemClock_Config+0xd4>)
 8002efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <SystemClock_Config+0xd4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002f18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f24:	2304      	movs	r3, #4
 8002f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f28:	23d8      	movs	r3, #216	@ 0xd8
 8002f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002f30:	2309      	movs	r3, #9
 8002f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f34:	2302      	movs	r3, #2
 8002f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fd59 	bl	80049f4 <HAL_RCC_OscConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f48:	f000 fa92 	bl	8003470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f50:	2302      	movs	r3, #2
 8002f52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	2103      	movs	r1, #3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fff0 	bl	8004f50 <HAL_RCC_ClockConfig>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002f76:	f000 fa7b 	bl	8003470 <Error_Handler>
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3750      	adds	r7, #80	@ 0x50
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40007000 	.word	0x40007000

08002f8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <MX_ETH_Init+0x84>)
 8002f92:	4a20      	ldr	r2, [pc, #128]	@ (8003014 <MX_ETH_Init+0x88>)
 8002f94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002f96:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002fa4:	22e1      	movs	r2, #225	@ 0xe1
 8002fa6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002fae:	4b1a      	ldr	r3, [pc, #104]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002fb4:	4b18      	ldr	r3, [pc, #96]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <MX_ETH_Init+0x84>)
 8002fbc:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <MX_ETH_Init+0x8c>)
 8002fbe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <MX_ETH_Init+0x84>)
 8002fc2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fc6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <MX_ETH_Init+0x84>)
 8002fca:	4a14      	ldr	r2, [pc, #80]	@ (800301c <MX_ETH_Init+0x90>)
 8002fcc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <MX_ETH_Init+0x84>)
 8002fd0:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <MX_ETH_Init+0x94>)
 8002fd2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <MX_ETH_Init+0x84>)
 8002fd6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002fda:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002fdc:	480c      	ldr	r0, [pc, #48]	@ (8003010 <MX_ETH_Init+0x84>)
 8002fde:	f000 fe93 	bl	8003d08 <HAL_ETH_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002fe8:	f000 fa42 	bl	8003470 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002fec:	2238      	movs	r2, #56	@ 0x38
 8002fee:	2100      	movs	r1, #0
 8002ff0:	480c      	ldr	r0, [pc, #48]	@ (8003024 <MX_ETH_Init+0x98>)
 8002ff2:	f004 fdc1 	bl	8007b78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <MX_ETH_Init+0x98>)
 8002ff8:	2221      	movs	r2, #33	@ 0x21
 8002ffa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <MX_ETH_Init+0x98>)
 8002ffe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003002:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <MX_ETH_Init+0x98>)
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000630 	.word	0x20000630
 8003014:	40028000 	.word	0x40028000
 8003018:	20000db4 	.word	0x20000db4
 800301c:	20000138 	.word	0x20000138
 8003020:	20000098 	.word	0x20000098
 8003024:	200005f8 	.word	0x200005f8

08003028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <MX_SPI1_Init+0x74>)
 800302e:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <MX_SPI1_Init+0x78>)
 8003030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003032:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <MX_SPI1_Init+0x74>)
 8003034:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800303a:	4b18      	ldr	r3, [pc, #96]	@ (800309c <MX_SPI1_Init+0x74>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003040:	4b16      	ldr	r3, [pc, #88]	@ (800309c <MX_SPI1_Init+0x74>)
 8003042:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003046:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003048:	4b14      	ldr	r3, [pc, #80]	@ (800309c <MX_SPI1_Init+0x74>)
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800304e:	4b13      	ldr	r3, [pc, #76]	@ (800309c <MX_SPI1_Init+0x74>)
 8003050:	2200      	movs	r2, #0
 8003052:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <MX_SPI1_Init+0x74>)
 8003056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800305a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <MX_SPI1_Init+0x74>)
 800305e:	2210      	movs	r2, #16
 8003060:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003062:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <MX_SPI1_Init+0x74>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <MX_SPI1_Init+0x74>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <MX_SPI1_Init+0x74>)
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003074:	4b09      	ldr	r3, [pc, #36]	@ (800309c <MX_SPI1_Init+0x74>)
 8003076:	2207      	movs	r2, #7
 8003078:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800307a:	4b08      	ldr	r3, [pc, #32]	@ (800309c <MX_SPI1_Init+0x74>)
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <MX_SPI1_Init+0x74>)
 8003082:	2200      	movs	r2, #0
 8003084:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003086:	4805      	ldr	r0, [pc, #20]	@ (800309c <MX_SPI1_Init+0x74>)
 8003088:	f002 fdb0 	bl	8005bec <HAL_SPI_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003092:	f000 f9ed 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200006e0 	.word	0x200006e0
 80030a0:	40013000 	.word	0x40013000

080030a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030aa:	f107 0310 	add.w	r3, r7, #16
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b8:	1d3b      	adds	r3, r7, #4
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003144 <MX_TIM3_Init+0xa0>)
 80030c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030dc:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e2:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030e8:	4815      	ldr	r0, [pc, #84]	@ (8003140 <MX_TIM3_Init+0x9c>)
 80030ea:	f003 f921 	bl	8006330 <HAL_TIM_Base_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80030f4:	f000 f9bc 	bl	8003470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	4619      	mov	r1, r3
 8003104:	480e      	ldr	r0, [pc, #56]	@ (8003140 <MX_TIM3_Init+0x9c>)
 8003106:	f003 fb03 	bl	8006710 <HAL_TIM_ConfigClockSource>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003110:	f000 f9ae 	bl	8003470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4807      	ldr	r0, [pc, #28]	@ (8003140 <MX_TIM3_Init+0x9c>)
 8003122:	f003 fd21 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800312c:	f000 f9a0 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//  TIM3->ARR = 0;
  TIM3->ARR = 51999;//Count up to
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <MX_TIM3_Init+0xa0>)
 8003132:	f64c 321f 	movw	r2, #51999	@ 0xcb1f
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* USER CODE END TIM3_Init 2 */

}
 8003138:	bf00      	nop
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000744 	.word	0x20000744
 8003144:	40000400 	.word	0x40000400

08003148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 800314e:	4a15      	ldr	r2, [pc, #84]	@ (80031a4 <MX_USART3_UART_Init+0x5c>)
 8003150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 8003154:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800315a:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 800316e:	220c      	movs	r2, #12
 8003170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 800317a:	2200      	movs	r2, #0
 800317c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 8003180:	2200      	movs	r2, #0
 8003182:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 8003186:	2200      	movs	r2, #0
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800318a:	4805      	ldr	r0, [pc, #20]	@ (80031a0 <MX_USART3_UART_Init+0x58>)
 800318c:	f003 fd98 	bl	8006cc0 <HAL_UART_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003196:	f000 f96b 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000790 	.word	0x20000790
 80031a4:	40004800 	.word	0x40004800

080031a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80031b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031b6:	2206      	movs	r2, #6
 80031b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031ba:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031bc:	2202      	movs	r2, #2
 80031be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c8:	2202      	movs	r2, #2
 80031ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031d8:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031da:	2200      	movs	r2, #0
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031ea:	4805      	ldr	r0, [pc, #20]	@ (8003200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ec:	f001 faa9 	bl	8004742 <HAL_PCD_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031f6:	f000 f93b 	bl	8003470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000818 	.word	0x20000818

08003204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	@ 0x38
 8003208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	4b75      	ldr	r3, [pc, #468]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a74      	ldr	r2, [pc, #464]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b72      	ldr	r3, [pc, #456]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	623b      	str	r3, [r7, #32]
 8003230:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003232:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800323c:	6313      	str	r3, [r2, #48]	@ 0x30
 800323e:	4b6c      	ldr	r3, [pc, #432]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	4b69      	ldr	r3, [pc, #420]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a68      	ldr	r2, [pc, #416]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b66      	ldr	r3, [pc, #408]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	4b63      	ldr	r3, [pc, #396]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	4a62      	ldr	r2, [pc, #392]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	@ 0x30
 800326e:	4b60      	ldr	r3, [pc, #384]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800327a:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003280:	f043 0320 	orr.w	r3, r3, #32
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4a56      	ldr	r2, [pc, #344]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 8003298:	f043 0310 	orr.w	r3, r3, #16
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
 800329e:	4b54      	ldr	r3, [pc, #336]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032aa:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	4a50      	ldr	r2, [pc, #320]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b6:	4b4e      	ldr	r3, [pc, #312]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032c2:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b48      	ldr	r3, [pc, #288]	@ (80033f0 <MX_GPIO_Init+0x1ec>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80032e0:	4844      	ldr	r0, [pc, #272]	@ (80033f4 <MX_GPIO_Init+0x1f0>)
 80032e2:	f001 f9fb 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_Reset_GPIO_Port, OLED_Reset_Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032ec:	4842      	ldr	r0, [pc, #264]	@ (80033f8 <MX_GPIO_Init+0x1f4>)
 80032ee:	f001 f9f5 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80032f2:	2200      	movs	r2, #0
 80032f4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80032f8:	4840      	ldr	r0, [pc, #256]	@ (80033fc <MX_GPIO_Init+0x1f8>)
 80032fa:	f001 f9ef 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80032fe:	2200      	movs	r2, #0
 8003300:	2140      	movs	r1, #64	@ 0x40
 8003302:	483f      	ldr	r0, [pc, #252]	@ (8003400 <MX_GPIO_Init+0x1fc>)
 8003304:	f001 f9ea 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003308:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800330e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800331c:	4619      	mov	r1, r3
 800331e:	4839      	ldr	r0, [pc, #228]	@ (8003404 <MX_GPIO_Init+0x200>)
 8003320:	f001 f818 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003324:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332a:	2301      	movs	r3, #1
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800333a:	4619      	mov	r1, r3
 800333c:	482d      	ldr	r0, [pc, #180]	@ (80033f4 <MX_GPIO_Init+0x1f0>)
 800333e:	f001 f809 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_Reset_Pin */
  GPIO_InitStruct.Pin = OLED_Reset_Pin;
 8003342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003348:	2301      	movs	r3, #1
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003350:	2300      	movs	r3, #0
 8003352:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OLED_Reset_GPIO_Port, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	4827      	ldr	r0, [pc, #156]	@ (80033f8 <MX_GPIO_Init+0x1f4>)
 800335c:	f000 fffa 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_BTN_Pin Select_BTN_Pin Back_BTN_Pin */
  GPIO_InitStruct.Pin = Up_BTN_Pin|Select_BTN_Pin|Back_BTN_Pin;
 8003360:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003366:	2300      	movs	r3, #0
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800336a:	2302      	movs	r3, #2
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800336e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003372:	4619      	mov	r1, r3
 8003374:	4820      	ldr	r0, [pc, #128]	@ (80033f8 <MX_GPIO_Init+0x1f4>)
 8003376:	f000 ffed 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_BTN_Pin Down_BTN_Pin Left_BTN_Pin */
  GPIO_InitStruct.Pin = Right_BTN_Pin|Down_BTN_Pin|Left_BTN_Pin;
 800337a:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003380:	2300      	movs	r3, #0
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003384:	2302      	movs	r3, #2
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800338c:	4619      	mov	r1, r3
 800338e:	481e      	ldr	r0, [pc, #120]	@ (8003408 <MX_GPIO_Init+0x204>)
 8003390:	f000 ffe0 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 8003394:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	4813      	ldr	r0, [pc, #76]	@ (80033fc <MX_GPIO_Init+0x1f8>)
 80033ae:	f000 ffd1 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80033b2:	2340      	movs	r3, #64	@ 0x40
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c6:	4619      	mov	r1, r3
 80033c8:	480d      	ldr	r0, [pc, #52]	@ (8003400 <MX_GPIO_Init+0x1fc>)
 80033ca:	f000 ffc3 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033de:	4619      	mov	r1, r3
 80033e0:	4807      	ldr	r0, [pc, #28]	@ (8003400 <MX_GPIO_Init+0x1fc>)
 80033e2:	f000 ffb7 	bl	8004354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033e6:	bf00      	nop
 80033e8:	3738      	adds	r7, #56	@ 0x38
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40020400 	.word	0x40020400
 80033f8:	40021400 	.word	0x40021400
 80033fc:	40020c00 	.word	0x40020c00
 8003400:	40021800 	.word	0x40021800
 8003404:	40020800 	.word	0x40020800
 8003408:	40021000 	.word	0x40021000

0800340c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Timer3 has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a13      	ldr	r2, [pc, #76]	@ (8003464 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d11d      	bne.n	8003458 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if(Tim3Count==255){
 800341c:	4b12      	ldr	r3, [pc, #72]	@ (8003468 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2bff      	cmp	r3, #255	@ 0xff
 8003422:	d10c      	bne.n	800343e <HAL_TIM_PeriodElapsedCallback+0x32>
			//Handle Idle Animation Delay
			z_iter++;
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800342e:	701a      	strb	r2, [r3, #0]
			z_iter=z_iter%4;
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800343c:	701a      	strb	r2, [r3, #0]
		}
		if(Tim3Count>=255){
 800343e:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2bff      	cmp	r3, #255	@ 0xff
 8003444:	d102      	bne.n	800344c <HAL_TIM_PeriodElapsedCallback+0x40>
			Tim3Count=0;//Don't let overflow
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
		}
		Tim3Count++;
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003456:	701a      	strb	r2, [r3, #0]
	}
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000744 	.word	0x20000744
 8003468:	200005f5 	.word	0x200005f5
 800346c:	200005f4 	.word	0x200005f4

08003470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003474:	b672      	cpsid	i
}
 8003476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <Error_Handler+0x8>

0800347c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_MspInit+0x44>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	4a0e      	ldr	r2, [pc, #56]	@ (80034c0 <HAL_MspInit+0x44>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	@ 0x40
 800348e:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_MspInit+0x44>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <HAL_MspInit+0x44>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <HAL_MspInit+0x44>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_MspInit+0x44>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800

080034c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08e      	sub	sp, #56	@ 0x38
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a4e      	ldr	r2, [pc, #312]	@ (800361c <HAL_ETH_MspInit+0x158>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f040 8096 	bne.w	8003614 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80034e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 80034ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	4b47      	ldr	r3, [pc, #284]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	4a46      	ldr	r2, [pc, #280]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800350a:	6313      	str	r3, [r2, #48]	@ 0x30
 800350c:	4b44      	ldr	r3, [pc, #272]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4b41      	ldr	r3, [pc, #260]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	4a40      	ldr	r2, [pc, #256]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800351e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003522:	6313      	str	r3, [r2, #48]	@ 0x30
 8003524:	4b3e      	ldr	r3, [pc, #248]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003530:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003534:	4a3a      	ldr	r2, [pc, #232]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6313      	str	r3, [r2, #48]	@ 0x30
 800353c:	4b38      	ldr	r3, [pc, #224]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b35      	ldr	r3, [pc, #212]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	4a34      	ldr	r2, [pc, #208]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6313      	str	r3, [r2, #48]	@ 0x30
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	4b2f      	ldr	r3, [pc, #188]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	4a2e      	ldr	r2, [pc, #184]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003566:	f043 0302 	orr.w	r3, r3, #2
 800356a:	6313      	str	r3, [r2, #48]	@ 0x30
 800356c:	4b2c      	ldr	r3, [pc, #176]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003578:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	4a28      	ldr	r2, [pc, #160]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 800357e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003582:	6313      	str	r3, [r2, #48]	@ 0x30
 8003584:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_ETH_MspInit+0x15c>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003590:	2332      	movs	r3, #50	@ 0x32
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035a0:	230b      	movs	r3, #11
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a8:	4619      	mov	r1, r3
 80035aa:	481e      	ldr	r0, [pc, #120]	@ (8003624 <HAL_ETH_MspInit+0x160>)
 80035ac:	f000 fed2 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80035b0:	2386      	movs	r3, #134	@ 0x86
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035c0:	230b      	movs	r3, #11
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4817      	ldr	r0, [pc, #92]	@ (8003628 <HAL_ETH_MspInit+0x164>)
 80035cc:	f000 fec2 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80035d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035e2:	230b      	movs	r3, #11
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ea:	4619      	mov	r1, r3
 80035ec:	480f      	ldr	r0, [pc, #60]	@ (800362c <HAL_ETH_MspInit+0x168>)
 80035ee:	f000 feb1 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80035f2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003604:	230b      	movs	r3, #11
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800360c:	4619      	mov	r1, r3
 800360e:	4808      	ldr	r0, [pc, #32]	@ (8003630 <HAL_ETH_MspInit+0x16c>)
 8003610:	f000 fea0 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003614:	bf00      	nop
 8003616:	3738      	adds	r7, #56	@ 0x38
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40028000 	.word	0x40028000
 8003620:	40023800 	.word	0x40023800
 8003624:	40020800 	.word	0x40020800
 8003628:	40020000 	.word	0x40020000
 800362c:	40020400 	.word	0x40020400
 8003630:	40021800 	.word	0x40021800

08003634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	@ 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a25      	ldr	r2, [pc, #148]	@ (80036e8 <HAL_SPI_MspInit+0xb4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d143      	bne.n	80036de <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003656:	4b25      	ldr	r3, [pc, #148]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	4a24      	ldr	r2, [pc, #144]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 800365c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003660:	6453      	str	r3, [r2, #68]	@ 0x44
 8003662:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	4b1f      	ldr	r3, [pc, #124]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6313      	str	r3, [r2, #48]	@ 0x30
 800367a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 800368c:	f043 0308 	orr.w	r3, r3, #8
 8003690:	6313      	str	r3, [r2, #48]	@ 0x30
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_SPI_MspInit+0xb8>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800369e:	2320      	movs	r3, #32
 80036a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036ae:	2305      	movs	r3, #5
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	4619      	mov	r1, r3
 80036b8:	480d      	ldr	r0, [pc, #52]	@ (80036f0 <HAL_SPI_MspInit+0xbc>)
 80036ba:	f000 fe4b 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ca:	2303      	movs	r3, #3
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036ce:	2305      	movs	r3, #5
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	4806      	ldr	r0, [pc, #24]	@ (80036f4 <HAL_SPI_MspInit+0xc0>)
 80036da:	f000 fe3b 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036de:	bf00      	nop
 80036e0:	3728      	adds	r7, #40	@ 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40013000 	.word	0x40013000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020c00 	.word	0x40020c00

080036f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <HAL_TIM_Base_MspInit+0x44>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d113      	bne.n	8003732 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370a:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <HAL_TIM_Base_MspInit+0x48>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	4a0c      	ldr	r2, [pc, #48]	@ (8003740 <HAL_TIM_Base_MspInit+0x48>)
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	6413      	str	r3, [r2, #64]	@ 0x40
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_TIM_Base_MspInit+0x48>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	201d      	movs	r0, #29
 8003728:	f000 fab7 	bl	8003c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800372c:	201d      	movs	r0, #29
 800372e:	f000 fad0 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40000400 	.word	0x40000400
 8003740:	40023800 	.word	0x40023800

08003744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b0ae      	sub	sp, #184	@ 0xb8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2290      	movs	r2, #144	@ 0x90
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fa07 	bl	8007b78 <memset>
  if(huart->Instance==USART3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_UART_MspInit+0xb4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d13c      	bne.n	80037ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003778:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800377a:	2300      	movs	r3, #0
 800377c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fe0a 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800378e:	f7ff fe6f 	bl	8003470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_UART_MspInit+0xb8>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	4a19      	ldr	r2, [pc, #100]	@ (80037fc <HAL_UART_MspInit+0xb8>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800379c:	6413      	str	r3, [r2, #64]	@ 0x40
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <HAL_UART_MspInit+0xb8>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037aa:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <HAL_UART_MspInit+0xb8>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <HAL_UART_MspInit+0xb8>)
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_UART_MspInit+0xb8>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80037c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d6:	2303      	movs	r3, #3
 80037d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037dc:	2307      	movs	r3, #7
 80037de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4805      	ldr	r0, [pc, #20]	@ (8003800 <HAL_UART_MspInit+0xbc>)
 80037ea:	f000 fdb3 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037ee:	bf00      	nop
 80037f0:	37b8      	adds	r7, #184	@ 0xb8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40004800 	.word	0x40004800
 80037fc:	40023800 	.word	0x40023800
 8003800:	40020c00 	.word	0x40020c00

08003804 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b0ae      	sub	sp, #184	@ 0xb8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	2290      	movs	r2, #144	@ 0x90
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f004 f9a7 	bl	8007b78 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003832:	d159      	bne.n	80038e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003834:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003838:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4618      	mov	r0, r3
 8003846:	f001 fda9 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003850:	f7ff fe0e 	bl	8003470 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003854:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	4a25      	ldr	r2, [pc, #148]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003860:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800386c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003886:	230a      	movs	r3, #10
 8003888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003890:	4619      	mov	r1, r3
 8003892:	4818      	ldr	r0, [pc, #96]	@ (80038f4 <HAL_PCD_MspInit+0xf0>)
 8003894:	f000 fd5e 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800389c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4810      	ldr	r0, [pc, #64]	@ (80038f4 <HAL_PCD_MspInit+0xf0>)
 80038b4:	f000 fd4e 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80038b8:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 80038ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038bc:	4a0c      	ldr	r2, [pc, #48]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 80038be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	4a06      	ldr	r2, [pc, #24]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 80038d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038da:	6453      	str	r3, [r2, #68]	@ 0x44
 80038dc:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <HAL_PCD_MspInit+0xec>)
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	37b8      	adds	r7, #184	@ 0xb8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020000 	.word	0x40020000

080038f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <NMI_Handler+0x4>

08003900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <HardFault_Handler+0x4>

08003908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <MemManage_Handler+0x4>

08003910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <BusFault_Handler+0x4>

08003918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800391c:	bf00      	nop
 800391e:	e7fd      	b.n	800391c <UsageFault_Handler+0x4>

08003920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800394e:	f000 f885 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <TIM3_IRQHandler+0x10>)
 800395e:	f002 fdb7 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000744 	.word	0x20000744

0800396c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <SystemInit+0x20>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	4a05      	ldr	r2, [pc, #20]	@ (800398c <SystemInit+0x20>)
 8003978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800397c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003994:	480d      	ldr	r0, [pc, #52]	@ (80039cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003996:	490e      	ldr	r1, [pc, #56]	@ (80039d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003998:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800399c:	e002      	b.n	80039a4 <LoopCopyDataInit>

0800399e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a2:	3304      	adds	r3, #4

080039a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a8:	d3f9      	bcc.n	800399e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039aa:	4a0b      	ldr	r2, [pc, #44]	@ (80039d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039ac:	4c0b      	ldr	r4, [pc, #44]	@ (80039dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b0:	e001      	b.n	80039b6 <LoopFillZerobss>

080039b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b4:	3204      	adds	r2, #4

080039b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b8:	d3fb      	bcc.n	80039b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039ba:	f7ff ffd7 	bl	800396c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039be:	f004 f8e3 	bl	8007b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039c2:	f7ff fa37 	bl	8002e34 <main>
  bx  lr    
 80039c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80039cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80039d4:	080092e4 	.word	0x080092e4
  ldr r2, =_sbss
 80039d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80039dc:	20000dc0 	.word	0x20000dc0

080039e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039e0:	e7fe      	b.n	80039e0 <ADC_IRQHandler>

080039e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e6:	2003      	movs	r0, #3
 80039e8:	f000 f94c 	bl	8003c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ec:	2000      	movs	r0, #0
 80039ee:	f000 f805 	bl	80039fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039f2:	f7ff fd43 	bl	800347c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <HAL_InitTick+0x54>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <HAL_InitTick+0x58>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f967 	bl	8003cee <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d80a      	bhi.n	8003a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f000 f92f 	bl	8003c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	@ (8003a58 <HAL_InitTick+0x5c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2000008c 	.word	0x2000008c
 8003a54:	20000094 	.word	0x20000094
 8003a58:	20000090 	.word	0x20000090

08003a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a60:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_IncTick+0x20>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <HAL_IncTick+0x24>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_IncTick+0x24>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000094 	.word	0x20000094
 8003a80:	20000dbc 	.word	0x20000dbc

08003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTick;
 8003a88:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <HAL_GetTick+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000dbc 	.word	0x20000dbc

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff ffee 	bl	8003a84 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d005      	beq.n	8003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <HAL_Delay+0x44>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ac2:	bf00      	nop
 8003ac4:	f7ff ffde 	bl	8003a84 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d8f7      	bhi.n	8003ac4 <HAL_Delay+0x28>
  {
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000094 	.word	0x20000094

08003ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <__NVIC_SetPriorityGrouping+0x40>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b00:	4013      	ands	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <__NVIC_SetPriorityGrouping+0x44>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <__NVIC_SetPriorityGrouping+0x40>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00
 8003b28:	05fa0000 	.word	0x05fa0000

08003b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b30:	4b04      	ldr	r3, [pc, #16]	@ (8003b44 <__NVIC_GetPriorityGrouping+0x18>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	f003 0307 	and.w	r3, r3, #7
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db0b      	blt.n	8003b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	f003 021f 	and.w	r2, r3, #31
 8003b60:	4907      	ldr	r1, [pc, #28]	@ (8003b80 <__NVIC_EnableIRQ+0x38>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2001      	movs	r0, #1
 8003b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000e100 	.word	0xe000e100

08003b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db0a      	blt.n	8003bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	490c      	ldr	r1, [pc, #48]	@ (8003bd0 <__NVIC_SetPriority+0x4c>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bac:	e00a      	b.n	8003bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4908      	ldr	r1, [pc, #32]	@ (8003bd4 <__NVIC_SetPriority+0x50>)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3b04      	subs	r3, #4
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	761a      	strb	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000e100 	.word	0xe000e100
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	@ 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f1c3 0307 	rsb	r3, r3, #7
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf28      	it	cs
 8003bf6:	2304      	movcs	r3, #4
 8003bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d902      	bls.n	8003c08 <NVIC_EncodePriority+0x30>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3b03      	subs	r3, #3
 8003c06:	e000      	b.n	8003c0a <NVIC_EncodePriority+0x32>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43d9      	mvns	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	4313      	orrs	r3, r2
         );
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	@ 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c50:	d301      	bcc.n	8003c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00f      	b.n	8003c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c56:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <SysTick_Config+0x40>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5e:	210f      	movs	r1, #15
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	f7ff ff8e 	bl	8003b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <SysTick_Config+0x40>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6e:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <SysTick_Config+0x40>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010

08003c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff29 	bl	8003ae4 <__NVIC_SetPriorityGrouping>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cac:	f7ff ff3e 	bl	8003b2c <__NVIC_GetPriorityGrouping>
 8003cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f7ff ff8e 	bl	8003bd8 <NVIC_EncodePriority>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff5d 	bl	8003b84 <__NVIC_SetPriority>
}
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff31 	bl	8003b48 <__NVIC_EnableIRQ>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ffa2 	bl	8003c40 <SysTick_Config>
 8003cfc:	4603      	mov	r3, r0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e06a      	b.n	8003df0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2223      	movs	r2, #35	@ 0x23
 8003d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fbc9 	bl	80034c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d32:	4b31      	ldr	r3, [pc, #196]	@ (8003df8 <HAL_ETH_Init+0xf0>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	4a30      	ldr	r2, [pc, #192]	@ (8003df8 <HAL_ETH_Init+0xf0>)
 8003d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <HAL_ETH_Init+0xf0>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dfc <HAL_ETH_Init+0xf4>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dfc <HAL_ETH_Init+0xf4>)
 8003d50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d54:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d56:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <HAL_ETH_Init+0xf4>)
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	4927      	ldr	r1, [pc, #156]	@ (8003dfc <HAL_ETH_Init+0xf4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d64:	4b25      	ldr	r3, [pc, #148]	@ (8003dfc <HAL_ETH_Init+0xf4>)
 8003d66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d80:	f7ff fe80 	bl	8003a84 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d86:	e011      	b.n	8003dac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d88:	f7ff fe7c 	bl	8003a84 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003d96:	d909      	bls.n	8003dac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	22e0      	movs	r2, #224	@ 0xe0
 8003da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e021      	b.n	8003df0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e4      	bne.n	8003d88 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f958 	bl	8004074 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f9ff 	bl	80041c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa55 	bl	800427a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f9bd 	bl	8004158 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2210      	movs	r2, #16
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40013800 	.word	0x40013800

08003e00 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4b51      	ldr	r3, [pc, #324]	@ (8003f5c <ETH_SetMACConfig+0x15c>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	7c1b      	ldrb	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <ETH_SetMACConfig+0x28>
 8003e22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e26:	e000      	b.n	8003e2a <ETH_SetMACConfig+0x2a>
 8003e28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7c5b      	ldrb	r3, [r3, #17]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <ETH_SetMACConfig+0x38>
 8003e32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003e36:	e000      	b.n	8003e3a <ETH_SetMACConfig+0x3a>
 8003e38:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	7fdb      	ldrb	r3, [r3, #31]
 8003e46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003e48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	7f92      	ldrb	r2, [r2, #30]
 8003e54:	2a00      	cmp	r2, #0
 8003e56:	d102      	bne.n	8003e5e <ETH_SetMACConfig+0x5e>
 8003e58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e5c:	e000      	b.n	8003e60 <ETH_SetMACConfig+0x60>
 8003e5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003e60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	7f1b      	ldrb	r3, [r3, #28]
 8003e66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	791b      	ldrb	r3, [r3, #4]
 8003e74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003e76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	d102      	bne.n	8003e88 <ETH_SetMACConfig+0x88>
 8003e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e86:	e000      	b.n	8003e8a <ETH_SetMACConfig+0x8a>
 8003e88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7bdb      	ldrb	r3, [r3, #15]
 8003e90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ea0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7ff fdee 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ede:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d101      	bne.n	8003eee <ETH_SetMACConfig+0xee>
 8003eea:	2280      	movs	r2, #128	@ 0x80
 8003eec:	e000      	b.n	8003ef0 <ETH_SetMACConfig+0xf0>
 8003eee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ef0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003efe:	2a01      	cmp	r2, #1
 8003f00:	d101      	bne.n	8003f06 <ETH_SetMACConfig+0x106>
 8003f02:	2208      	movs	r2, #8
 8003f04:	e000      	b.n	8003f08 <ETH_SetMACConfig+0x108>
 8003f06:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f08:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003f10:	2a01      	cmp	r2, #1
 8003f12:	d101      	bne.n	8003f18 <ETH_SetMACConfig+0x118>
 8003f14:	2204      	movs	r2, #4
 8003f16:	e000      	b.n	8003f1a <ETH_SetMACConfig+0x11a>
 8003f18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003f22:	2a01      	cmp	r2, #1
 8003f24:	d101      	bne.n	8003f2a <ETH_SetMACConfig+0x12a>
 8003f26:	2202      	movs	r2, #2
 8003f28:	e000      	b.n	8003f2c <ETH_SetMACConfig+0x12c>
 8003f2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fda9 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	619a      	str	r2, [r3, #24]
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	ff20810f 	.word	0xff20810f

08003f60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4b3d      	ldr	r3, [pc, #244]	@ (8004070 <ETH_SetDMAConfig+0x110>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	7b1b      	ldrb	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <ETH_SetDMAConfig+0x2c>
 8003f86:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003f8a:	e000      	b.n	8003f8e <ETH_SetDMAConfig+0x2e>
 8003f8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	7b5b      	ldrb	r3, [r3, #13]
 8003f92:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f94:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	7f52      	ldrb	r2, [r2, #29]
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d102      	bne.n	8003fa4 <ETH_SetDMAConfig+0x44>
 8003f9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003fa2:	e000      	b.n	8003fa6 <ETH_SetDMAConfig+0x46>
 8003fa4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fa6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	7b9b      	ldrb	r3, [r3, #14]
 8003fac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003fb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	7f1b      	ldrb	r3, [r3, #28]
 8003fba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003fbc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	7f9b      	ldrb	r3, [r3, #30]
 8003fc2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fc4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003fca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fd2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7ff fd50 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004004:	461a      	mov	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	791b      	ldrb	r3, [r3, #4]
 800400e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004014:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800401a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004020:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004028:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800402a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004032:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004038:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004042:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004046:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004054:	2001      	movs	r0, #1
 8004056:	f7ff fd21 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	f8de3f23 	.word	0xf8de3f23

08004074 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0a6      	sub	sp, #152	@ 0x98
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004088:	2300      	movs	r3, #0
 800408a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040b0:	2300      	movs	r3, #0
 80040b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80040d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040da:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80040dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80040e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fe86 	bl	8003e00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004102:	2301      	movs	r3, #1
 8004104:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004110:	2300      	movs	r3, #0
 8004112:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004116:	2300      	movs	r3, #0
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004120:	2301      	movs	r3, #1
 8004122:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004128:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800412a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800412e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004130:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004134:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800413c:	2300      	movs	r3, #0
 800413e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004144:	f107 0308 	add.w	r3, r7, #8
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff08 	bl	8003f60 <ETH_SetDMAConfig>
}
 8004150:	bf00      	nop
 8004152:	3798      	adds	r7, #152	@ 0x98
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3305      	adds	r3, #5
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	3204      	adds	r2, #4
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <ETH_MACAddressConfig+0x68>)
 800417a:	4413      	add	r3, r2
 800417c:	461a      	mov	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3303      	adds	r3, #3
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	061a      	lsls	r2, r3, #24
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3302      	adds	r3, #2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	4313      	orrs	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <ETH_MACAddressConfig+0x6c>)
 80041aa:	4413      	add	r3, r2
 80041ac:	461a      	mov	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6013      	str	r3, [r2, #0]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40028040 	.word	0x40028040
 80041c4:	40028044 	.word	0x40028044

080041c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e03e      	b.n	8004254 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68d9      	ldr	r1, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	3206      	adds	r2, #6
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d80c      	bhi.n	8004238 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	440b      	add	r3, r1
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	e004      	b.n	8004242 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	461a      	mov	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d9bd      	bls.n	80041d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426c:	611a      	str	r2, [r3, #16]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e046      	b.n	8004316 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6919      	ldr	r1, [r3, #16]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80042c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80042cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	3212      	adds	r2, #18
 80042e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d80c      	bhi.n	8004306 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6919      	ldr	r1, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	440b      	add	r3, r1
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e004      	b.n	8004310 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d9b5      	bls.n	8004288 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004346:	60da      	str	r2, [r3, #12]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	@ 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e175      	b.n	8004660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	f040 8164 	bne.w	800465a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d005      	beq.n	80043aa <HAL_GPIO_Init+0x56>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d130      	bne.n	800440c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e0:	2201      	movs	r2, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 0201 	and.w	r2, r3, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b03      	cmp	r3, #3
 8004416:	d017      	beq.n	8004448 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d123      	bne.n	800449c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	08da      	lsrs	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3208      	adds	r2, #8
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80be 	beq.w	800465a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044de:	4b66      	ldr	r3, [pc, #408]	@ (8004678 <HAL_GPIO_Init+0x324>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	4a65      	ldr	r2, [pc, #404]	@ (8004678 <HAL_GPIO_Init+0x324>)
 80044e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ea:	4b63      	ldr	r3, [pc, #396]	@ (8004678 <HAL_GPIO_Init+0x324>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044f6:	4a61      	ldr	r2, [pc, #388]	@ (800467c <HAL_GPIO_Init+0x328>)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	3302      	adds	r3, #2
 80044fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	220f      	movs	r2, #15
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a58      	ldr	r2, [pc, #352]	@ (8004680 <HAL_GPIO_Init+0x32c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d037      	beq.n	8004592 <HAL_GPIO_Init+0x23e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a57      	ldr	r2, [pc, #348]	@ (8004684 <HAL_GPIO_Init+0x330>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d031      	beq.n	800458e <HAL_GPIO_Init+0x23a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a56      	ldr	r2, [pc, #344]	@ (8004688 <HAL_GPIO_Init+0x334>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02b      	beq.n	800458a <HAL_GPIO_Init+0x236>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a55      	ldr	r2, [pc, #340]	@ (800468c <HAL_GPIO_Init+0x338>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d025      	beq.n	8004586 <HAL_GPIO_Init+0x232>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a54      	ldr	r2, [pc, #336]	@ (8004690 <HAL_GPIO_Init+0x33c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <HAL_GPIO_Init+0x22e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a53      	ldr	r2, [pc, #332]	@ (8004694 <HAL_GPIO_Init+0x340>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d019      	beq.n	800457e <HAL_GPIO_Init+0x22a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a52      	ldr	r2, [pc, #328]	@ (8004698 <HAL_GPIO_Init+0x344>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_GPIO_Init+0x226>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a51      	ldr	r2, [pc, #324]	@ (800469c <HAL_GPIO_Init+0x348>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00d      	beq.n	8004576 <HAL_GPIO_Init+0x222>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a50      	ldr	r2, [pc, #320]	@ (80046a0 <HAL_GPIO_Init+0x34c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_Init+0x21e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4f      	ldr	r2, [pc, #316]	@ (80046a4 <HAL_GPIO_Init+0x350>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_GPIO_Init+0x21a>
 800456a:	2309      	movs	r3, #9
 800456c:	e012      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800456e:	230a      	movs	r3, #10
 8004570:	e010      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004572:	2308      	movs	r3, #8
 8004574:	e00e      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004576:	2307      	movs	r3, #7
 8004578:	e00c      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800457a:	2306      	movs	r3, #6
 800457c:	e00a      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800457e:	2305      	movs	r3, #5
 8004580:	e008      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004582:	2304      	movs	r3, #4
 8004584:	e006      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004586:	2303      	movs	r3, #3
 8004588:	e004      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800458a:	2302      	movs	r3, #2
 800458c:	e002      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004592:	2300      	movs	r3, #0
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	f002 0203 	and.w	r2, r2, #3
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	4093      	lsls	r3, r2
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045a4:	4935      	ldr	r1, [pc, #212]	@ (800467c <HAL_GPIO_Init+0x328>)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	3302      	adds	r3, #2
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b2:	4b3d      	ldr	r3, [pc, #244]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045d6:	4a34      	ldr	r2, [pc, #208]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045dc:	4b32      	ldr	r3, [pc, #200]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004600:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004606:	4b28      	ldr	r3, [pc, #160]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800462a:	4a1f      	ldr	r2, [pc, #124]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004630:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004654:	4a14      	ldr	r2, [pc, #80]	@ (80046a8 <HAL_GPIO_Init+0x354>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3301      	adds	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	f67f ae86 	bls.w	8004374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3724      	adds	r7, #36	@ 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	40013800 	.word	0x40013800
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400
 8004688:	40020800 	.word	0x40020800
 800468c:	40020c00 	.word	0x40020c00
 8004690:	40021000 	.word	0x40021000
 8004694:	40021400 	.word	0x40021400
 8004698:	40021800 	.word	0x40021800
 800469c:	40021c00 	.word	0x40021c00
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40022400 	.word	0x40022400
 80046a8:	40013c00 	.word	0x40013c00

080046ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	887b      	ldrh	r3, [r7, #2]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
 80046c8:	e001      	b.n	80046ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
 80046e8:	4613      	mov	r3, r2
 80046ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046ec:	787b      	ldrb	r3, [r7, #1]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80046f8:	e003      	b.n	8004702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	041a      	lsls	r2, r3, #16
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	619a      	str	r2, [r3, #24]
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4013      	ands	r3, r2
 8004726:	041a      	lsls	r2, r3, #16
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	43d9      	mvns	r1, r3
 800472c:	887b      	ldrh	r3, [r7, #2]
 800472e:	400b      	ands	r3, r1
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004744:	b08f      	sub	sp, #60	@ 0x3c
 8004746:	af0a      	add	r7, sp, #40	@ 0x28
 8004748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e116      	b.n	8004982 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff f848 	bl	8003804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2203      	movs	r2, #3
 8004778:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f002 ff54 	bl	8007640 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	687e      	ldr	r6, [r7, #4]
 80047a0:	466d      	mov	r5, sp
 80047a2:	f106 0410 	add.w	r4, r6, #16
 80047a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80047b6:	1d33      	adds	r3, r6, #4
 80047b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ba:	6838      	ldr	r0, [r7, #0]
 80047bc:	f002 fee8 	bl	8007590 <USB_CoreInit>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0d7      	b.n	8004982 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f002 ff42 	bl	8007662 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e04a      	b.n	800487a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	333d      	adds	r3, #61	@ 0x3d
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	333c      	adds	r3, #60	@ 0x3c
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	b298      	uxth	r0, r3
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3344      	adds	r3, #68	@ 0x44
 8004820:	4602      	mov	r2, r0
 8004822:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3340      	adds	r3, #64	@ 0x40
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3348      	adds	r3, #72	@ 0x48
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	334c      	adds	r3, #76	@ 0x4c
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	3354      	adds	r3, #84	@ 0x54
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	3301      	adds	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d3af      	bcc.n	80047e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e044      	b.n	8004914 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	3301      	adds	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d3b5      	bcc.n	800488a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	687e      	ldr	r6, [r7, #4]
 8004926:	466d      	mov	r5, sp
 8004928:	f106 0410 	add.w	r4, r6, #16
 800492c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004938:	e885 0003 	stmia.w	r5, {r0, r1}
 800493c:	1d33      	adds	r3, r6, #4
 800493e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f002 fedb 	bl	80076fc <USB_DevInit>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e014      	b.n	8004982 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f80b 	bl	800498c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f003 f899 	bl	8007ab2 <USB_DevDisconnect>

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800498c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ba:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	10000003 	.word	0x10000003

080049d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a04      	ldr	r2, [pc, #16]	@ (80049f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e2:	6013      	str	r3, [r2, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40007000 	.word	0x40007000

080049f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e29b      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8087 	beq.w	8004b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a18:	4b96      	ldr	r3, [pc, #600]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a24:	4b93      	ldr	r3, [pc, #588]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d112      	bne.n	8004a56 <HAL_RCC_OscConfig+0x62>
 8004a30:	4b90      	ldr	r3, [pc, #576]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d06c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x130>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d168      	bne.n	8004b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e275      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x7a>
 8004a60:	4b84      	ldr	r3, [pc, #528]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a83      	ldr	r2, [pc, #524]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e02e      	b.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x9c>
 8004a76:	4b7f      	ldr	r3, [pc, #508]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b7c      	ldr	r3, [pc, #496]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a7b      	ldr	r2, [pc, #492]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e01d      	b.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0xc0>
 8004a9a:	4b76      	ldr	r3, [pc, #472]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a75      	ldr	r2, [pc, #468]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b73      	ldr	r3, [pc, #460]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a72      	ldr	r2, [pc, #456]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe ffd6 	bl	8003a84 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fe ffd2 	bl	8003a84 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	@ 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e229      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b61      	ldr	r3, [pc, #388]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xe8>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fe ffc2 	bl	8003a84 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fe ffbe 	bl	8003a84 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	@ 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e215      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	4b57      	ldr	r3, [pc, #348]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x110>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d069      	beq.n	8004c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	4b50      	ldr	r3, [pc, #320]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d11c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x190>
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d116      	bne.n	8004b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b56:	4b47      	ldr	r3, [pc, #284]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCC_OscConfig+0x17a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e1e9      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b41      	ldr	r3, [pc, #260]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	493d      	ldr	r1, [pc, #244]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	e040      	b.n	8004c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d023      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8c:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a38      	ldr	r2, [pc, #224]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe ff74 	bl	8003a84 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fe ff70 	bl	8003a84 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e1c7      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	4b30      	ldr	r3, [pc, #192]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4929      	ldr	r1, [pc, #164]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
 8004bd2:	e018      	b.n	8004c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd4:	4b27      	ldr	r3, [pc, #156]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a26      	ldr	r2, [pc, #152]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fe ff50 	bl	8003a84 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be8:	f7fe ff4c 	bl	8003a84 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1a3      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d038      	beq.n	8004c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d019      	beq.n	8004c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1a:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1e:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fe ff2d 	bl	8003a84 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fe ff29 	bl	8003a84 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e180      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c40:	4b0c      	ldr	r3, [pc, #48]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x23a>
 8004c4c:	e01a      	b.n	8004c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c4e:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c52:	4a08      	ldr	r2, [pc, #32]	@ (8004c74 <HAL_RCC_OscConfig+0x280>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fe ff13 	bl	8003a84 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c62:	f7fe ff0f 	bl	8003a84 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d903      	bls.n	8004c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e166      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
 8004c74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c78:	4b92      	ldr	r3, [pc, #584]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ee      	bne.n	8004c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a4 	beq.w	8004dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b8c      	ldr	r3, [pc, #560]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b89      	ldr	r3, [pc, #548]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	4a88      	ldr	r2, [pc, #544]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004caa:	4b86      	ldr	r3, [pc, #536]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cba:	4b83      	ldr	r3, [pc, #524]	@ (8004ec8 <HAL_RCC_OscConfig+0x4d4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d118      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004cc6:	4b80      	ldr	r3, [pc, #512]	@ (8004ec8 <HAL_RCC_OscConfig+0x4d4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7f      	ldr	r2, [pc, #508]	@ (8004ec8 <HAL_RCC_OscConfig+0x4d4>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fed7 	bl	8003a84 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fe fed3 	bl	8003a84 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b64      	cmp	r3, #100	@ 0x64
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e12a      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cec:	4b76      	ldr	r3, [pc, #472]	@ (8004ec8 <HAL_RCC_OscConfig+0x4d4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x31a>
 8004d00:	4b70      	ldr	r3, [pc, #448]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0c:	e02d      	b.n	8004d6a <HAL_RCC_OscConfig+0x376>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x33c>
 8004d16:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d22:	4b68      	ldr	r3, [pc, #416]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	4a67      	ldr	r2, [pc, #412]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x376>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x35e>
 8004d38:	4b62      	ldr	r3, [pc, #392]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	4a61      	ldr	r2, [pc, #388]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d44:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x376>
 8004d52:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	4a5b      	ldr	r2, [pc, #364]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5e:	4b59      	ldr	r3, [pc, #356]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	4a58      	ldr	r2, [pc, #352]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fe fe87 	bl	8003a84 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fe fe83 	bl	8003a84 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0d8      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x386>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fe fe71 	bl	8003a84 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fe fe6d 	bl	8003a84 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0c2      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b41      	ldr	r3, [pc, #260]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80ae 	beq.w	8004f40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de4:	4b37      	ldr	r3, [pc, #220]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d06d      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d14b      	bne.n	8004e90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b32      	ldr	r3, [pc, #200]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a31      	ldr	r2, [pc, #196]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fe fe3e 	bl	8003a84 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fe fe3a 	bl	8003a84 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e091      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	4b29      	ldr	r3, [pc, #164]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	3b01      	subs	r3, #1
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	071b      	lsls	r3, r3, #28
 8004e56:	491b      	ldr	r1, [pc, #108]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fe fe0c 	bl	8003a84 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fe fe08 	bl	8003a84 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e05f      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x47c>
 8004e8e:	e057      	b.n	8004f40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0b      	ldr	r2, [pc, #44]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fdf2 	bl	8003a84 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fe fdee 	bl	8003a84 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e045      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b03      	ldr	r3, [pc, #12]	@ (8004ec4 <HAL_RCC_OscConfig+0x4d0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4b0>
 8004ec2:	e03d      	b.n	8004f40 <HAL_RCC_OscConfig+0x54c>
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <HAL_RCC_OscConfig+0x558>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d030      	beq.n	8004f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d129      	bne.n	8004f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d122      	bne.n	8004f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d119      	bne.n	8004f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	3b01      	subs	r3, #1
 8004f16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d10f      	bne.n	8004f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800

08004f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0d0      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b6a      	ldr	r3, [pc, #424]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d910      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b67      	ldr	r3, [pc, #412]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 020f 	bic.w	r2, r3, #15
 8004f7e:	4965      	ldr	r1, [pc, #404]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b63      	ldr	r3, [pc, #396]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0b8      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb0:	4b59      	ldr	r3, [pc, #356]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4a58      	ldr	r2, [pc, #352]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc8:	4b53      	ldr	r3, [pc, #332]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a52      	ldr	r2, [pc, #328]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd4:	4b50      	ldr	r3, [pc, #320]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	494d      	ldr	r1, [pc, #308]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d040      	beq.n	8005074 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b47      	ldr	r3, [pc, #284]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d115      	bne.n	8005032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e07f      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	4b41      	ldr	r3, [pc, #260]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e073      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005022:	4b3d      	ldr	r3, [pc, #244]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06b      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4936      	ldr	r1, [pc, #216]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fe fd1e 	bl	8003a84 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fe fd1a 	bl	8003a84 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e053      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d210      	bcs.n	80050a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 020f 	bic.w	r2, r3, #15
 800508a:	4922      	ldr	r1, [pc, #136]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b20      	ldr	r3, [pc, #128]	@ (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e032      	b.n	800510a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b0:	4b19      	ldr	r3, [pc, #100]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4916      	ldr	r1, [pc, #88]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	490e      	ldr	r1, [pc, #56]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050e2:	f000 f821 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	490a      	ldr	r1, [pc, #40]	@ (800511c <HAL_RCC_ClockConfig+0x1cc>)
 80050f4:	5ccb      	ldrb	r3, [r1, r3]
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <HAL_RCC_ClockConfig+0x1d0>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050fe:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_ClockConfig+0x1d4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fc7a 	bl	80039fc <HAL_InitTick>

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40023c00 	.word	0x40023c00
 8005118:	40023800 	.word	0x40023800
 800511c:	080092bc 	.word	0x080092bc
 8005120:	2000008c 	.word	0x2000008c
 8005124:	20000090 	.word	0x20000090

08005128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800512c:	b094      	sub	sp, #80	@ 0x50
 800512e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	647b      	str	r3, [r7, #68]	@ 0x44
 8005134:	2300      	movs	r3, #0
 8005136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005138:	2300      	movs	r3, #0
 800513a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005140:	4b79      	ldr	r3, [pc, #484]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x200>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b08      	cmp	r3, #8
 800514a:	d00d      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0x40>
 800514c:	2b08      	cmp	r3, #8
 800514e:	f200 80e1 	bhi.w	8005314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x34>
 8005156:	2b04      	cmp	r3, #4
 8005158:	d003      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x3a>
 800515a:	e0db      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800515c:	4b73      	ldr	r3, [pc, #460]	@ (800532c <HAL_RCC_GetSysClockFreq+0x204>)
 800515e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005160:	e0db      	b.n	800531a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005162:	4b73      	ldr	r3, [pc, #460]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x208>)
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005166:	e0d8      	b.n	800531a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005168:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x200>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005170:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005172:	4b6d      	ldr	r3, [pc, #436]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x200>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d063      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800517e:	4b6a      	ldr	r3, [pc, #424]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x200>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	099b      	lsrs	r3, r3, #6
 8005184:	2200      	movs	r2, #0
 8005186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005188:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005190:	633b      	str	r3, [r7, #48]	@ 0x30
 8005192:	2300      	movs	r3, #0
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
 8005196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	f04f 0000 	mov.w	r0, #0
 80051a2:	f04f 0100 	mov.w	r1, #0
 80051a6:	0159      	lsls	r1, r3, #5
 80051a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ac:	0150      	lsls	r0, r2, #5
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4621      	mov	r1, r4
 80051b4:	1a51      	subs	r1, r2, r1
 80051b6:	6139      	str	r1, [r7, #16]
 80051b8:	4629      	mov	r1, r5
 80051ba:	eb63 0301 	sbc.w	r3, r3, r1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051cc:	4659      	mov	r1, fp
 80051ce:	018b      	lsls	r3, r1, #6
 80051d0:	4651      	mov	r1, sl
 80051d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051d6:	4651      	mov	r1, sl
 80051d8:	018a      	lsls	r2, r1, #6
 80051da:	4651      	mov	r1, sl
 80051dc:	ebb2 0801 	subs.w	r8, r2, r1
 80051e0:	4659      	mov	r1, fp
 80051e2:	eb63 0901 	sbc.w	r9, r3, r1
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051fa:	4690      	mov	r8, r2
 80051fc:	4699      	mov	r9, r3
 80051fe:	4623      	mov	r3, r4
 8005200:	eb18 0303 	adds.w	r3, r8, r3
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	462b      	mov	r3, r5
 8005208:	eb49 0303 	adc.w	r3, r9, r3
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800521a:	4629      	mov	r1, r5
 800521c:	024b      	lsls	r3, r1, #9
 800521e:	4621      	mov	r1, r4
 8005220:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005224:	4621      	mov	r1, r4
 8005226:	024a      	lsls	r2, r1, #9
 8005228:	4610      	mov	r0, r2
 800522a:	4619      	mov	r1, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522e:	2200      	movs	r2, #0
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005238:	f7fa fffe 	bl	8000238 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005244:	e058      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005246:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x200>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	2200      	movs	r2, #0
 800524e:	4618      	mov	r0, r3
 8005250:	4611      	mov	r1, r2
 8005252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
 800525c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	0159      	lsls	r1, r3, #5
 800526e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005272:	0150      	lsls	r0, r2, #5
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4641      	mov	r1, r8
 800527a:	ebb2 0a01 	subs.w	sl, r2, r1
 800527e:	4649      	mov	r1, r9
 8005280:	eb63 0b01 	sbc.w	fp, r3, r1
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005298:	ebb2 040a 	subs.w	r4, r2, sl
 800529c:	eb63 050b 	sbc.w	r5, r3, fp
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	00eb      	lsls	r3, r5, #3
 80052aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ae:	00e2      	lsls	r2, r4, #3
 80052b0:	4614      	mov	r4, r2
 80052b2:	461d      	mov	r5, r3
 80052b4:	4643      	mov	r3, r8
 80052b6:	18e3      	adds	r3, r4, r3
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	464b      	mov	r3, r9
 80052bc:	eb45 0303 	adc.w	r3, r5, r3
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ce:	4629      	mov	r1, r5
 80052d0:	028b      	lsls	r3, r1, #10
 80052d2:	4621      	mov	r1, r4
 80052d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052d8:	4621      	mov	r1, r4
 80052da:	028a      	lsls	r2, r1, #10
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e2:	2200      	movs	r2, #0
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	61fa      	str	r2, [r7, #28]
 80052e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ec:	f7fa ffa4 	bl	8000238 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4613      	mov	r3, r2
 80052f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80052f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x200>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	3301      	adds	r3, #1
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800530a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005312:	e002      	b.n	800531a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005314:	4b05      	ldr	r3, [pc, #20]	@ (800532c <HAL_RCC_GetSysClockFreq+0x204>)
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800531a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800531c:	4618      	mov	r0, r3
 800531e:	3750      	adds	r7, #80	@ 0x50
 8005320:	46bd      	mov	sp, r7
 8005322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800
 800532c:	00f42400 	.word	0x00f42400
 8005330:	007a1200 	.word	0x007a1200

08005334 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005338:	4b03      	ldr	r3, [pc, #12]	@ (8005348 <HAL_RCC_GetHCLKFreq+0x14>)
 800533a:	681b      	ldr	r3, [r3, #0]
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	2000008c 	.word	0x2000008c

0800534c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005350:	f7ff fff0 	bl	8005334 <HAL_RCC_GetHCLKFreq>
 8005354:	4602      	mov	r2, r0
 8005356:	4b05      	ldr	r3, [pc, #20]	@ (800536c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	0a9b      	lsrs	r3, r3, #10
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	4903      	ldr	r1, [pc, #12]	@ (8005370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005362:	5ccb      	ldrb	r3, [r1, r3]
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40023800 	.word	0x40023800
 8005370:	080092cc 	.word	0x080092cc

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005378:	f7ff ffdc 	bl	8005334 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0b5b      	lsrs	r3, r3, #13
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4903      	ldr	r1, [pc, #12]	@ (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023800 	.word	0x40023800
 8005398:	080092cc 	.word	0x080092cc

0800539c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d012      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053c4:	4b69      	ldr	r3, [pc, #420]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a68      	ldr	r2, [pc, #416]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80053ce:	6093      	str	r3, [r2, #8]
 80053d0:	4b66      	ldr	r3, [pc, #408]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d8:	4964      	ldr	r1, [pc, #400]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053e6:	2301      	movs	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d017      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053f6:	4b5d      	ldr	r3, [pc, #372]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005404:	4959      	ldr	r1, [pc, #356]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005414:	d101      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005416:	2301      	movs	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d017      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005432:	4b4e      	ldr	r3, [pc, #312]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005438:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	494a      	ldr	r1, [pc, #296]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005450:	d101      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005452:	2301      	movs	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 808b 	beq.w	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b3a      	ldr	r3, [pc, #232]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	4a39      	ldr	r2, [pc, #228]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548a:	6413      	str	r3, [r2, #64]	@ 0x40
 800548c:	4b37      	ldr	r3, [pc, #220]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005498:	4b35      	ldr	r3, [pc, #212]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a34      	ldr	r2, [pc, #208]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800549e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a4:	f7fe faee 	bl	8003a84 <HAL_GetTick>
 80054a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ac:	f7fe faea 	bl	8003a84 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	@ 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e38f      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054be:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ca:	4b28      	ldr	r3, [pc, #160]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d035      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d02e      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054e8:	4b20      	ldr	r3, [pc, #128]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054f2:	4b1e      	ldr	r3, [pc, #120]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f6:	4a1d      	ldr	r2, [pc, #116]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054fe:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	4a1a      	ldr	r2, [pc, #104]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005508:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005510:	4b16      	ldr	r3, [pc, #88]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d114      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fe fab2 	bl	8003a84 <HAL_GetTick>
 8005520:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005522:	e00a      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fe faae 	bl	8003a84 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e351      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553a:	4b0c      	ldr	r3, [pc, #48]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005552:	d111      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005560:	4b04      	ldr	r3, [pc, #16]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005562:	400b      	ands	r3, r1
 8005564:	4901      	ldr	r1, [pc, #4]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
 800556a:	e00b      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800556c:	40023800 	.word	0x40023800
 8005570:	40007000 	.word	0x40007000
 8005574:	0ffffcff 	.word	0x0ffffcff
 8005578:	4bac      	ldr	r3, [pc, #688]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4aab      	ldr	r2, [pc, #684]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005582:	6093      	str	r3, [r2, #8]
 8005584:	4ba9      	ldr	r3, [pc, #676]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005586:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005590:	49a6      	ldr	r1, [pc, #664]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005592:	4313      	orrs	r3, r2
 8005594:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d010      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055a2:	4ba2      	ldr	r3, [pc, #648]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a8:	4aa0      	ldr	r2, [pc, #640]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80055b2:	4b9e      	ldr	r3, [pc, #632]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	499b      	ldr	r1, [pc, #620]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d0:	4b96      	ldr	r3, [pc, #600]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055de:	4993      	ldr	r1, [pc, #588]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055f2:	4b8e      	ldr	r3, [pc, #568]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005600:	498a      	ldr	r1, [pc, #552]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005614:	4b85      	ldr	r3, [pc, #532]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005622:	4982      	ldr	r1, [pc, #520]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005636:	4b7d      	ldr	r3, [pc, #500]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005644:	4979      	ldr	r1, [pc, #484]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005658:	4b74      	ldr	r3, [pc, #464]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	4971      	ldr	r1, [pc, #452]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567a:	4b6c      	ldr	r3, [pc, #432]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005680:	f023 020c 	bic.w	r2, r3, #12
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005688:	4968      	ldr	r1, [pc, #416]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800569c:	4b63      	ldr	r3, [pc, #396]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056aa:	4960      	ldr	r1, [pc, #384]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056be:	4b5b      	ldr	r3, [pc, #364]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	4957      	ldr	r1, [pc, #348]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e0:	4b52      	ldr	r3, [pc, #328]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	494f      	ldr	r1, [pc, #316]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005702:	4b4a      	ldr	r3, [pc, #296]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005708:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005710:	4946      	ldr	r1, [pc, #280]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005724:	4b41      	ldr	r3, [pc, #260]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005732:	493e      	ldr	r1, [pc, #248]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005746:	4b39      	ldr	r3, [pc, #228]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005754:	4935      	ldr	r1, [pc, #212]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005768:	4b30      	ldr	r3, [pc, #192]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005776:	492d      	ldr	r1, [pc, #180]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d011      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800578a:	4b28      	ldr	r3, [pc, #160]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005790:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005798:	4924      	ldr	r1, [pc, #144]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a8:	d101      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ca:	4b18      	ldr	r3, [pc, #96]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d8:	4914      	ldr	r1, [pc, #80]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057ec:	4b0f      	ldr	r3, [pc, #60]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057fc:	490b      	ldr	r1, [pc, #44]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005810:	4b06      	ldr	r3, [pc, #24]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005816:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005820:	4902      	ldr	r1, [pc, #8]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800583c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005842:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	4986      	ldr	r1, [pc, #536]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005860:	4b81      	ldr	r3, [pc, #516]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005866:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005870:	497d      	ldr	r1, [pc, #500]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d006      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80d6 	beq.w	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800588c:	4b76      	ldr	r3, [pc, #472]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a75      	ldr	r2, [pc, #468]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005898:	f7fe f8f4 	bl	8003a84 <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058a0:	f7fe f8f0 	bl	8003a84 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	@ 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e195      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d021      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11d      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058d2:	4b65      	ldr	r3, [pc, #404]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d8:	0c1b      	lsrs	r3, r3, #16
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058e0:	4b61      	ldr	r3, [pc, #388]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e6:	0e1b      	lsrs	r3, r3, #24
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	019a      	lsls	r2, r3, #6
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	4958      	ldr	r1, [pc, #352]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02e      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005938:	d129      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800593a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005948:	4b47      	ldr	r3, [pc, #284]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	019a      	lsls	r2, r3, #6
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	071b      	lsls	r3, r3, #28
 800596e:	493e      	ldr	r1, [pc, #248]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005976:	4b3c      	ldr	r3, [pc, #240]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800597c:	f023 021f 	bic.w	r2, r3, #31
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	3b01      	subs	r3, #1
 8005986:	4938      	ldr	r1, [pc, #224]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01d      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800599a:	4b33      	ldr	r3, [pc, #204]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ae:	0f1b      	lsrs	r3, r3, #28
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	019a      	lsls	r2, r3, #6
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	431a      	orrs	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	071b      	lsls	r3, r3, #28
 80059ce:	4926      	ldr	r1, [pc, #152]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d011      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	019a      	lsls	r2, r3, #6
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	071b      	lsls	r3, r3, #28
 80059fe:	491a      	ldr	r1, [pc, #104]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a06:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a12:	f7fe f837 	bl	8003a84 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a1a:	f7fe f833 	bl	8003a84 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b64      	cmp	r3, #100	@ 0x64
 8005a26:	d901      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0d8      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	f040 80ce 	bne.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a40:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a08      	ldr	r2, [pc, #32]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4c:	f7fe f81a 	bl	8003a84 <HAL_GetTick>
 8005a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a52:	e00b      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a54:	f7fe f816 	bl	8003a84 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	@ 0x64
 8005a60:	d904      	bls.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e0bb      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a66:	bf00      	nop
 8005a68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a78:	d0ec      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02e      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d12a      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aa2:	4b51      	ldr	r3, [pc, #324]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab6:	0f1b      	lsrs	r3, r3, #28
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	019a      	lsls	r2, r3, #6
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	061b      	lsls	r3, r3, #24
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	071b      	lsls	r3, r3, #28
 8005ad6:	4944      	ldr	r1, [pc, #272]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ade:	4b42      	ldr	r3, [pc, #264]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	3b01      	subs	r3, #1
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	493d      	ldr	r1, [pc, #244]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d022      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b0c:	d11d      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b0e:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b14:	0e1b      	lsrs	r3, r3, #24
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b1c:	4b32      	ldr	r3, [pc, #200]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	0f1b      	lsrs	r3, r3, #28
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	019a      	lsls	r2, r3, #6
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	431a      	orrs	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	4929      	ldr	r1, [pc, #164]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d028      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b56:	4b24      	ldr	r3, [pc, #144]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5c:	0e1b      	lsrs	r3, r3, #24
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b64:	4b20      	ldr	r3, [pc, #128]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	019a      	lsls	r2, r3, #6
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	071b      	lsls	r3, r3, #28
 8005b8a:	4917      	ldr	r1, [pc, #92]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b92:	4b15      	ldr	r3, [pc, #84]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	4911      	ldr	r1, [pc, #68]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a0e      	ldr	r2, [pc, #56]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb4:	f7fd ff66 	bl	8003a84 <HAL_GetTick>
 8005bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bbc:	f7fd ff62 	bl	8003a84 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	@ 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e007      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bda:	d1ef      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800

08005bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e09d      	b.n	8005d3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d108      	bne.n	8005c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c0e:	d009      	beq.n	8005c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	61da      	str	r2, [r3, #28]
 8005c16:	e005      	b.n	8005c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fd fcf8 	bl	8003634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c64:	d902      	bls.n	8005c6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e002      	b.n	8005c72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c7a:	d007      	beq.n	8005c8c <HAL_SPI_Init+0xa0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c84:	d002      	beq.n	8005c8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cce:	ea42 0103 	orr.w	r1, r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	f003 0204 	and.w	r2, r3, #4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d08:	ea42 0103 	orr.w	r1, r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b088      	sub	sp, #32
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_SPI_Transmit+0x22>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e158      	b.n	8006016 <HAL_SPI_Transmit+0x2d4>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d6c:	f7fd fe8a 	bl	8003a84 <HAL_GetTick>
 8005d70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d002      	beq.n	8005d88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
 8005d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d86:	e13d      	b.n	8006004 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_SPI_Transmit+0x52>
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d98:	e134      	b.n	8006004 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005de4:	d10f      	bne.n	8005e06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d007      	beq.n	8005e24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e2c:	d94b      	bls.n	8005ec6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_SPI_Transmit+0xfa>
 8005e36:	8afb      	ldrh	r3, [r7, #22]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d13e      	bne.n	8005eba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e60:	e02b      	b.n	8005eba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d112      	bne.n	8005e96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e74:	881a      	ldrh	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e80:	1c9a      	adds	r2, r3, #2
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e94:	e011      	b.n	8005eba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e96:	f7fd fdf5 	bl	8003a84 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d803      	bhi.n	8005eae <HAL_SPI_Transmit+0x16c>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d102      	bne.n	8005eb4 <HAL_SPI_Transmit+0x172>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eb8:	e0a4      	b.n	8006004 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1ce      	bne.n	8005e62 <HAL_SPI_Transmit+0x120>
 8005ec4:	e07c      	b.n	8005fc0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_Transmit+0x192>
 8005ece:	8afb      	ldrh	r3, [r7, #22]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d170      	bne.n	8005fb6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d912      	bls.n	8005f04 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	881a      	ldrh	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b02      	subs	r3, #2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f02:	e058      	b.n	8005fb6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	330c      	adds	r3, #12
 8005f0e:	7812      	ldrb	r2, [r2, #0]
 8005f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f2a:	e044      	b.n	8005fb6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d12b      	bne.n	8005f92 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d912      	bls.n	8005f6a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	881a      	ldrh	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b02      	subs	r3, #2
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f68:	e025      	b.n	8005fb6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f90:	e011      	b.n	8005fb6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f92:	f7fd fd77 	bl	8003a84 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d803      	bhi.n	8005faa <HAL_SPI_Transmit+0x268>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d102      	bne.n	8005fb0 <HAL_SPI_Transmit+0x26e>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fb4:	e026      	b.n	8006004 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1b5      	bne.n	8005f2c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f949 	bl	800625c <SPI_EndRxTxTransaction>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e000      	b.n	8006004 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006014:	7ffb      	ldrb	r3, [r7, #31]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006030:	f7fd fd28 	bl	8003a84 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006040:	f7fd fd20 	bl	8003a84 <HAL_GetTick>
 8006044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006046:	4b39      	ldr	r3, [pc, #228]	@ (800612c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	0d1b      	lsrs	r3, r3, #20
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006056:	e054      	b.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d050      	beq.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006060:	f7fd fd10 	bl	8003a84 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	d902      	bls.n	8006076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d13d      	bne.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800608e:	d111      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006098:	d004      	beq.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a2:	d107      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060bc:	d10f      	bne.n	80060de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e017      	b.n	8006122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3b01      	subs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	429a      	cmp	r2, r3
 800611e:	d19b      	bne.n	8006058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	2000008c 	.word	0x2000008c

08006130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	@ 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006142:	f7fd fc9f 	bl	8003a84 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	4413      	add	r3, r2
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006152:	f7fd fc97 	bl	8003a84 <HAL_GetTick>
 8006156:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006160:	4b3d      	ldr	r3, [pc, #244]	@ (8006258 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	00da      	lsls	r2, r3, #3
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	0d1b      	lsrs	r3, r3, #20
 8006170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006178:	e060      	b.n	800623c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006180:	d107      	bne.n	8006192 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006190:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d050      	beq.n	800623c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800619a:	f7fd fc73 	bl	8003a84 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d902      	bls.n	80061b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d13d      	bne.n	800622c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061c8:	d111      	bne.n	80061ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d2:	d004      	beq.n	80061de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061dc:	d107      	bne.n	80061ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f6:	d10f      	bne.n	8006218 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e010      	b.n	800624e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	3b01      	subs	r3, #1
 800623a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	d196      	bne.n	800617a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3728      	adds	r7, #40	@ 0x28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2000008c 	.word	0x2000008c

0800625c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff ff5b 	bl	8006130 <SPI_WaitFifoStateUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006284:	f043 0220 	orr.w	r2, r3, #32
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e046      	b.n	800631e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006290:	4b25      	ldr	r3, [pc, #148]	@ (8006328 <SPI_EndRxTxTransaction+0xcc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a25      	ldr	r2, [pc, #148]	@ (800632c <SPI_EndRxTxTransaction+0xd0>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	0d5b      	lsrs	r3, r3, #21
 800629c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ae:	d112      	bne.n	80062d6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	2180      	movs	r1, #128	@ 0x80
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff feb0 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e023      	b.n	800631e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3b01      	subs	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ec:	2b80      	cmp	r3, #128	@ 0x80
 80062ee:	d0f2      	beq.n	80062d6 <SPI_EndRxTxTransaction+0x7a>
 80062f0:	e000      	b.n	80062f4 <SPI_EndRxTxTransaction+0x98>
        break;
 80062f2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff ff15 	bl	8006130 <SPI_WaitFifoStateUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	f043 0220 	orr.w	r2, r3, #32
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e000      	b.n	800631e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	2000008c 	.word	0x2000008c
 800632c:	165e9f81 	.word	0x165e9f81

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e049      	b.n	80063d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fd f9ce 	bl	80036f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 fac0 	bl	80068f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e054      	b.n	80064a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a26      	ldr	r2, [pc, #152]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006422:	d01d      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a22      	ldr	r2, [pc, #136]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a21      	ldr	r2, [pc, #132]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1f      	ldr	r2, [pc, #124]	@ (80064bc <HAL_TIM_Base_Start_IT+0xdc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1e      	ldr	r2, [pc, #120]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1c      	ldr	r2, [pc, #112]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x80>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d115      	bne.n	800648c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	4b19      	ldr	r3, [pc, #100]	@ (80064cc <HAL_TIM_Base_Start_IT+0xec>)
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b06      	cmp	r3, #6
 8006470:	d015      	beq.n	800649e <HAL_TIM_Base_Start_IT+0xbe>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006478:	d011      	beq.n	800649e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648a:	e008      	b.n	800649e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e000      	b.n	80064a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40001800 	.word	0x40001800
 80064cc:	00010007 	.word	0x00010007

080064d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0202 	mvn.w	r2, #2
 80064fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9d0 	bl	80068b8 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9c2 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f9d3 	bl	80068cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b04      	cmp	r3, #4
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0204 	mvn.w	r2, #4
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9a6 	bl	80068b8 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f998 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f9a9 	bl	80068cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b08      	cmp	r3, #8
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0208 	mvn.w	r2, #8
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f97c 	bl	80068b8 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f96e 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f97f 	bl	80068cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f952 	bl	80068b8 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f944 	bl	80068a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f955 	bl	80068cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10e      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0201 	mvn.w	r2, #1
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fc fedc 	bl	800340c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665e:	2b80      	cmp	r3, #128	@ 0x80
 8006660:	d10e      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666c:	2b80      	cmp	r3, #128	@ 0x80
 800666e:	d107      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb0c 	bl	8006c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	2b80      	cmp	r3, #128	@ 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 faff 	bl	8006cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b8:	2b40      	cmp	r3, #64	@ 0x40
 80066ba:	d10e      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d107      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f903 	bl	80068e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d10e      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d107      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f06f 0220 	mvn.w	r2, #32
 80066fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fabf 	bl	8006c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_TIM_ConfigClockSource+0x1c>
 8006728:	2302      	movs	r3, #2
 800672a:	e0b4      	b.n	8006896 <HAL_TIM_ConfigClockSource+0x186>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	4b56      	ldr	r3, [pc, #344]	@ (80068a0 <HAL_TIM_ConfigClockSource+0x190>)
 8006748:	4013      	ands	r3, r2
 800674a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006764:	d03e      	beq.n	80067e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800676a:	f200 8087 	bhi.w	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006772:	f000 8086 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x172>
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677a:	d87f      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800677c:	2b70      	cmp	r3, #112	@ 0x70
 800677e:	d01a      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006780:	2b70      	cmp	r3, #112	@ 0x70
 8006782:	d87b      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 8006784:	2b60      	cmp	r3, #96	@ 0x60
 8006786:	d050      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x11a>
 8006788:	2b60      	cmp	r3, #96	@ 0x60
 800678a:	d877      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800678c:	2b50      	cmp	r3, #80	@ 0x50
 800678e:	d03c      	beq.n	800680a <HAL_TIM_ConfigClockSource+0xfa>
 8006790:	2b50      	cmp	r3, #80	@ 0x50
 8006792:	d873      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 8006794:	2b40      	cmp	r3, #64	@ 0x40
 8006796:	d058      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x13a>
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d86f      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 800679c:	2b30      	cmp	r3, #48	@ 0x30
 800679e:	d064      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067a0:	2b30      	cmp	r3, #48	@ 0x30
 80067a2:	d86b      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d060      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d867      	bhi.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d05c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d05a      	beq.n	800686a <HAL_TIM_ConfigClockSource+0x15a>
 80067b4:	e062      	b.n	800687c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067c6:	f000 f9af 	bl	8006b28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	609a      	str	r2, [r3, #8]
      break;
 80067e2:	e04f      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067f4:	f000 f998 	bl	8006b28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006806:	609a      	str	r2, [r3, #8]
      break;
 8006808:	e03c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	461a      	mov	r2, r3
 8006818:	f000 f90c 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2150      	movs	r1, #80	@ 0x50
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f965 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8006828:	e02c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006836:	461a      	mov	r2, r3
 8006838:	f000 f92b 	bl	8006a92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2160      	movs	r1, #96	@ 0x60
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f955 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8006848:	e01c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006856:	461a      	mov	r2, r3
 8006858:	f000 f8ec 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2140      	movs	r1, #64	@ 0x40
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f945 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8006868:	e00c      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f000 f93c 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 800687a:	e003      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e000      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	fffeff88 	.word	0xfffeff88

080068a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a40      	ldr	r2, [pc, #256]	@ (8006a08 <TIM_Base_SetConfig+0x114>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d013      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006912:	d00f      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3d      	ldr	r2, [pc, #244]	@ (8006a0c <TIM_Base_SetConfig+0x118>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00b      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3c      	ldr	r2, [pc, #240]	@ (8006a10 <TIM_Base_SetConfig+0x11c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3b      	ldr	r2, [pc, #236]	@ (8006a14 <TIM_Base_SetConfig+0x120>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3a      	ldr	r2, [pc, #232]	@ (8006a18 <TIM_Base_SetConfig+0x124>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d108      	bne.n	8006946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2f      	ldr	r2, [pc, #188]	@ (8006a08 <TIM_Base_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d02b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006954:	d027      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2c      	ldr	r2, [pc, #176]	@ (8006a0c <TIM_Base_SetConfig+0x118>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d023      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2b      	ldr	r2, [pc, #172]	@ (8006a10 <TIM_Base_SetConfig+0x11c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01f      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2a      	ldr	r2, [pc, #168]	@ (8006a14 <TIM_Base_SetConfig+0x120>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a29      	ldr	r2, [pc, #164]	@ (8006a18 <TIM_Base_SetConfig+0x124>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d017      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a28      	ldr	r2, [pc, #160]	@ (8006a1c <TIM_Base_SetConfig+0x128>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a27      	ldr	r2, [pc, #156]	@ (8006a20 <TIM_Base_SetConfig+0x12c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a26      	ldr	r2, [pc, #152]	@ (8006a24 <TIM_Base_SetConfig+0x130>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a25      	ldr	r2, [pc, #148]	@ (8006a28 <TIM_Base_SetConfig+0x134>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a24      	ldr	r2, [pc, #144]	@ (8006a2c <TIM_Base_SetConfig+0x138>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a23      	ldr	r2, [pc, #140]	@ (8006a30 <TIM_Base_SetConfig+0x13c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d108      	bne.n	80069b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a0a      	ldr	r2, [pc, #40]	@ (8006a08 <TIM_Base_SetConfig+0x114>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_Base_SetConfig+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006a18 <TIM_Base_SetConfig+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d103      	bne.n	80069f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	615a      	str	r2, [r3, #20]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40010400 	.word	0x40010400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800
 8006a28:	40001800 	.word	0x40001800
 8006a2c:	40001c00 	.word	0x40001c00
 8006a30:	40002000 	.word	0x40002000

08006a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 030a 	bic.w	r3, r3, #10
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0210 	bic.w	r2, r3, #16
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f043 0307 	orr.w	r3, r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	021a      	lsls	r2, r3, #8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e06d      	b.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a30      	ldr	r2, [pc, #192]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2f      	ldr	r2, [pc, #188]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d108      	bne.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a20      	ldr	r2, [pc, #128]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d022      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf2:	d01d      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1c      	ldr	r2, [pc, #112]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a15      	ldr	r2, [pc, #84]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a16      	ldr	r2, [pc, #88]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10c      	bne.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40010400 	.word	0x40010400
 8006c70:	40000400 	.word	0x40000400
 8006c74:	40000800 	.word	0x40000800
 8006c78:	40000c00 	.word	0x40000c00
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40001800 	.word	0x40001800

08006c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e040      	b.n	8006d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fc fd2e 	bl	8003744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2224      	movs	r2, #36	@ 0x24
 8006cec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f82c 	bl	8006d5c <UART_SetConfig>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e022      	b.n	8006d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa84 	bl	8007224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fb0b 	bl	8007368 <UART_CheckIdleState>
 8006d52:	4603      	mov	r3, r0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4ba6      	ldr	r3, [pc, #664]	@ (8007020 <UART_SetConfig+0x2c4>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	6979      	ldr	r1, [r7, #20]
 8006d90:	430b      	orrs	r3, r1
 8006d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a94      	ldr	r2, [pc, #592]	@ (8007024 <UART_SetConfig+0x2c8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d120      	bne.n	8006e1a <UART_SetConfig+0xbe>
 8006dd8:	4b93      	ldr	r3, [pc, #588]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d816      	bhi.n	8006e14 <UART_SetConfig+0xb8>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <UART_SetConfig+0x90>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006dfd 	.word	0x08006dfd
 8006df0:	08006e09 	.word	0x08006e09
 8006df4:	08006e03 	.word	0x08006e03
 8006df8:	08006e0f 	.word	0x08006e0f
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e150      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e02:	2302      	movs	r3, #2
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e14d      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e14a      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e147      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e144      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a83      	ldr	r2, [pc, #524]	@ (800702c <UART_SetConfig+0x2d0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d132      	bne.n	8006e8a <UART_SetConfig+0x12e>
 8006e24:	4b80      	ldr	r3, [pc, #512]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2a:	f003 030c 	and.w	r3, r3, #12
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d828      	bhi.n	8006e84 <UART_SetConfig+0x128>
 8006e32:	a201      	add	r2, pc, #4	@ (adr r2, 8006e38 <UART_SetConfig+0xdc>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e6d 	.word	0x08006e6d
 8006e3c:	08006e85 	.word	0x08006e85
 8006e40:	08006e85 	.word	0x08006e85
 8006e44:	08006e85 	.word	0x08006e85
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006e85 	.word	0x08006e85
 8006e50:	08006e85 	.word	0x08006e85
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006e73 	.word	0x08006e73
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e85 	.word	0x08006e85
 8006e68:	08006e7f 	.word	0x08006e7f
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e118      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e72:	2302      	movs	r3, #2
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e115      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e112      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e7e:	2308      	movs	r3, #8
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e10f      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e84:	2310      	movs	r3, #16
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e10c      	b.n	80070a4 <UART_SetConfig+0x348>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a68      	ldr	r2, [pc, #416]	@ (8007030 <UART_SetConfig+0x2d4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d120      	bne.n	8006ed6 <UART_SetConfig+0x17a>
 8006e94:	4b64      	ldr	r3, [pc, #400]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e9e:	2b30      	cmp	r3, #48	@ 0x30
 8006ea0:	d013      	beq.n	8006eca <UART_SetConfig+0x16e>
 8006ea2:	2b30      	cmp	r3, #48	@ 0x30
 8006ea4:	d814      	bhi.n	8006ed0 <UART_SetConfig+0x174>
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d009      	beq.n	8006ebe <UART_SetConfig+0x162>
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d810      	bhi.n	8006ed0 <UART_SetConfig+0x174>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <UART_SetConfig+0x15c>
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d006      	beq.n	8006ec4 <UART_SetConfig+0x168>
 8006eb6:	e00b      	b.n	8006ed0 <UART_SetConfig+0x174>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e0f2      	b.n	80070a4 <UART_SetConfig+0x348>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e0ef      	b.n	80070a4 <UART_SetConfig+0x348>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e0ec      	b.n	80070a4 <UART_SetConfig+0x348>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e0e9      	b.n	80070a4 <UART_SetConfig+0x348>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e0e6      	b.n	80070a4 <UART_SetConfig+0x348>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a56      	ldr	r2, [pc, #344]	@ (8007034 <UART_SetConfig+0x2d8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d120      	bne.n	8006f22 <UART_SetConfig+0x1c6>
 8006ee0:	4b51      	ldr	r3, [pc, #324]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eec:	d013      	beq.n	8006f16 <UART_SetConfig+0x1ba>
 8006eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ef0:	d814      	bhi.n	8006f1c <UART_SetConfig+0x1c0>
 8006ef2:	2b80      	cmp	r3, #128	@ 0x80
 8006ef4:	d009      	beq.n	8006f0a <UART_SetConfig+0x1ae>
 8006ef6:	2b80      	cmp	r3, #128	@ 0x80
 8006ef8:	d810      	bhi.n	8006f1c <UART_SetConfig+0x1c0>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <UART_SetConfig+0x1a8>
 8006efe:	2b40      	cmp	r3, #64	@ 0x40
 8006f00:	d006      	beq.n	8006f10 <UART_SetConfig+0x1b4>
 8006f02:	e00b      	b.n	8006f1c <UART_SetConfig+0x1c0>
 8006f04:	2300      	movs	r3, #0
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e0cc      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e0c9      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f10:	2304      	movs	r3, #4
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e0c6      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f16:	2308      	movs	r3, #8
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e0c3      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e0c0      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a44      	ldr	r2, [pc, #272]	@ (8007038 <UART_SetConfig+0x2dc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d125      	bne.n	8006f78 <UART_SetConfig+0x21c>
 8006f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d017      	beq.n	8006f6c <UART_SetConfig+0x210>
 8006f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f40:	d817      	bhi.n	8006f72 <UART_SetConfig+0x216>
 8006f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f46:	d00b      	beq.n	8006f60 <UART_SetConfig+0x204>
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4c:	d811      	bhi.n	8006f72 <UART_SetConfig+0x216>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <UART_SetConfig+0x1fe>
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f56:	d006      	beq.n	8006f66 <UART_SetConfig+0x20a>
 8006f58:	e00b      	b.n	8006f72 <UART_SetConfig+0x216>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e0a1      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f60:	2302      	movs	r3, #2
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e09e      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f66:	2304      	movs	r3, #4
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	e09b      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	77fb      	strb	r3, [r7, #31]
 8006f70:	e098      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f72:	2310      	movs	r3, #16
 8006f74:	77fb      	strb	r3, [r7, #31]
 8006f76:	e095      	b.n	80070a4 <UART_SetConfig+0x348>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800703c <UART_SetConfig+0x2e0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d125      	bne.n	8006fce <UART_SetConfig+0x272>
 8006f82:	4b29      	ldr	r3, [pc, #164]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f90:	d017      	beq.n	8006fc2 <UART_SetConfig+0x266>
 8006f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f96:	d817      	bhi.n	8006fc8 <UART_SetConfig+0x26c>
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f9c:	d00b      	beq.n	8006fb6 <UART_SetConfig+0x25a>
 8006f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa2:	d811      	bhi.n	8006fc8 <UART_SetConfig+0x26c>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <UART_SetConfig+0x254>
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fac:	d006      	beq.n	8006fbc <UART_SetConfig+0x260>
 8006fae:	e00b      	b.n	8006fc8 <UART_SetConfig+0x26c>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e076      	b.n	80070a4 <UART_SetConfig+0x348>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	e073      	b.n	80070a4 <UART_SetConfig+0x348>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	77fb      	strb	r3, [r7, #31]
 8006fc0:	e070      	b.n	80070a4 <UART_SetConfig+0x348>
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	77fb      	strb	r3, [r7, #31]
 8006fc6:	e06d      	b.n	80070a4 <UART_SetConfig+0x348>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e06a      	b.n	80070a4 <UART_SetConfig+0x348>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007040 <UART_SetConfig+0x2e4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d138      	bne.n	800704a <UART_SetConfig+0x2ee>
 8006fd8:	4b13      	ldr	r3, [pc, #76]	@ (8007028 <UART_SetConfig+0x2cc>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006fe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fe6:	d017      	beq.n	8007018 <UART_SetConfig+0x2bc>
 8006fe8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fec:	d82a      	bhi.n	8007044 <UART_SetConfig+0x2e8>
 8006fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff2:	d00b      	beq.n	800700c <UART_SetConfig+0x2b0>
 8006ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff8:	d824      	bhi.n	8007044 <UART_SetConfig+0x2e8>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <UART_SetConfig+0x2aa>
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007002:	d006      	beq.n	8007012 <UART_SetConfig+0x2b6>
 8007004:	e01e      	b.n	8007044 <UART_SetConfig+0x2e8>
 8007006:	2300      	movs	r3, #0
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e04b      	b.n	80070a4 <UART_SetConfig+0x348>
 800700c:	2302      	movs	r3, #2
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e048      	b.n	80070a4 <UART_SetConfig+0x348>
 8007012:	2304      	movs	r3, #4
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e045      	b.n	80070a4 <UART_SetConfig+0x348>
 8007018:	2308      	movs	r3, #8
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e042      	b.n	80070a4 <UART_SetConfig+0x348>
 800701e:	bf00      	nop
 8007020:	efff69f3 	.word	0xefff69f3
 8007024:	40011000 	.word	0x40011000
 8007028:	40023800 	.word	0x40023800
 800702c:	40004400 	.word	0x40004400
 8007030:	40004800 	.word	0x40004800
 8007034:	40004c00 	.word	0x40004c00
 8007038:	40005000 	.word	0x40005000
 800703c:	40011400 	.word	0x40011400
 8007040:	40007800 	.word	0x40007800
 8007044:	2310      	movs	r3, #16
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e02c      	b.n	80070a4 <UART_SetConfig+0x348>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a72      	ldr	r2, [pc, #456]	@ (8007218 <UART_SetConfig+0x4bc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d125      	bne.n	80070a0 <UART_SetConfig+0x344>
 8007054:	4b71      	ldr	r3, [pc, #452]	@ (800721c <UART_SetConfig+0x4c0>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800705e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007062:	d017      	beq.n	8007094 <UART_SetConfig+0x338>
 8007064:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007068:	d817      	bhi.n	800709a <UART_SetConfig+0x33e>
 800706a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800706e:	d00b      	beq.n	8007088 <UART_SetConfig+0x32c>
 8007070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007074:	d811      	bhi.n	800709a <UART_SetConfig+0x33e>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <UART_SetConfig+0x326>
 800707a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800707e:	d006      	beq.n	800708e <UART_SetConfig+0x332>
 8007080:	e00b      	b.n	800709a <UART_SetConfig+0x33e>
 8007082:	2300      	movs	r3, #0
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e00d      	b.n	80070a4 <UART_SetConfig+0x348>
 8007088:	2302      	movs	r3, #2
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e00a      	b.n	80070a4 <UART_SetConfig+0x348>
 800708e:	2304      	movs	r3, #4
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e007      	b.n	80070a4 <UART_SetConfig+0x348>
 8007094:	2308      	movs	r3, #8
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e004      	b.n	80070a4 <UART_SetConfig+0x348>
 800709a:	2310      	movs	r3, #16
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e001      	b.n	80070a4 <UART_SetConfig+0x348>
 80070a0:	2310      	movs	r3, #16
 80070a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ac:	d15b      	bne.n	8007166 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d828      	bhi.n	8007106 <UART_SetConfig+0x3aa>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <UART_SetConfig+0x360>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	08007107 	.word	0x08007107
 80070cc:	080070f7 	.word	0x080070f7
 80070d0:	08007107 	.word	0x08007107
 80070d4:	08007107 	.word	0x08007107
 80070d8:	08007107 	.word	0x08007107
 80070dc:	080070ff 	.word	0x080070ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7fe f934 	bl	800534c <HAL_RCC_GetPCLK1Freq>
 80070e4:	61b8      	str	r0, [r7, #24]
        break;
 80070e6:	e013      	b.n	8007110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e8:	f7fe f944 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 80070ec:	61b8      	str	r0, [r7, #24]
        break;
 80070ee:	e00f      	b.n	8007110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b4b      	ldr	r3, [pc, #300]	@ (8007220 <UART_SetConfig+0x4c4>)
 80070f2:	61bb      	str	r3, [r7, #24]
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f6:	f7fe f817 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80070fa:	61b8      	str	r0, [r7, #24]
        break;
 80070fc:	e008      	b.n	8007110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007102:	61bb      	str	r3, [r7, #24]
        break;
 8007104:	e004      	b.n	8007110 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	77bb      	strb	r3, [r7, #30]
        break;
 800710e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d074      	beq.n	8007200 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	005a      	lsls	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	441a      	add	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b0f      	cmp	r3, #15
 8007130:	d916      	bls.n	8007160 <UART_SetConfig+0x404>
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007138:	d212      	bcs.n	8007160 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f023 030f 	bic.w	r3, r3, #15
 8007142:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	b29a      	uxth	r2, r3
 8007150:	89fb      	ldrh	r3, [r7, #14]
 8007152:	4313      	orrs	r3, r2
 8007154:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	89fa      	ldrh	r2, [r7, #14]
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e04f      	b.n	8007200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	77bb      	strb	r3, [r7, #30]
 8007164:	e04c      	b.n	8007200 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007166:	7ffb      	ldrb	r3, [r7, #31]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d828      	bhi.n	80071be <UART_SetConfig+0x462>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x418>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071af 	.word	0x080071af
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fe f8d8 	bl	800534c <HAL_RCC_GetPCLK1Freq>
 800719c:	61b8      	str	r0, [r7, #24]
        break;
 800719e:	e013      	b.n	80071c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe f8e8 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 80071a4:	61b8      	str	r0, [r7, #24]
        break;
 80071a6:	e00f      	b.n	80071c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007220 <UART_SetConfig+0x4c4>)
 80071aa:	61bb      	str	r3, [r7, #24]
        break;
 80071ac:	e00c      	b.n	80071c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fd ffbb 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80071b2:	61b8      	str	r0, [r7, #24]
        break;
 80071b4:	e008      	b.n	80071c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ba:	61bb      	str	r3, [r7, #24]
        break;
 80071bc:	e004      	b.n	80071c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	77bb      	strb	r3, [r7, #30]
        break;
 80071c6:	bf00      	nop
    }

    if (pclk != 0U)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d018      	beq.n	8007200 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	085a      	lsrs	r2, r3, #1
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	441a      	add	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d909      	bls.n	80071fc <UART_SetConfig+0x4a0>
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ee:	d205      	bcs.n	80071fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	e001      	b.n	8007200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800720c:	7fbb      	ldrb	r3, [r7, #30]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40007c00 	.word	0x40007c00
 800721c:	40023800 	.word	0x40023800
 8007220:	00f42400 	.word	0x00f42400

08007224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01a      	beq.n	800733a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007322:	d10a      	bne.n	800733a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af02      	add	r7, sp, #8
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007378:	f7fc fb84 	bl	8003a84 <HAL_GetTick>
 800737c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b08      	cmp	r3, #8
 800738a:	d10e      	bne.n	80073aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f831 	bl	8007402 <UART_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e027      	b.n	80073fa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d10e      	bne.n	80073d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f81b 	bl	8007402 <UART_WaitOnFlagUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e011      	b.n	80073fa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b09c      	sub	sp, #112	@ 0x70
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	603b      	str	r3, [r7, #0]
 800740e:	4613      	mov	r3, r2
 8007410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007412:	e0a7      	b.n	8007564 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	f000 80a3 	beq.w	8007564 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741e:	f7fc fb31 	bl	8003a84 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800742a:	429a      	cmp	r2, r3
 800742c:	d302      	bcc.n	8007434 <UART_WaitOnFlagUntilTimeout+0x32>
 800742e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007430:	2b00      	cmp	r3, #0
 8007432:	d13f      	bne.n	80074b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007444:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007448:	667b      	str	r3, [r7, #100]	@ 0x64
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007452:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007454:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007458:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	663b      	str	r3, [r7, #96]	@ 0x60
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007486:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800748c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e068      	b.n	8007586 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d050      	beq.n	8007564 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d0:	d148      	bne.n	8007564 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80074f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80074fc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	613b      	str	r3, [r7, #16]
   return(result);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800752e:	623a      	str	r2, [r7, #32]
 8007530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	69f9      	ldr	r1, [r7, #28]
 8007534:	6a3a      	ldr	r2, [r7, #32]
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	61bb      	str	r3, [r7, #24]
   return(result);
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e5      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e010      	b.n	8007586 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69da      	ldr	r2, [r3, #28]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	4013      	ands	r3, r2
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	429a      	cmp	r2, r3
 8007580:	f43f af48 	beq.w	8007414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3770      	adds	r7, #112	@ 0x70
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007590:	b084      	sub	sp, #16
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	f107 001c 	add.w	r0, r7, #28
 800759e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d120      	bne.n	80075ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	4b20      	ldr	r3, [pc, #128]	@ (800763c <USB_CoreInit+0xac>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d105      	bne.n	80075de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa96 	bl	8007b10 <USB_CoreReset>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
 80075e8:	e010      	b.n	800760c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa8a 	bl	8007b10 <USB_CoreReset>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	2b01      	cmp	r3, #1
 8007610:	d10b      	bne.n	800762a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f043 0206 	orr.w	r2, r3, #6
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007636:	b004      	add	sp, #16
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	ffbdffbf 	.word	0xffbdffbf

08007640 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f023 0201 	bic.w	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d115      	bne.n	80076b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007690:	2001      	movs	r0, #1
 8007692:	f7fc fa03 	bl	8003a9c <HAL_Delay>
      ms++;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fa29 	bl	8007af4 <USB_GetMode>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d01e      	beq.n	80076e6 <USB_SetCurrentMode+0x84>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b31      	cmp	r3, #49	@ 0x31
 80076ac:	d9f0      	bls.n	8007690 <USB_SetCurrentMode+0x2e>
 80076ae:	e01a      	b.n	80076e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d115      	bne.n	80076e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076c2:	2001      	movs	r0, #1
 80076c4:	f7fc f9ea 	bl	8003a9c <HAL_Delay>
      ms++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa10 	bl	8007af4 <USB_GetMode>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <USB_SetCurrentMode+0x84>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b31      	cmp	r3, #49	@ 0x31
 80076de:	d9f0      	bls.n	80076c2 <USB_SetCurrentMode+0x60>
 80076e0:	e001      	b.n	80076e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e005      	b.n	80076f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b32      	cmp	r3, #50	@ 0x32
 80076ea:	d101      	bne.n	80076f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076fc:	b084      	sub	sp, #16
 80076fe:	b580      	push	{r7, lr}
 8007700:	b086      	sub	sp, #24
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800770a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	e009      	b.n	8007730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3340      	adds	r3, #64	@ 0x40
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b0e      	cmp	r3, #14
 8007734:	d9f2      	bls.n	800771c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11c      	bne.n	8007776 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800774a:	f043 0302 	orr.w	r3, r3, #2
 800774e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e005      	b.n	8007782 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007788:	461a      	mov	r2, r3
 800778a:	2300      	movs	r3, #0
 800778c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007794:	4619      	mov	r1, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779c:	461a      	mov	r2, r3
 800779e:	680b      	ldr	r3, [r1, #0]
 80077a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d10c      	bne.n	80077c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077ae:	2100      	movs	r1, #0
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f965 	bl	8007a80 <USB_SetDevSpeed>
 80077b6:	e008      	b.n	80077ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077b8:	2101      	movs	r1, #1
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f960 	bl	8007a80 <USB_SetDevSpeed>
 80077c0:	e003      	b.n	80077ca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077c2:	2103      	movs	r1, #3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f95b 	bl	8007a80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ca:	2110      	movs	r1, #16
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8f3 	bl	80079b8 <USB_FlushTxFifo>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f91f 	bl	8007a20 <USB_FlushRxFifo>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f2:	461a      	mov	r2, r3
 80077f4:	2300      	movs	r3, #0
 80077f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	461a      	mov	r2, r3
 8007800:	2300      	movs	r3, #0
 8007802:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	e043      	b.n	800789e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800782c:	d118      	bne.n	8007860 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007840:	461a      	mov	r2, r3
 8007842:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	e013      	b.n	8007872 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007856:	461a      	mov	r2, r3
 8007858:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e008      	b.n	8007872 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787e:	461a      	mov	r2, r3
 8007880:	2300      	movs	r3, #0
 8007882:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007890:	461a      	mov	r2, r3
 8007892:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3301      	adds	r3, #1
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3b7      	bcc.n	8007816 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e043      	b.n	8007934 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c2:	d118      	bne.n	80078f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d6:	461a      	mov	r2, r3
 80078d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	e013      	b.n	8007908 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ec:	461a      	mov	r2, r3
 80078ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e008      	b.n	8007908 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007902:	461a      	mov	r2, r3
 8007904:	2300      	movs	r3, #0
 8007906:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800792c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3301      	adds	r3, #1
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	429a      	cmp	r2, r3
 800793a:	d3b7      	bcc.n	80078ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800794a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800794e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800795c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d105      	bne.n	8007970 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f043 0210 	orr.w	r2, r3, #16
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	4b0e      	ldr	r3, [pc, #56]	@ (80079b0 <USB_DevInit+0x2b4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800797c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f043 0208 	orr.w	r2, r3, #8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800798e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d105      	bne.n	80079a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <USB_DevInit+0x2b8>)
 800799a:	4313      	orrs	r3, r2
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ac:	b004      	add	sp, #16
 80079ae:	4770      	bx	lr
 80079b0:	803c3800 	.word	0x803c3800
 80079b4:	40000004 	.word	0x40000004

080079b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4a13      	ldr	r2, [pc, #76]	@ (8007a1c <USB_FlushTxFifo+0x64>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d901      	bls.n	80079d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e01b      	b.n	8007a10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	daf2      	bge.n	80079c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	019b      	lsls	r3, r3, #6
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4a08      	ldr	r2, [pc, #32]	@ (8007a1c <USB_FlushTxFifo+0x64>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e006      	b.n	8007a10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d0f0      	beq.n	80079f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	00030d40 	.word	0x00030d40

08007a20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a11      	ldr	r2, [pc, #68]	@ (8007a7c <USB_FlushRxFifo+0x5c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d901      	bls.n	8007a3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e018      	b.n	8007a70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	daf2      	bge.n	8007a2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4a08      	ldr	r2, [pc, #32]	@ (8007a7c <USB_FlushRxFifo+0x5c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d901      	bls.n	8007a62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e006      	b.n	8007a70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d0f0      	beq.n	8007a50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	00030d40 	.word	0x00030d40

08007a80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007acc:	f023 0303 	bic.w	r3, r3, #3
 8007ad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ae0:	f043 0302 	orr.w	r3, r3, #2
 8007ae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0301 	and.w	r3, r3, #1
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4a13      	ldr	r2, [pc, #76]	@ (8007b74 <USB_CoreReset+0x64>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d901      	bls.n	8007b2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e01b      	b.n	8007b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	daf2      	bge.n	8007b1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f043 0201 	orr.w	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4a09      	ldr	r2, [pc, #36]	@ (8007b74 <USB_CoreReset+0x64>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d901      	bls.n	8007b58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e006      	b.n	8007b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d0f0      	beq.n	8007b46 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	00030d40 	.word	0x00030d40

08007b78 <memset>:
 8007b78:	4402      	add	r2, r0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d100      	bne.n	8007b82 <memset+0xa>
 8007b80:	4770      	bx	lr
 8007b82:	f803 1b01 	strb.w	r1, [r3], #1
 8007b86:	e7f9      	b.n	8007b7c <memset+0x4>

08007b88 <__libc_init_array>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc0 <__libc_init_array+0x38>)
 8007b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8007bc4 <__libc_init_array+0x3c>)
 8007b8e:	1b64      	subs	r4, r4, r5
 8007b90:	10a4      	asrs	r4, r4, #2
 8007b92:	2600      	movs	r6, #0
 8007b94:	42a6      	cmp	r6, r4
 8007b96:	d109      	bne.n	8007bac <__libc_init_array+0x24>
 8007b98:	4d0b      	ldr	r5, [pc, #44]	@ (8007bc8 <__libc_init_array+0x40>)
 8007b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8007bcc <__libc_init_array+0x44>)
 8007b9c:	f000 f818 	bl	8007bd0 <_init>
 8007ba0:	1b64      	subs	r4, r4, r5
 8007ba2:	10a4      	asrs	r4, r4, #2
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	42a6      	cmp	r6, r4
 8007ba8:	d105      	bne.n	8007bb6 <__libc_init_array+0x2e>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb0:	4798      	blx	r3
 8007bb2:	3601      	adds	r6, #1
 8007bb4:	e7ee      	b.n	8007b94 <__libc_init_array+0xc>
 8007bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bba:	4798      	blx	r3
 8007bbc:	3601      	adds	r6, #1
 8007bbe:	e7f2      	b.n	8007ba6 <__libc_init_array+0x1e>
 8007bc0:	080092dc 	.word	0x080092dc
 8007bc4:	080092dc 	.word	0x080092dc
 8007bc8:	080092dc 	.word	0x080092dc
 8007bcc:	080092e0 	.word	0x080092e0

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
