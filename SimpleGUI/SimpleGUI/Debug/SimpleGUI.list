
SimpleGUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005adc  08005adc  00006adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d94  08005d94  0000714c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d94  08005d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d9c  08005d9c  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d9c  08005d9c  00006d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005da4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005db0  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005e50  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b98  2000014c  08005ef0  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000ce4  08005ef0  00007ce4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003cac3  00000000  00000000  0000717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003db5  00000000  00000000  00043c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000039f0  00000000  00000000  000479f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002bca  00000000  00000000  0004b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a686  00000000  00000000  0004dfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227de  00000000  00000000  00078638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010ad2e  00000000  00000000  0009ae16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a5b44  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ffec  00000000  00000000  001a5b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  001b5b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005ac4 	.word	0x08005ac4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08005ac4 	.word	0x08005ac4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <u8g2_gpio_and_delay_stm32>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	72fb      	strb	r3, [r7, #11]
 8000536:	4613      	mov	r3, r2
 8000538:	72bb      	strb	r3, [r7, #10]
	switch(msg){
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	3b28      	subs	r3, #40	@ 0x28
 800053e:	2b23      	cmp	r3, #35	@ 0x23
 8000540:	d875      	bhi.n	800062e <u8g2_gpio_and_delay_stm32+0x106>
 8000542:	a201      	add	r2, pc, #4	@ (adr r2, 8000548 <u8g2_gpio_and_delay_stm32+0x20>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	0800062f 	.word	0x0800062f
 800054c:	080005d9 	.word	0x080005d9
 8000550:	080005e3 	.word	0x080005e3
 8000554:	080005fb 	.word	0x080005fb
 8000558:	0800062f 	.word	0x0800062f
 800055c:	0800062f 	.word	0x0800062f
 8000560:	0800062f 	.word	0x0800062f
 8000564:	0800062f 	.word	0x0800062f
 8000568:	0800062f 	.word	0x0800062f
 800056c:	0800062f 	.word	0x0800062f
 8000570:	0800062f 	.word	0x0800062f
 8000574:	0800062f 	.word	0x0800062f
 8000578:	0800062f 	.word	0x0800062f
 800057c:	0800062f 	.word	0x0800062f
 8000580:	0800062f 	.word	0x0800062f
 8000584:	0800062f 	.word	0x0800062f
 8000588:	0800062f 	.word	0x0800062f
 800058c:	0800062f 	.word	0x0800062f
 8000590:	0800062f 	.word	0x0800062f
 8000594:	0800062f 	.word	0x0800062f
 8000598:	0800062f 	.word	0x0800062f
 800059c:	0800062f 	.word	0x0800062f
 80005a0:	0800062f 	.word	0x0800062f
 80005a4:	0800062f 	.word	0x0800062f
 80005a8:	0800062f 	.word	0x0800062f
 80005ac:	0800062f 	.word	0x0800062f
 80005b0:	0800062f 	.word	0x0800062f
 80005b4:	0800062f 	.word	0x0800062f
 80005b8:	0800062f 	.word	0x0800062f
 80005bc:	0800062f 	.word	0x0800062f
 80005c0:	0800062f 	.word	0x0800062f
 80005c4:	0800062f 	.word	0x0800062f
 80005c8:	0800062f 	.word	0x0800062f
 80005cc:	080005ff 	.word	0x080005ff
 80005d0:	0800060f 	.word	0x0800060f
 80005d4:	0800061f 	.word	0x0800061f

		break;

		//Function which implements a delay, arg_int contains the amount of ms
		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 80005d8:	7abb      	ldrb	r3, [r7, #10]
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fecc 	bl	8002378 <HAL_Delay>

		break;
 80005e0:	e025      	b.n	800062e <u8g2_gpio_and_delay_stm32+0x106>
		//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
		for (uint16_t n = 0; n < 320; n++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	82fb      	strh	r3, [r7, #22]
 80005e6:	e003      	b.n	80005f0 <u8g2_gpio_and_delay_stm32+0xc8>
		{
			__NOP();
 80005e8:	bf00      	nop
		for (uint16_t n = 0; n < 320; n++)
 80005ea:	8afb      	ldrh	r3, [r7, #22]
 80005ec:	3301      	adds	r3, #1
 80005ee:	82fb      	strh	r3, [r7, #22]
 80005f0:	8afb      	ldrh	r3, [r7, #22]
 80005f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80005f6:	d3f7      	bcc.n	80005e8 <u8g2_gpio_and_delay_stm32+0xc0>
		}

		break;
 80005f8:	e019      	b.n	800062e <u8g2_gpio_and_delay_stm32+0x106>
		//Function which delays 100ns
		case U8X8_MSG_DELAY_100NANO:
		__NOP();
 80005fa:	bf00      	nop

		break;
 80005fc:	e017      	b.n	800062e <u8g2_gpio_and_delay_stm32+0x106>
		// Function to define the logic level of the CS line
		case U8X8_MSG_GPIO_CS:
			HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	461a      	mov	r2, r3
 8000602:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <u8g2_gpio_and_delay_stm32+0x110>)
 8000608:	f002 fcaa 	bl	8002f60 <HAL_GPIO_WritePin>
			//Disable NSS and enable another gpio pin as CS
		break;
 800060c:	e00f      	b.n	800062e <u8g2_gpio_and_delay_stm32+0x106>
		//Function to define the logic level of the Data/ Command line
		case U8X8_MSG_GPIO_DC:
			HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800060e:	7abb      	ldrb	r3, [r7, #10]
 8000610:	461a      	mov	r2, r3
 8000612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <u8g2_gpio_and_delay_stm32+0x110>)
 8000618:	f002 fca2 	bl	8002f60 <HAL_GPIO_WritePin>
		break;
 800061c:	e007      	b.n	800062e <u8g2_gpio_and_delay_stm32+0x106>
		//Function to define the logic level of the RESET line
		case U8X8_MSG_GPIO_RESET:
			HAL_GPIO_WritePin(OLED_Reset_GPIO_Port, OLED_Reset_Pin, arg_int);
 800061e:	7abb      	ldrb	r3, [r7, #10]
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <u8g2_gpio_and_delay_stm32+0x114>)
 8000628:	f002 fc9a 	bl	8002f60 <HAL_GPIO_WritePin>
		break;
 800062c:	bf00      	nop

	}

	return 1; // command processed successfully.
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020c00 	.word	0x40020c00
 800063c:	40021400 	.word	0x40021400

08000640 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	72fb      	strb	r3, [r7, #11]
 800064e:	4613      	mov	r3, r2
 8000650:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000652:	7afb      	ldrb	r3, [r7, #11]
 8000654:	3b14      	subs	r3, #20
 8000656:	2b0c      	cmp	r3, #12
 8000658:	d847      	bhi.n	80006ea <u8x8_byte_stm32_hw_spi+0xaa>
 800065a:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <u8x8_byte_stm32_hw_spi+0x20>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	080006ef 	.word	0x080006ef
 8000664:	080006eb 	.word	0x080006eb
 8000668:	080006eb 	.word	0x080006eb
 800066c:	08000695 	.word	0x08000695
 8000670:	080006bb 	.word	0x080006bb
 8000674:	080006d3 	.word	0x080006d3
 8000678:	080006eb 	.word	0x080006eb
 800067c:	080006eb 	.word	0x080006eb
 8000680:	080006eb 	.word	0x080006eb
 8000684:	080006eb 	.word	0x080006eb
 8000688:	080006eb 	.word	0x080006eb
 800068c:	080006eb 	.word	0x080006eb
 8000690:	080006ad 	.word	0x080006ad
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000694:	7abb      	ldrb	r3, [r7, #10]
 8000696:	b29a      	uxth	r2, r3
 8000698:	2364      	movs	r3, #100	@ 0x64
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4818      	ldr	r0, [pc, #96]	@ (8000700 <u8x8_byte_stm32_hw_spi+0xc0>)
 800069e:	f003 ff92 	bl	80045c6 <HAL_SPI_Transmit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <u8x8_byte_stm32_hw_spi+0xb2>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e024      	b.n	80006f6 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	461a      	mov	r2, r3
 80006b0:	214a      	movs	r1, #74	@ 0x4a
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f001 fd6b 	bl	800218e <u8x8_gpio_call>
		break;
 80006b8:	e01c      	b.n	80006f4 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	2149      	movs	r1, #73	@ 0x49
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f001 fd62 	bl	800218e <u8x8_gpio_call>
		HAL_Delay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f001 fe54 	bl	8002378 <HAL_Delay>
		break;
 80006d0:	e010      	b.n	80006f4 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f001 fe50 	bl	8002378 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	461a      	mov	r2, r3
 80006e0:	2149      	movs	r1, #73	@ 0x49
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f001 fd53 	bl	800218e <u8x8_gpio_call>
		break;
 80006e8:	e004      	b.n	80006f4 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e003      	b.n	80006f6 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 80006ee:	bf00      	nop
 80006f0:	e000      	b.n	80006f4 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 80006f2:	bf00      	nop
	}
	return 1;
 80006f4:	2301      	movs	r3, #1
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000250 	.word	0x20000250

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f001 fdd8 	bl	80022be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f8a7 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 f9fb 	bl	8000b0c <MX_GPIO_Init>
  MX_ETH_Init();
 8000716:	f000 f90f 	bl	8000938 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800071a:	f000 f999 	bl	8000a50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800071e:	f000 f9c7 	bl	8000ab0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000722:	f000 f957 	bl	80009d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000726:	2200      	movs	r2, #0
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	4840      	ldr	r0, [pc, #256]	@ (800082c <main+0x128>)
 800072c:	f002 fc18 	bl	8002f60 <HAL_GPIO_WritePin>

  u8g2_Setup_ssd1309_128x64_noname2_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8000730:	4b3f      	ldr	r3, [pc, #252]	@ (8000830 <main+0x12c>)
 8000732:	4a40      	ldr	r2, [pc, #256]	@ (8000834 <main+0x130>)
 8000734:	4940      	ldr	r1, [pc, #256]	@ (8000838 <main+0x134>)
 8000736:	4841      	ldr	r0, [pc, #260]	@ (800083c <main+0x138>)
 8000738:	f000 feca 	bl	80014d0 <u8g2_Setup_ssd1309_128x64_noname2_f>
  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 800073c:	483f      	ldr	r0, [pc, #252]	@ (800083c <main+0x138>)
 800073e:	f001 fcf7 	bl	8002130 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000742:	2100      	movs	r1, #0
 8000744:	483d      	ldr	r0, [pc, #244]	@ (800083c <main+0x138>)
 8000746:	f001 fd02 	bl	800214e <u8x8_SetPowerSave>
  while (1)
  {
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800074a:	2180      	movs	r1, #128	@ 0x80
 800074c:	4837      	ldr	r0, [pc, #220]	@ (800082c <main+0x128>)
 800074e:	f002 fc20 	bl	8002f92 <HAL_GPIO_TogglePin>
	u8g2_FirstPage(&u8g2);
 8000752:	483a      	ldr	r0, [pc, #232]	@ (800083c <main+0x138>)
 8000754:	f000 fe98 	bl	8001488 <u8g2_FirstPage>
	GPIO_PinState up = HAL_GPIO_ReadPin(Up_BTN_GPIO_Port, Up_BTN_Pin);
 8000758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075c:	4838      	ldr	r0, [pc, #224]	@ (8000840 <main+0x13c>)
 800075e:	f002 fbe7 	bl	8002f30 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	u8g2_ClearBuffer(&u8g2);
 8000766:	4835      	ldr	r0, [pc, #212]	@ (800083c <main+0x138>)
 8000768:	f000 fdf5 	bl	8001356 <u8g2_ClearBuffer>
	u8g2_SetDrawColor(&u8g2,1);
 800076c:	2101      	movs	r1, #1
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <main+0x138>)
 8000770:	f000 ffec 	bl	800174c <u8g2_SetDrawColor>
	u8g2_SetBitmapMode(&u8g2,1);
 8000774:	2101      	movs	r1, #1
 8000776:	4831      	ldr	r0, [pc, #196]	@ (800083c <main+0x138>)
 8000778:	f000 fd2c 	bl	80011d4 <u8g2_SetBitmapMode>
	u8g2_DrawXBMP(&u8g2, icn_x, top_icn_y, icon_wh, icon_wh,  SubGhz_bits);
 800077c:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <main+0x140>)
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2310      	movs	r3, #16
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2310      	movs	r3, #16
 8000786:	2202      	movs	r2, #2
 8000788:	2104      	movs	r1, #4
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <main+0x138>)
 800078c:	f000 fda0 	bl	80012d0 <u8g2_DrawXBMP>
	u8g2_DrawXBMP(&u8g2, icn_x, mid_icn_y, icon_wh, icon_wh,  NFC_bits);
 8000790:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <main+0x144>)
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	2310      	movs	r3, #16
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2310      	movs	r3, #16
 800079a:	2218      	movs	r2, #24
 800079c:	2104      	movs	r1, #4
 800079e:	4827      	ldr	r0, [pc, #156]	@ (800083c <main+0x138>)
 80007a0:	f000 fd96 	bl	80012d0 <u8g2_DrawXBMP>
	u8g2_DrawXBMP(&u8g2, icn_x, bot_icn_y, icon_wh, icon_wh,  Game_bits);
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <main+0x148>)
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2310      	movs	r3, #16
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2310      	movs	r3, #16
 80007ae:	222e      	movs	r2, #46	@ 0x2e
 80007b0:	2104      	movs	r1, #4
 80007b2:	4822      	ldr	r0, [pc, #136]	@ (800083c <main+0x138>)
 80007b4:	f000 fd8c 	bl	80012d0 <u8g2_DrawXBMP>
	if (up == GPIO_PIN_SET){
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d11d      	bne.n	80007fa <main+0xf6>
		u8g2_DrawXBMP(&u8g2, icn_x, top_icn_y, icon_wh, icon_wh,  Idle_bits);
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <main+0x14c>)
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2310      	movs	r3, #16
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2310      	movs	r3, #16
 80007c8:	2202      	movs	r2, #2
 80007ca:	2104      	movs	r1, #4
 80007cc:	481b      	ldr	r0, [pc, #108]	@ (800083c <main+0x138>)
 80007ce:	f000 fd7f 	bl	80012d0 <u8g2_DrawXBMP>
		u8g2_DrawXBMP(&u8g2, icn_x, mid_icn_y, icon_wh, icon_wh,  SubGhz_bits);
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <main+0x140>)
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	2310      	movs	r3, #16
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2310      	movs	r3, #16
 80007dc:	2218      	movs	r2, #24
 80007de:	2104      	movs	r1, #4
 80007e0:	4816      	ldr	r0, [pc, #88]	@ (800083c <main+0x138>)
 80007e2:	f000 fd75 	bl	80012d0 <u8g2_DrawXBMP>
		u8g2_DrawXBMP(&u8g2, icn_x, bot_icn_y, icon_wh, icon_wh,  RFID_bits);
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <main+0x150>)
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	2310      	movs	r3, #16
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2310      	movs	r3, #16
 80007f0:	222e      	movs	r2, #46	@ 0x2e
 80007f2:	2104      	movs	r1, #4
 80007f4:	4811      	ldr	r0, [pc, #68]	@ (800083c <main+0x138>)
 80007f6:	f000 fd6b 	bl	80012d0 <u8g2_DrawXBMP>
	}
	u8g2_DrawXBMP(&u8g2, 0, 22, Select_width,  Select_height, Select_bits);
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <main+0x154>)
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	2315      	movs	r3, #21
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2380      	movs	r3, #128	@ 0x80
 8000804:	2216      	movs	r2, #22
 8000806:	2100      	movs	r1, #0
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <main+0x138>)
 800080a:	f000 fd61 	bl	80012d0 <u8g2_DrawXBMP>
	u8g2_DrawXBMP(&u8g2, 127-ScrollBar_width, 0, ScrollBar_width,  ScrollBar_height, ScrollBar_bits);
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <main+0x158>)
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	2340      	movs	r3, #64	@ 0x40
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2307      	movs	r3, #7
 8000818:	2200      	movs	r2, #0
 800081a:	2178      	movs	r1, #120	@ 0x78
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <main+0x138>)
 800081e:	f000 fd57 	bl	80012d0 <u8g2_DrawXBMP>

	u8g2_SendBuffer(&u8g2);
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <main+0x138>)
 8000824:	f000 fe0a 	bl	800143c <u8g2_SendBuffer>
  {
 8000828:	e78f      	b.n	800074a <main+0x46>
 800082a:	bf00      	nop
 800082c:	40020400 	.word	0x40020400
 8000830:	08000529 	.word	0x08000529
 8000834:	08000641 	.word	0x08000641
 8000838:	08005d24 	.word	0x08005d24
 800083c:	20000844 	.word	0x20000844
 8000840:	40021400 	.word	0x40021400
 8000844:	08005b5c 	.word	0x08005b5c
 8000848:	08005b1c 	.word	0x08005b1c
 800084c:	08005adc 	.word	0x08005adc
 8000850:	08005afc 	.word	0x08005afc
 8000854:	08005b3c 	.word	0x08005b3c
 8000858:	08005bbc 	.word	0x08005bbc
 800085c:	08005b7c 	.word	0x08005b7c

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2234      	movs	r2, #52	@ 0x34
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 f8fc 	bl	8005a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000884:	f002 fce8 	bl	8003258 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <SystemClock_Config+0xd0>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a28      	ldr	r2, [pc, #160]	@ (8000930 <SystemClock_Config+0xd0>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <SystemClock_Config+0xd0>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <SystemClock_Config+0xd4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a8:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <SystemClock_Config+0xd4>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <SystemClock_Config+0xd4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008bc:	2301      	movs	r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008d4:	23d8      	movs	r3, #216	@ 0xd8
 80008d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008dc:	2309      	movs	r3, #9
 80008de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fcc5 	bl	8003278 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f4:	f000 fa0e 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000904:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2103      	movs	r1, #3
 8000916:	4618      	mov	r0, r3
 8000918:	f002 ff5c 	bl	80037d4 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000922:	f000 f9f7 	bl	8000d14 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_ETH_Init+0x84>)
 800093e:	4a20      	ldr	r2, [pc, #128]	@ (80009c0 <MX_ETH_Init+0x88>)
 8000940:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <MX_ETH_Init+0x8c>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <MX_ETH_Init+0x8c>)
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_ETH_Init+0x8c>)
 8000950:	22e1      	movs	r2, #225	@ 0xe1
 8000952:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000954:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_ETH_Init+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_ETH_Init+0x8c>)
 800095c:	2200      	movs	r2, #0
 800095e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_ETH_Init+0x8c>)
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_ETH_Init+0x84>)
 8000968:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <MX_ETH_Init+0x8c>)
 800096a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_ETH_Init+0x84>)
 800096e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000972:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_ETH_Init+0x84>)
 8000976:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <MX_ETH_Init+0x90>)
 8000978:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_ETH_Init+0x84>)
 800097c:	4a13      	ldr	r2, [pc, #76]	@ (80009cc <MX_ETH_Init+0x94>)
 800097e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_ETH_Init+0x84>)
 8000982:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000986:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_ETH_Init+0x84>)
 800098a:	f001 fdff 	bl	800258c <HAL_ETH_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 f9be 	bl	8000d14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000998:	2238      	movs	r2, #56	@ 0x38
 800099a:	2100      	movs	r1, #0
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_ETH_Init+0x98>)
 800099e:	f005 f865 	bl	8005a6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_ETH_Init+0x98>)
 80009a4:	2221      	movs	r2, #33	@ 0x21
 80009a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_ETH_Init+0x98>)
 80009aa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <MX_ETH_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001a0 	.word	0x200001a0
 80009c0:	40028000 	.word	0x40028000
 80009c4:	200008d8 	.word	0x200008d8
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	2000000c 	.word	0x2000000c
 80009d0:	20000168 	.word	0x20000168

080009d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_SPI1_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	@ (8000a4c <MX_SPI1_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_SPI1_Init+0x74>)
 80009e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_SPI1_Init+0x74>)
 80009ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_SPI1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_SPI1_Init+0x74>)
 8000a34:	f003 fd1c 	bl	8004470 <HAL_SPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f969 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000250 	.word	0x20000250
 8000a4c:	40013000 	.word	0x40013000

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_USART3_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a94:	f004 f88e 	bl	8004bb4 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f939 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200002b4 	.word	0x200002b4
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000aba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2206      	movs	r2, #6
 8000ac0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af4:	f002 fa67 	bl	8002fc6 <HAL_PCD_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afe:	f000 f909 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000033c 	.word	0x2000033c

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b75      	ldr	r3, [pc, #468]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a74      	ldr	r2, [pc, #464]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b72      	ldr	r3, [pc, #456]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b6c      	ldr	r3, [pc, #432]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b69      	ldr	r3, [pc, #420]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a68      	ldr	r2, [pc, #416]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b66      	ldr	r3, [pc, #408]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b63      	ldr	r3, [pc, #396]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a62      	ldr	r2, [pc, #392]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b60      	ldr	r3, [pc, #384]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b82:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a5c      	ldr	r2, [pc, #368]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b88:	f043 0320 	orr.w	r3, r3, #32
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9a:	4b57      	ldr	r3, [pc, #348]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a56      	ldr	r2, [pc, #344]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b54      	ldr	r3, [pc, #336]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b51      	ldr	r3, [pc, #324]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a50      	ldr	r2, [pc, #320]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a4a      	ldr	r2, [pc, #296]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b48      	ldr	r3, [pc, #288]	@ (8000cf8 <MX_GPIO_Init+0x1ec>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000be8:	4844      	ldr	r0, [pc, #272]	@ (8000cfc <MX_GPIO_Init+0x1f0>)
 8000bea:	f002 f9b9 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_Reset_GPIO_Port, OLED_Reset_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bf4:	4842      	ldr	r0, [pc, #264]	@ (8000d00 <MX_GPIO_Init+0x1f4>)
 8000bf6:	f002 f9b3 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000c00:	4840      	ldr	r0, [pc, #256]	@ (8000d04 <MX_GPIO_Init+0x1f8>)
 8000c02:	f002 f9ad 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2140      	movs	r1, #64	@ 0x40
 8000c0a:	483f      	ldr	r0, [pc, #252]	@ (8000d08 <MX_GPIO_Init+0x1fc>)
 8000c0c:	f002 f9a8 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4839      	ldr	r0, [pc, #228]	@ (8000d0c <MX_GPIO_Init+0x200>)
 8000c28:	f001 ffd6 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c2c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	482d      	ldr	r0, [pc, #180]	@ (8000cfc <MX_GPIO_Init+0x1f0>)
 8000c46:	f001 ffc7 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_Reset_Pin */
  GPIO_InitStruct.Pin = OLED_Reset_Pin;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OLED_Reset_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <MX_GPIO_Init+0x1f4>)
 8000c64:	f001 ffb8 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_BTN_Pin Left_BTN_Pin Back_BTN_Pin */
  GPIO_InitStruct.Pin = Up_BTN_Pin|Left_BTN_Pin|Back_BTN_Pin;
 8000c68:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4820      	ldr	r0, [pc, #128]	@ (8000d00 <MX_GPIO_Init+0x1f4>)
 8000c7e:	f001 ffab 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_BTN_Pin Down_BTN_Pin Enter_BTN_Pin */
  GPIO_InitStruct.Pin = Right_BTN_Pin|Down_BTN_Pin|Enter_BTN_Pin;
 8000c82:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <MX_GPIO_Init+0x204>)
 8000c98:	f001 ff9e 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 8000c9c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4813      	ldr	r0, [pc, #76]	@ (8000d04 <MX_GPIO_Init+0x1f8>)
 8000cb6:	f001 ff8f 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_GPIO_Init+0x1fc>)
 8000cd2:	f001 ff81 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <MX_GPIO_Init+0x1fc>)
 8000cea:	f001 ff75 	bl	8002bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	@ 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40021400 	.word	0x40021400
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021800 	.word	0x40021800
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40021000 	.word	0x40021000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	@ 0x38
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a4e      	ldr	r2, [pc, #312]	@ (8000ec0 <HAL_ETH_MspInit+0x158>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	f040 8096 	bne.w	8000eb8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d98:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a46      	ldr	r2, [pc, #280]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000daa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b44      	ldr	r3, [pc, #272]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a40      	ldr	r2, [pc, #256]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de0:	4b38      	ldr	r3, [pc, #224]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	4a34      	ldr	r2, [pc, #208]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df8:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e34:	2332      	movs	r3, #50	@ 0x32
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e44:	230b      	movs	r3, #11
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481e      	ldr	r0, [pc, #120]	@ (8000ec8 <HAL_ETH_MspInit+0x160>)
 8000e50:	f001 fec2 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e54:	2386      	movs	r3, #134	@ 0x86
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e64:	230b      	movs	r3, #11
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4817      	ldr	r0, [pc, #92]	@ (8000ecc <HAL_ETH_MspInit+0x164>)
 8000e70:	f001 feb2 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e86:	230b      	movs	r3, #11
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480f      	ldr	r0, [pc, #60]	@ (8000ed0 <HAL_ETH_MspInit+0x168>)
 8000e92:	f001 fea1 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e96:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea8:	230b      	movs	r3, #11
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <HAL_ETH_MspInit+0x16c>)
 8000eb4:	f001 fe90 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	@ 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40028000 	.word	0x40028000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40021800 	.word	0x40021800

08000ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a25      	ldr	r2, [pc, #148]	@ (8000f8c <HAL_SPI_MspInit+0xb4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d143      	bne.n	8000f82 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efa:	4b25      	ldr	r3, [pc, #148]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a24      	ldr	r2, [pc, #144]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a18      	ldr	r2, [pc, #96]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <HAL_SPI_MspInit+0xb8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f42:	2320      	movs	r3, #32
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <HAL_SPI_MspInit+0xbc>)
 8000f5e:	f001 fe3b 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f62:	2380      	movs	r3, #128	@ 0x80
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <HAL_SPI_MspInit+0xc0>)
 8000f7e:	f001 fe2b 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	@ 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2290      	movs	r2, #144	@ 0x90
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fd55 	bl	8005a6c <memset>
  if(huart->Instance==USART3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <HAL_UART_MspInit+0xb4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13c      	bne.n	8001046 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 fe20 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff fe95 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_UART_MspInit+0xb8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800101a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <HAL_UART_MspInit+0xbc>)
 8001042:	f001 fdc9 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	37b8      	adds	r7, #184	@ 0xb8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004800 	.word	0x40004800
 8001054:	40023800 	.word	0x40023800
 8001058:	40020c00 	.word	0x40020c00

0800105c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0ae      	sub	sp, #184	@ 0xb8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2290      	movs	r2, #144	@ 0x90
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fcf5 	bl	8005a6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800108a:	d159      	bne.n	8001140 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800108c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001090:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fdbf 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010a8:	f7ff fe34 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4a25      	ldr	r2, [pc, #148]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b8:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010c4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010de:	230a      	movs	r3, #10
 80010e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <HAL_PCD_MspInit+0xf0>)
 80010ec:	f001 fd74 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001108:	4619      	mov	r1, r3
 800110a:	4810      	ldr	r0, [pc, #64]	@ (800114c <HAL_PCD_MspInit+0xf0>)
 800110c:	f001 fd64 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 8001112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001114:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 8001116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800111a:	6353      	str	r3, [r2, #52]	@ 0x34
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 800111e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6453      	str	r3, [r2, #68]	@ 0x44
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <HAL_PCD_MspInit+0xec>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	37b8      	adds	r7, #184	@ 0xb8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <MemManage_Handler+0x4>

08001168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <UsageFault_Handler+0x4>

08001178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f001 f8c7 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	4608      	mov	r0, r1
 80011fe:	4611      	mov	r1, r2
 8001200:	461a      	mov	r2, r3
 8001202:	4603      	mov	r3, r0
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	460b      	mov	r3, r1
 8001208:	813b      	strh	r3, [r7, #8]
 800120a:	4613      	mov	r3, r2
 800120c:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001214:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001216:	7dbb      	ldrb	r3, [r7, #22]
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001224:	897a      	ldrh	r2, [r7, #10]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	4413      	add	r3, r2
 800122a:	b298      	uxth	r0, r3
 800122c:	893b      	ldrh	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	893a      	ldrh	r2, [r7, #8]
 8001234:	8979      	ldrh	r1, [r7, #10]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4603      	mov	r3, r0
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 fad0 	bl	80017e0 <u8g2_IsIntersection>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d040      	beq.n	80012c8 <u8g2_DrawHXBMP+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 800124a:	e035      	b.n	80012b8 <u8g2_DrawHXBMP+0xc4>
  {
    if( u8x8_pgm_read(b) & mask ) {
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	4013      	ands	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <u8g2_DrawHXBMP+0x80>
      u8g2->draw_color = color;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	7dba      	ldrb	r2, [r7, #22]
 800125e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	8979      	ldrh	r1, [r7, #10]
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f9e2 	bl	8001636 <u8g2_DrawHVLine>
 8001272:	e010      	b.n	8001296 <u8g2_DrawHXBMP+0xa2>
    } else if( u8g2->bitmap_transparency == 0 ) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10b      	bne.n	8001296 <u8g2_DrawHXBMP+0xa2>
      u8g2->draw_color = ncolor;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	7d7a      	ldrb	r2, [r7, #21]
 8001282:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001286:	893a      	ldrh	r2, [r7, #8]
 8001288:	8979      	ldrh	r1, [r7, #10]
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f9d0 	bl	8001636 <u8g2_DrawHVLine>
    }
   
    x++;
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	3301      	adds	r3, #1
 800129a:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <u8g2_DrawHXBMP+0xbe>
    {
      mask = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	75fb      	strb	r3, [r7, #23]
      b++;
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	3301      	adds	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
    }
    len--;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1c6      	bne.n	800124c <u8g2_DrawHXBMP+0x58>
  }
  u8g2->draw_color = color;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	7dba      	ldrb	r2, [r7, #22]
 80012c2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 80012c6:	e000      	b.n	80012ca <u8g2_DrawHXBMP+0xd6>
    return;
 80012c8:	bf00      	nop
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	817b      	strh	r3, [r7, #10]
 80012e2:	460b      	mov	r3, r1
 80012e4:	813b      	strh	r3, [r7, #8]
 80012e6:	4613      	mov	r3, r2
 80012e8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80012ee:	8afb      	ldrh	r3, [r7, #22]
 80012f0:	3307      	adds	r3, #7
 80012f2:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012fa:	897a      	ldrh	r2, [r7, #10]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4413      	add	r3, r2
 8001300:	b298      	uxth	r0, r3
 8001302:	893a      	ldrh	r2, [r7, #8]
 8001304:	8c3b      	ldrh	r3, [r7, #32]
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	893a      	ldrh	r2, [r7, #8]
 800130c:	8979      	ldrh	r1, [r7, #10]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4603      	mov	r3, r0
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 fa64 	bl	80017e0 <u8g2_IsIntersection>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d017      	beq.n	800134e <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800131e:	e012      	b.n	8001346 <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8001320:	88f8      	ldrh	r0, [r7, #6]
 8001322:	893a      	ldrh	r2, [r7, #8]
 8001324:	8979      	ldrh	r1, [r7, #10]
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4603      	mov	r3, r0
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff ff61 	bl	80011f4 <u8g2_DrawHXBMP>
    bitmap += blen;
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001336:	4413      	add	r3, r2
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800133a:	893b      	ldrh	r3, [r7, #8]
 800133c:	3301      	adds	r3, #1
 800133e:	813b      	strh	r3, [r7, #8]
    h--;
 8001340:	8c3b      	ldrh	r3, [r7, #32]
 8001342:	3b01      	subs	r3, #1
 8001344:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001346:	8c3b      	ldrh	r3, [r7, #32]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e9      	bne.n	8001320 <u8g2_DrawXBMP+0x50>
 800134c:	e000      	b.n	8001350 <u8g2_DrawXBMP+0x80>
    return;
 800134e:	bf00      	nop
  }
}
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	7c1b      	ldrb	r3, [r3, #16]
 8001364:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800136c:	461a      	mov	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f004 fb71 	bl	8005a6c <memset>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af02      	add	r7, sp, #8
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
 800139e:	4613      	mov	r3, r2
 80013a0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	7c1b      	ldrb	r3, [r3, #16]
 80013a8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	89ba      	ldrh	r2, [r7, #12]
 80013ba:	fb12 f303 	smulbb	r3, r2, r3
 80013be:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80013c6:	89bb      	ldrh	r3, [r7, #12]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80013ce:	7bf9      	ldrb	r1, [r7, #15]
 80013d0:	78ba      	ldrb	r2, [r7, #2]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	460b      	mov	r3, r1
 80013d8:	2100      	movs	r1, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fe77 	bl	80020ce <u8x8_DrawTile>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013fa:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001402:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	7c5b      	ldrb	r3, [r3, #17]
 800140a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800140c:	7bba      	ldrb	r2, [r7, #14]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffbd 	bl	8001392 <u8g2_send_tile_row>
    src_row++;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	3301      	adds	r3, #1
 8001422:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	429a      	cmp	r2, r3
 800142a:	d203      	bcs.n	8001434 <u8g2_send_buffer+0x4c>
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3eb      	bcc.n	800140c <u8g2_send_buffer+0x24>
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffcf 	bl	80013e8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fe90 	bl	8002170 <u8x8_RefreshDisplay>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff5b 	bl	8001356 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffd8 	bl	8001458 <u8g2_SetBufferCurrTileRow>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2208      	movs	r2, #8
 80014bc:	701a      	strb	r2, [r3, #0]
  return buf;
 80014be:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	200008e0 	.word	0x200008e0

080014d0 <u8g2_Setup_ssd1309_128x64_noname2_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1309 f */
void u8g2_Setup_ssd1309_128x64_noname2_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1309_128x64_noname2, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <u8g2_Setup_ssd1309_128x64_noname2_f+0x44>)
 80014e6:	490c      	ldr	r1, [pc, #48]	@ (8001518 <u8g2_Setup_ssd1309_128x64_noname2_f+0x48>)
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fea1 	bl	8002230 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80014ee:	f107 0313 	add.w	r3, r7, #19
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffdc 	bl	80014b0 <u8g2_m_16_8_f>
 80014f8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014fa:	7cfa      	ldrb	r2, [r7, #19]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <u8g2_Setup_ssd1309_128x64_noname2_f+0x4c>)
 8001502:	6979      	ldr	r1, [r7, #20]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fa55 	bl	80019b4 <u8g2_SetupBuffer>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	08001e01 	.word	0x08001e01
 8001518:	08001f85 	.word	0x08001f85
 800151c:	08001837 	.word	0x08001837

08001520 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <u8g2_SetFontPosBaseline+0x1c>)
 8001544:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	08001521 	.word	0x08001521

08001558 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	460b      	mov	r3, r1
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	4613      	mov	r3, r2
 800156c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001574:	8afb      	ldrh	r3, [r7, #22]
 8001576:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	8abb      	ldrh	r3, [r7, #20]
 800157e:	4413      	add	r3, r2
 8001580:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001582:	8afa      	ldrh	r2, [r7, #22]
 8001584:	8abb      	ldrh	r3, [r7, #20]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90b      	bls.n	80015a2 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800158a:	8afa      	ldrh	r2, [r7, #22]
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d205      	bcs.n	800159e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	82bb      	strh	r3, [r7, #20]
      b--;
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	3b01      	subs	r3, #1
 800159a:	82bb      	strh	r3, [r7, #20]
 800159c:	e001      	b.n	80015a2 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80015a2:	8afa      	ldrh	r2, [r7, #22]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d301      	bcc.n	80015ae <u8g2_clip_intersection2+0x56>
    return 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e01c      	b.n	80015e8 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80015ae:	8aba      	ldrh	r2, [r7, #20]
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d801      	bhi.n	80015ba <u8g2_clip_intersection2+0x62>
    return 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e016      	b.n	80015e8 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80015ba:	8afa      	ldrh	r2, [r7, #22]
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d201      	bcs.n	80015c6 <u8g2_clip_intersection2+0x6e>
    a = c;
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80015c6:	8aba      	ldrh	r2, [r7, #20]
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d901      	bls.n	80015d2 <u8g2_clip_intersection2+0x7a>
    b = d;
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8afa      	ldrh	r2, [r7, #22]
 80015d6:	801a      	strh	r2, [r3, #0]
  b -= a;
 80015d8:	8aba      	ldrh	r2, [r7, #20]
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	8aba      	ldrh	r2, [r7, #20]
 80015e4:	801a      	strh	r2, [r3, #0]
  return 1;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	460b      	mov	r3, r1
 8001608:	813b      	strh	r3, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001612:	893a      	ldrh	r2, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800161c:	88f8      	ldrh	r0, [r7, #6]
 800161e:	893a      	ldrh	r2, [r7, #8]
 8001620:	8979      	ldrh	r1, [r7, #10]
 8001622:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4603      	mov	r3, r0
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	47a0      	blx	r4
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}

08001636 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001636:	b590      	push	{r4, r7, lr}
 8001638:	b087      	sub	sp, #28
 800163a:	af02      	add	r7, sp, #8
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	4608      	mov	r0, r1
 8001640:	4611      	mov	r1, r2
 8001642:	461a      	mov	r2, r3
 8001644:	4603      	mov	r3, r0
 8001646:	817b      	strh	r3, [r7, #10]
 8001648:	460b      	mov	r3, r1
 800164a:	813b      	strh	r3, [r7, #8]
 800164c:	4613      	mov	r3, r2
 800164e:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001656:	2b00      	cmp	r3, #0
 8001658:	d075      	beq.n	8001746 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d072      	beq.n	8001746 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d91a      	bls.n	800169c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d109      	bne.n	8001682 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800166e:	897a      	ldrh	r2, [r7, #10]
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29b      	uxth	r3, r3
 8001676:	817b      	strh	r3, [r7, #10]
	  x++;
 8001678:	897b      	ldrh	r3, [r7, #10]
 800167a:	3301      	adds	r3, #1
 800167c:	b29b      	uxth	r3, r3
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	e00c      	b.n	800169c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d108      	bne.n	800169c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800168a:	893a      	ldrh	r2, [r7, #8]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	813b      	strh	r3, [r7, #8]
	  y++;
 8001694:	893b      	ldrh	r3, [r7, #8]
 8001696:	3301      	adds	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800169c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80016a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d11a      	bne.n	80016e6 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80016b6:	893b      	ldrh	r3, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d83b      	bhi.n	8001734 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80016c2:	893b      	ldrh	r3, [r7, #8]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d937      	bls.n	8001738 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80016d4:	1db9      	adds	r1, r7, #6
 80016d6:	f107 000a 	add.w	r0, r7, #10
 80016da:	f7ff ff3d 	bl	8001558 <u8g2_clip_intersection2>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11a      	bne.n	800171a <u8g2_DrawHVLine+0xe4>
	  return;
 80016e4:	e02f      	b.n	8001746 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d824      	bhi.n	800173c <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80016f8:	897b      	ldrh	r3, [r7, #10]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d920      	bls.n	8001740 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800170a:	1db9      	adds	r1, r7, #6
 800170c:	f107 0008 	add.w	r0, r7, #8
 8001710:	f7ff ff22 	bl	8001558 <u8g2_clip_intersection2>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d014      	beq.n	8001744 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	689c      	ldr	r4, [r3, #8]
 8001720:	8979      	ldrh	r1, [r7, #10]
 8001722:	893a      	ldrh	r2, [r7, #8]
 8001724:	88f8      	ldrh	r0, [r7, #6]
 8001726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4603      	mov	r3, r0
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	47a0      	blx	r4
 8001732:	e008      	b.n	8001746 <u8g2_DrawHVLine+0x110>
	  return;
 8001734:	bf00      	nop
 8001736:	e006      	b.n	8001746 <u8g2_DrawHVLine+0x110>
	  return;
 8001738:	bf00      	nop
 800173a:	e004      	b.n	8001746 <u8g2_DrawHVLine+0x110>
	  return;
 800173c:	bf00      	nop
 800173e:	e002      	b.n	8001746 <u8g2_DrawHVLine+0x110>
	  return;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <u8g2_DrawHVLine+0x110>
	  return;
 8001744:	bf00      	nop
    }
}
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}

0800174c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d903      	bls.n	800176e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800177a:	b490      	push	{r4, r7}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4604      	mov	r4, r0
 8001782:	4608      	mov	r0, r1
 8001784:	4611      	mov	r1, r2
 8001786:	461a      	mov	r2, r3
 8001788:	4623      	mov	r3, r4
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	4603      	mov	r3, r0
 800178e:	80bb      	strh	r3, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001798:	887a      	ldrh	r2, [r7, #2]
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d20d      	bcs.n	80017bc <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80017a0:	883a      	ldrh	r2, [r7, #0]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d901      	bls.n	80017ac <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e014      	b.n	80017d6 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	883b      	ldrh	r3, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d901      	bls.n	80017b8 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00e      	b.n	80017d6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e00c      	b.n	80017d6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80017bc:	883a      	ldrh	r2, [r7, #0]
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d907      	bls.n	80017d4 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80017c4:	887a      	ldrh	r2, [r7, #2]
 80017c6:	883b      	ldrh	r3, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d901      	bls.n	80017d0 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e002      	b.n	80017d6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80017d4:	2300      	movs	r3, #0
    }
  }
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc90      	pop	{r4, r7}
 80017de:	4770      	bx	lr

080017e0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	817b      	strh	r3, [r7, #10]
 80017f2:	460b      	mov	r3, r1
 80017f4:	813b      	strh	r3, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001806:	8b3b      	ldrh	r3, [r7, #24]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	f7ff ffb6 	bl	800177a <u8g2_is_intersection_decision_tree>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <u8g2_IsIntersection+0x38>
    return 0; 
 8001814:	2300      	movs	r3, #0
 8001816:	e00a      	b.n	800182e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	897a      	ldrh	r2, [r7, #10]
 8001828:	f7ff ffa7 	bl	800177a <u8g2_is_intersection_decision_tree>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001836:	b480      	push	{r7}
 8001838:	b089      	sub	sp, #36	@ 0x24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	4608      	mov	r0, r1
 8001840:	4611      	mov	r1, r2
 8001842:	461a      	mov	r2, r3
 8001844:	4603      	mov	r3, r0
 8001846:	817b      	strh	r3, [r7, #10]
 8001848:	460b      	mov	r3, r1
 800184a:	813b      	strh	r3, [r7, #8]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001850:	893b      	ldrh	r3, [r7, #8]
 8001852:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001854:	7efb      	ldrb	r3, [r7, #27]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001860:	7e3a      	ldrb	r2, [r7, #24]
 8001862:	7efb      	ldrb	r3, [r7, #27]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001878:	2b01      	cmp	r3, #1
 800187a:	d801      	bhi.n	8001880 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800187c:	7e3b      	ldrb	r3, [r7, #24]
 800187e:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800188a:	7e3b      	ldrb	r3, [r7, #24]
 800188c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800188e:	893b      	ldrh	r3, [r7, #8]
 8001890:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001892:	8afb      	ldrh	r3, [r7, #22]
 8001894:	f023 0307 	bic.w	r3, r3, #7
 8001898:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	7c1b      	ldrb	r3, [r3, #16]
 80018a0:	461a      	mov	r2, r3
 80018a2:	8afb      	ldrh	r3, [r7, #22]
 80018a4:	fb13 f302 	smulbb	r3, r3, r2
 80018a8:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ae:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80018b8:	897b      	ldrh	r3, [r7, #10]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80018c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d117      	bne.n	80018f8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	7ebb      	ldrb	r3, [r7, #26]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	7e7b      	ldrb	r3, [r7, #25]
 80018dc:	4053      	eors	r3, r2
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	701a      	strb	r2, [r3, #0]
	ptr++;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
	len--;
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1e8      	bne.n	80018c8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80018f6:	e038      	b.n	800196a <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	7ebb      	ldrb	r3, [r7, #26]
 80018fe:	4313      	orrs	r3, r2
 8001900:	b2da      	uxtb	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	7e7b      	ldrb	r3, [r7, #25]
 800190c:	4053      	eors	r3, r2
 800190e:	b2da      	uxtb	r2, r3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001914:	7efb      	ldrb	r3, [r7, #27]
 8001916:	3301      	adds	r3, #1
 8001918:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800191a:	7efb      	ldrb	r3, [r7, #27]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	76fb      	strb	r3, [r7, #27]
      len--;
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	3b01      	subs	r3, #1
 8001926:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001928:	7efb      	ldrb	r3, [r7, #27]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d114      	bne.n	8001958 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001932:	461a      	mov	r2, r3
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001940:	2b01      	cmp	r3, #1
 8001942:	d801      	bhi.n	8001948 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800194e:	2b01      	cmp	r3, #1
 8001950:	d008      	beq.n	8001964 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001952:	2301      	movs	r3, #1
 8001954:	767b      	strb	r3, [r7, #25]
 8001956:	e005      	b.n	8001964 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001958:	7ebb      	ldrb	r3, [r7, #26]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800195e:	7e7b      	ldrb	r3, [r7, #25]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1c6      	bne.n	80018f8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001994:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ffa9 	bl	8001976 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f7ff fd87 	bl	8001538 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a4e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	89fa      	ldrh	r2, [r7, #14]
 8001a5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	7c1b      	ldrb	r3, [r3, #16]
 8001a60:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	89fa      	ldrh	r2, [r7, #14]
 8001a6c:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a74:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	89fa      	ldrh	r2, [r7, #14]
 8001a80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a88:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001a92:	4413      	add	r3, r2
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	7c52      	ldrb	r2, [r2, #17]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	dd07      	ble.n	8001aac <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	7c5b      	ldrb	r3, [r3, #17]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	8a9a      	ldrh	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	8ada      	ldrh	r2, [r3, #22]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af02      	add	r7, sp, #8
 8001b00:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe5e 	bl	80017e0 <u8g2_IsIntersection>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d104      	bne.n	8001b34 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001b32:	e03b      	b.n	8001bac <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d205      	bcs.n	8001b58 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d905      	bls.n	8001b74 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d205      	bcs.n	8001b90 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d905      	bls.n	8001bac <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff3c 	bl	8001a3a <u8g2_update_dimension_common>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff7b 	bl	8001afa <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	817b      	strh	r3, [r7, #10]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	813b      	strh	r3, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001c26:	88f8      	ldrh	r0, [r7, #6]
 8001c28:	893a      	ldrh	r2, [r7, #8]
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	7e3b      	ldrb	r3, [r7, #24]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4603      	mov	r3, r0
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fcde 	bl	80015f4 <u8g2_draw_hv_line_2dir>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691c      	ldr	r4, [r3, #16]
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2120      	movs	r1, #32
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	47a0      	blx	r4
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	691c      	ldr	r4, [r3, #16]
 8001c76:	7afa      	ldrb	r2, [r7, #11]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2117      	movs	r1, #23
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	47a0      	blx	r4
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}

08001c8a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001c96:	1cfb      	adds	r3, r7, #3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ffe1 	bl	8001c64 <u8x8_byte_SendBytes>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68dc      	ldr	r4, [r3, #12]
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2115      	movs	r1, #21
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	47a0      	blx	r4
 8001cc6:	4603      	mov	r3, r0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68dc      	ldr	r4, [r3, #12]
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2116      	movs	r1, #22
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	47a0      	blx	r4
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68dc      	ldr	r4, [r3, #12]
 8001d06:	7afa      	ldrb	r2, [r7, #11]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2117      	movs	r1, #23
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	47a0      	blx	r4
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001d1a:	b590      	push	{r4, r7, lr}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68dc      	ldr	r4, [r3, #12]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2118      	movs	r1, #24
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	47a0      	blx	r4
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}

08001d3a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001d3a:	b590      	push	{r4, r7, lr}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68dc      	ldr	r4, [r3, #12]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2119      	movs	r1, #25
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	47a0      	blx	r4
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}

08001d5a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001d5a:	b590      	push	{r4, r7, lr}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	73fb      	strb	r3, [r7, #15]
    data++;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d74:	d031      	beq.n	8001dda <u8x8_cad_SendSequence+0x80>
 8001d76:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d78:	dc3d      	bgt.n	8001df6 <u8x8_cad_SendSequence+0x9c>
 8001d7a:	2b19      	cmp	r3, #25
 8001d7c:	dc3b      	bgt.n	8001df6 <u8x8_cad_SendSequence+0x9c>
 8001d7e:	2b18      	cmp	r3, #24
 8001d80:	da23      	bge.n	8001dca <u8x8_cad_SendSequence+0x70>
 8001d82:	2b16      	cmp	r3, #22
 8001d84:	dc02      	bgt.n	8001d8c <u8x8_cad_SendSequence+0x32>
 8001d86:	2b15      	cmp	r3, #21
 8001d88:	da03      	bge.n	8001d92 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001d8a:	e034      	b.n	8001df6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001d8c:	2b17      	cmp	r3, #23
 8001d8e:	d00e      	beq.n	8001dae <u8x8_cad_SendSequence+0x54>
	return;
 8001d90:	e031      	b.n	8001df6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68dc      	ldr	r4, [r3, #12]
 8001d9c:	7bba      	ldrb	r2, [r7, #14]
 8001d9e:	7bf9      	ldrb	r1, [r7, #15]
 8001da0:	2300      	movs	r3, #0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	47a0      	blx	r4
	  data++;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	603b      	str	r3, [r7, #0]
	  break;
 8001dac:	e022      	b.n	8001df4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001db4:	f107 030e 	add.w	r3, r7, #14
 8001db8:	461a      	mov	r2, r3
 8001dba:	2101      	movs	r1, #1
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff99 	bl	8001cf4 <u8x8_cad_SendData>
	  data++;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	603b      	str	r3, [r7, #0]
	  break;
 8001dc8:	e014      	b.n	8001df4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68dc      	ldr	r4, [r3, #12]
 8001dce:	7bf9      	ldrb	r1, [r7, #15]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	47a0      	blx	r4
	  break;
 8001dd8:	e00c      	b.n	8001df4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	461a      	mov	r2, r3
 8001de4:	2129      	movs	r1, #41	@ 0x29
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f9d1 	bl	800218e <u8x8_gpio_call>
	  data++;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	603b      	str	r3, [r7, #0]
	  break;
 8001df2:	bf00      	nop
    cmd = *data;
 8001df4:	e7b6      	b.n	8001d64 <u8x8_cad_SendSequence+0xa>
	return;
 8001df6:	bf00      	nop
    }
  }
}
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
	...

08001e00 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	72fb      	strb	r3, [r7, #11]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	3b14      	subs	r3, #20
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d82f      	bhi.n	8001e7a <u8x8_cad_001+0x7a>
 8001e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e20 <u8x8_cad_001+0x20>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e69 	.word	0x08001e69
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001e4d 	.word	0x08001e4d
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e69 	.word	0x08001e69
 8001e34:	08001e69 	.word	0x08001e69
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff ff00 	bl	8001c40 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001e40:	7abb      	ldrb	r3, [r7, #10]
 8001e42:	4619      	mov	r1, r3
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff ff20 	bl	8001c8a <u8x8_byte_SendByte>
      break;
 8001e4a:	e018      	b.n	8001e7e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fef6 	bl	8001c40 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001e54:	7abb      	ldrb	r3, [r7, #10]
 8001e56:	4619      	mov	r1, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff ff16 	bl	8001c8a <u8x8_byte_SendByte>
      break;
 8001e5e:	e00e      	b.n	8001e7e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001e60:	2101      	movs	r1, #1
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff feec 	bl	8001c40 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	691c      	ldr	r4, [r3, #16]
 8001e6c:	7aba      	ldrb	r2, [r7, #10]
 8001e6e:	7af9      	ldrb	r1, [r7, #11]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	47a0      	blx	r4
 8001e76:	4603      	mov	r3, r0
 8001e78:	e002      	b.n	8001e80 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <u8x8_cad_001+0x80>
  }
  return 1;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}

08001e88 <u8x8_d_ssd1309_generic>:
};



static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	72fb      	strb	r3, [r7, #11]
 8001e96:	4613      	mov	r3, r2
 8001e98:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d006      	beq.n	8001eae <u8x8_d_ssd1309_generic+0x26>
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	dc63      	bgt.n	8001f6c <u8x8_d_ssd1309_generic+0xe4>
 8001ea4:	2b0b      	cmp	r3, #11
 8001ea6:	d044      	beq.n	8001f32 <u8x8_d_ssd1309_generic+0xaa>
 8001ea8:	2b0e      	cmp	r3, #14
 8001eaa:	d04f      	beq.n	8001f4c <u8x8_d_ssd1309_generic+0xc4>
 8001eac:	e05e      	b.n	8001f6c <u8x8_d_ssd1309_generic+0xe4>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff ff33 	bl	8001d1a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	795b      	ldrb	r3, [r3, #5]
 8001eb8:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	4413      	add	r3, r2
 8001eca:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff fee6 	bl	8001cac <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff fede 	bl	8001cac <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	799b      	ldrb	r3, [r3, #6]
 8001ef4:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff fed5 	bl	8001cac <u8x8_cad_SendCmd>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	791b      	ldrb	r3, [r3, #4]
 8001f06:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8001f0e:	7dbb      	ldrb	r3, [r7, #22]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4619      	mov	r1, r3
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff feeb 	bl	8001cf4 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8001f1e:	7abb      	ldrb	r3, [r7, #10]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001f24:	7abb      	ldrb	r3, [r7, #10]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1eb      	bne.n	8001f02 <u8x8_d_ssd1309_generic+0x7a>
      
      u8x8_cad_EndTransfer(u8x8);
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff ff05 	bl	8001d3a <u8x8_cad_EndTransfer>
      break;
 8001f30:	e01e      	b.n	8001f70 <u8x8_d_ssd1309_generic+0xe8>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001f32:	7abb      	ldrb	r3, [r7, #10]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d104      	bne.n	8001f42 <u8x8_d_ssd1309_generic+0xba>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 8001f38:	4910      	ldr	r1, [pc, #64]	@ (8001f7c <u8x8_d_ssd1309_generic+0xf4>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7ff ff0d 	bl	8001d5a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
      break;
 8001f40:	e016      	b.n	8001f70 <u8x8_d_ssd1309_generic+0xe8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 8001f42:	490f      	ldr	r1, [pc, #60]	@ (8001f80 <u8x8_d_ssd1309_generic+0xf8>)
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff ff08 	bl	8001d5a <u8x8_cad_SendSequence>
      break;
 8001f4a:	e011      	b.n	8001f70 <u8x8_d_ssd1309_generic+0xe8>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff fee4 	bl	8001d1a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001f52:	2181      	movs	r1, #129	@ 0x81
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff fea9 	bl	8001cac <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1309 has range from 0 to 255 */
 8001f5a:	7abb      	ldrb	r3, [r7, #10]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7ff feb6 	bl	8001cd0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fee8 	bl	8001d3a <u8x8_cad_EndTransfer>
      break;
 8001f6a:	e001      	b.n	8001f70 <u8x8_d_ssd1309_generic+0xe8>
#endif
    default:
      return 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <u8x8_d_ssd1309_generic+0xea>
  }
  return 1;
 8001f70:	2301      	movs	r3, #1
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08005d30 	.word	0x08005d30
 8001f80:	08005d38 	.word	0x08005d38

08001f84 <u8x8_d_ssd1309_128x64_noname2>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1309_128x64_noname2(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	72fb      	strb	r3, [r7, #11]
 8001f92:	4613      	mov	r3, r2
 8001f94:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8001f96:	7aba      	ldrb	r2, [r7, #10]
 8001f98:	7af9      	ldrb	r1, [r7, #11]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff ff73 	bl	8001e88 <u8x8_d_ssd1309_generic>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <u8x8_d_ssd1309_128x64_noname2+0x28>
    return 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e032      	b.n	8002012 <u8x8_d_ssd1309_128x64_noname2+0x8e>
  
  switch(msg)
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	2b0d      	cmp	r3, #13
 8001fb0:	d006      	beq.n	8001fc0 <u8x8_d_ssd1309_128x64_noname2+0x3c>
 8001fb2:	2b0d      	cmp	r3, #13
 8001fb4:	dc2a      	bgt.n	800200c <u8x8_d_ssd1309_128x64_noname2+0x88>
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	d023      	beq.n	8002002 <u8x8_d_ssd1309_128x64_noname2+0x7e>
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d019      	beq.n	8001ff2 <u8x8_d_ssd1309_128x64_noname2+0x6e>
 8001fbe:	e025      	b.n	800200c <u8x8_d_ssd1309_128x64_noname2+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8001fc0:	7abb      	ldrb	r3, [r7, #10]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10a      	bne.n	8001fdc <u8x8_d_ssd1309_128x64_noname2+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 8001fc6:	4915      	ldr	r1, [pc, #84]	@ (800201c <u8x8_d_ssd1309_128x64_noname2+0x98>)
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff fec6 	bl	8001d5a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	7c9a      	ldrb	r2, [r3, #18]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8001fda:	e019      	b.n	8002010 <u8x8_d_ssd1309_128x64_noname2+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 8001fdc:	4910      	ldr	r1, [pc, #64]	@ (8002020 <u8x8_d_ssd1309_128x64_noname2+0x9c>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff febb 	bl	8001d5a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	7cda      	ldrb	r2, [r3, #19]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8001ff0:	e00e      	b.n	8002010 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f82e 	bl	8002054 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 8001ff8:	490a      	ldr	r1, [pc, #40]	@ (8002024 <u8x8_d_ssd1309_128x64_noname2+0xa0>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff fead 	bl	8001d5a <u8x8_cad_SendSequence>
      break;
 8002000:	e006      	b.n	8002010 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname2_display_info);
 8002002:	4909      	ldr	r1, [pc, #36]	@ (8002028 <u8x8_d_ssd1309_128x64_noname2+0xa4>)
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f811 	bl	800202c <u8x8_d_helper_display_setup_memory>
      break;
 800200a:	e001      	b.n	8002010 <u8x8_d_ssd1309_128x64_noname2+0x8c>
    default:
      return 0;
 800200c:	2300      	movs	r3, #0
 800200e:	e000      	b.n	8002012 <u8x8_d_ssd1309_128x64_noname2+0x8e>
  }
  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08005d40 	.word	0x08005d40
 8002020:	08005d48 	.word	0x08005d48
 8002024:	08005d68 	.word	0x08005d68
 8002028:	08005d50 	.word	0x08005d50

0800202c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	7c9a      	ldrb	r2, [r3, #18]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695c      	ldr	r4, [r3, #20]
 8002060:	2300      	movs	r3, #0
 8002062:	2200      	movs	r2, #0
 8002064:	2128      	movs	r1, #40	@ 0x28
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68dc      	ldr	r4, [r3, #12]
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	2114      	movs	r1, #20
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002078:	2201      	movs	r2, #1
 800207a:	214b      	movs	r1, #75	@ 0x4b
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f886 	bl	800218e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	791b      	ldrb	r3, [r3, #4]
 8002088:	461a      	mov	r2, r3
 800208a:	2129      	movs	r1, #41	@ 0x29
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f87e 	bl	800218e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	214b      	movs	r1, #75	@ 0x4b
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f879 	bl	800218e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	2129      	movs	r1, #41	@ 0x29
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f871 	bl	800218e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	214b      	movs	r1, #75	@ 0x4b
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f86c 	bl	800218e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	795b      	ldrb	r3, [r3, #5]
 80020bc:	461a      	mov	r2, r3
 80020be:	2129      	movs	r1, #41	@ 0x29
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f864 	bl	800218e <u8x8_gpio_call>
}    
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}

080020ce <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80020ce:	b590      	push	{r4, r7, lr}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	4608      	mov	r0, r1
 80020d8:	4611      	mov	r1, r2
 80020da:	461a      	mov	r2, r3
 80020dc:	4603      	mov	r3, r0
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70bb      	strb	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80020ec:	78bb      	ldrb	r3, [r7, #2]
 80020ee:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689c      	ldr	r4, [r3, #8]
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	2201      	movs	r2, #1
 8002102:	210f      	movs	r1, #15
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	47a0      	blx	r4
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}

08002112 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002112:	b590      	push	{r4, r7, lr}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689c      	ldr	r4, [r3, #8]
 800211e:	2300      	movs	r3, #0
 8002120:	2200      	movs	r2, #0
 8002122:	2109      	movs	r1, #9
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	47a0      	blx	r4
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689c      	ldr	r4, [r3, #8]
 800213c:	2300      	movs	r3, #0
 800213e:	2200      	movs	r2, #0
 8002140:	210a      	movs	r1, #10
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}

0800214e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800214e:	b590      	push	{r4, r7, lr}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689c      	ldr	r4, [r3, #8]
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	2300      	movs	r3, #0
 8002162:	210b      	movs	r1, #11
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	47a0      	blx	r4
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}

08002170 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689c      	ldr	r4, [r3, #8]
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	2110      	movs	r1, #16
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	47a0      	blx	r4
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800218e:	b590      	push	{r4, r7, lr}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
 800219a:	4613      	mov	r3, r2
 800219c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695c      	ldr	r4, [r3, #20]
 80021a2:	78ba      	ldrb	r2, [r7, #2]
 80021a4:	78f9      	ldrb	r1, [r7, #3]
 80021a6:	2300      	movs	r3, #0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	47a0      	blx	r4
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	72fb      	strb	r3, [r7, #11]
 80021c2:	4613      	mov	r3, r2
 80021c4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <u8x8_SetupDefaults+0x58>)
 80021e6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <u8x8_SetupDefaults+0x58>)
 80021ec:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <u8x8_SetupDefaults+0x58>)
 80021f2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <u8x8_SetupDefaults+0x58>)
 80021f8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	22ff      	movs	r2, #255	@ 0xff
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	22ff      	movs	r2, #255	@ 0xff
 800221c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	080021b5 	.word	0x080021b5

08002230 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff ffc8 	bl	80021d4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff ff58 	bl	8002112 <u8x8_SetupMemory>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480d      	ldr	r0, [pc, #52]	@ (80022a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002272:	490e      	ldr	r1, [pc, #56]	@ (80022ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002274:	4a0e      	ldr	r2, [pc, #56]	@ (80022b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002288:	4c0b      	ldr	r4, [pc, #44]	@ (80022b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002296:	f7fe ff8b 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f003 fbef 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229e:	f7fe fa31 	bl	8000704 <main>
  bx  lr    
 80022a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022b0:	08005da4 	.word	0x08005da4
  ldr r2, =_sbss
 80022b4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80022b8:	20000ce4 	.word	0x20000ce4

080022bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC_IRQHandler>

080022be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c2:	2003      	movs	r0, #3
 80022c4:	f000 f92e 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f000 f805 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ce:	f7fe fd27 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f93b 	bl	8002572 <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 f911 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	@ (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000000 	.word	0x20000000
 8002330:	20000008 	.word	0x20000008
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008
 800235c:	20000ce0 	.word	0x20000ce0

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000ce0 	.word	0x20000ce0

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff ffee 	bl	8002360 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239e:	bf00      	nop
 80023a0:	f7ff ffde 	bl	8002360 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000008 	.word	0x20000008

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <__NVIC_SetPriorityGrouping+0x40>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <__NVIC_SetPriorityGrouping+0x40>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00
 8002404:	05fa0000 	.word	0x05fa0000

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff47 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff5c 	bl	8002408 <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffb0 	bl	80024e0 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06a      	b.n	8002674 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2223      	movs	r2, #35	@ 0x23
 80025ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7fe fbd9 	bl	8000d68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_ETH_Init+0xf0>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a30      	ldr	r2, [pc, #192]	@ (800267c <HAL_ETH_Init+0xf0>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <HAL_ETH_Init+0xf0>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002680 <HAL_ETH_Init+0xf4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <HAL_ETH_Init+0xf4>)
 80025d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025da:	4b29      	ldr	r3, [pc, #164]	@ (8002680 <HAL_ETH_Init+0xf4>)
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4927      	ldr	r1, [pc, #156]	@ (8002680 <HAL_ETH_Init+0xf4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <HAL_ETH_Init+0xf4>)
 80025ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002602:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002604:	f7ff feac 	bl	8002360 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800260a:	e011      	b.n	8002630 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800260c:	f7ff fea8 	bl	8002360 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800261a:	d909      	bls.n	8002630 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	22e0      	movs	r2, #224	@ 0xe0
 8002628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e021      	b.n	8002674 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e4      	bne.n	800260c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f958 	bl	80028f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f9ff 	bl	8002a4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa55 	bl	8002afe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	461a      	mov	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9bd 	bl	80029dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2210      	movs	r2, #16
 800266e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	40013800 	.word	0x40013800

08002684 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4b51      	ldr	r3, [pc, #324]	@ (80027e0 <ETH_SetMACConfig+0x15c>)
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7c1b      	ldrb	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <ETH_SetMACConfig+0x28>
 80026a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026aa:	e000      	b.n	80026ae <ETH_SetMACConfig+0x2a>
 80026ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7c5b      	ldrb	r3, [r3, #17]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <ETH_SetMACConfig+0x38>
 80026b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026ba:	e000      	b.n	80026be <ETH_SetMACConfig+0x3a>
 80026bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	7fdb      	ldrb	r3, [r3, #31]
 80026ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	7f92      	ldrb	r2, [r2, #30]
 80026d8:	2a00      	cmp	r2, #0
 80026da:	d102      	bne.n	80026e2 <ETH_SetMACConfig+0x5e>
 80026dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e0:	e000      	b.n	80026e4 <ETH_SetMACConfig+0x60>
 80026e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80026e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7f1b      	ldrb	r3, [r3, #28]
 80026ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002702:	2a00      	cmp	r2, #0
 8002704:	d102      	bne.n	800270c <ETH_SetMACConfig+0x88>
 8002706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270a:	e000      	b.n	800270e <ETH_SetMACConfig+0x8a>
 800270c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800270e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7bdb      	ldrb	r3, [r3, #15]
 8002714:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002716:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800271c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002724:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002726:	4313      	orrs	r3, r2
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800273e:	2001      	movs	r0, #1
 8002740:	f7ff fe1a 	bl	8002378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002762:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800276a:	2a00      	cmp	r2, #0
 800276c:	d101      	bne.n	8002772 <ETH_SetMACConfig+0xee>
 800276e:	2280      	movs	r2, #128	@ 0x80
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0xf0>
 8002772:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002774:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800277a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002782:	2a01      	cmp	r2, #1
 8002784:	d101      	bne.n	800278a <ETH_SetMACConfig+0x106>
 8002786:	2208      	movs	r2, #8
 8002788:	e000      	b.n	800278c <ETH_SetMACConfig+0x108>
 800278a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800278c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002794:	2a01      	cmp	r2, #1
 8002796:	d101      	bne.n	800279c <ETH_SetMACConfig+0x118>
 8002798:	2204      	movs	r2, #4
 800279a:	e000      	b.n	800279e <ETH_SetMACConfig+0x11a>
 800279c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800279e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	d101      	bne.n	80027ae <ETH_SetMACConfig+0x12a>
 80027aa:	2202      	movs	r2, #2
 80027ac:	e000      	b.n	80027b0 <ETH_SetMACConfig+0x12c>
 80027ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027b0:	4313      	orrs	r3, r2
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7ff fdd5 	bl	8002378 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	ff20810f 	.word	0xff20810f

080027e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4b3d      	ldr	r3, [pc, #244]	@ (80028f4 <ETH_SetDMAConfig+0x110>)
 80027fe:	4013      	ands	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7b1b      	ldrb	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <ETH_SetDMAConfig+0x2c>
 800280a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800280e:	e000      	b.n	8002812 <ETH_SetDMAConfig+0x2e>
 8002810:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7b5b      	ldrb	r3, [r3, #13]
 8002816:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002818:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	7f52      	ldrb	r2, [r2, #29]
 800281e:	2a00      	cmp	r2, #0
 8002820:	d102      	bne.n	8002828 <ETH_SetDMAConfig+0x44>
 8002822:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002826:	e000      	b.n	800282a <ETH_SetDMAConfig+0x46>
 8002828:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800282a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7b9b      	ldrb	r3, [r3, #14]
 8002830:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002832:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7f1b      	ldrb	r3, [r3, #28]
 800283e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002840:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7f9b      	ldrb	r3, [r3, #30]
 8002846:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002848:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800284e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002856:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002858:	4313      	orrs	r3, r2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002868:	461a      	mov	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff fd7c 	bl	8002378 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002888:	461a      	mov	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	791b      	ldrb	r3, [r3, #4]
 8002892:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002898:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800289e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff fd4d 	bl	8002378 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	f8de3f23 	.word	0xf8de3f23

080028f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0a6      	sub	sp, #152	@ 0x98
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800290c:	2300      	movs	r3, #0
 800290e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002934:	2300      	movs	r3, #0
 8002936:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800293e:	2300      	movs	r3, #0
 8002940:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800295a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800295e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002960:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002964:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800296c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fe86 	bl	8002684 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002978:	2301      	movs	r3, #1
 800297a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800297c:	2301      	movs	r3, #1
 800297e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029a4:	2301      	movs	r3, #1
 80029a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ff08 	bl	80027e4 <ETH_SetDMAConfig>
}
 80029d4:	bf00      	nop
 80029d6:	3798      	adds	r7, #152	@ 0x98
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3305      	adds	r3, #5
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	3204      	adds	r2, #4
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <ETH_MACAddressConfig+0x68>)
 80029fe:	4413      	add	r3, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3303      	adds	r3, #3
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	061a      	lsls	r2, r3, #24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3302      	adds	r3, #2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4313      	orrs	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <ETH_MACAddressConfig+0x6c>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6013      	str	r3, [r2, #0]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40028040 	.word	0x40028040
 8002a48:	40028044 	.word	0x40028044

08002a4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e03e      	b.n	8002ad8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	3206      	adds	r2, #6
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d80c      	bhi.n	8002abc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e004      	b.n	8002ac6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d9bd      	bls.n	8002a5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af0:	611a      	str	r2, [r3, #16]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e046      	b.n	8002b9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6919      	ldr	r1, [r3, #16]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002b50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	3212      	adds	r2, #18
 8002b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d80c      	bhi.n	8002b8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6919      	ldr	r1, [r3, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	e004      	b.n	8002b94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d9b5      	bls.n	8002b0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bca:	60da      	str	r2, [r3, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e175      	b.n	8002ee4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f040 8164 	bne.w	8002ede <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d005      	beq.n	8002c2e <HAL_GPIO_Init+0x56>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d130      	bne.n	8002c90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0201 	and.w	r2, r3, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d017      	beq.n	8002ccc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d123      	bne.n	8002d20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80be 	beq.w	8002ede <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	4a65      	ldr	r2, [pc, #404]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d6e:	4b63      	ldr	r3, [pc, #396]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d7a:	4a61      	ldr	r2, [pc, #388]	@ (8002f00 <HAL_GPIO_Init+0x328>)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a58      	ldr	r2, [pc, #352]	@ (8002f04 <HAL_GPIO_Init+0x32c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d037      	beq.n	8002e16 <HAL_GPIO_Init+0x23e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a57      	ldr	r2, [pc, #348]	@ (8002f08 <HAL_GPIO_Init+0x330>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d031      	beq.n	8002e12 <HAL_GPIO_Init+0x23a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02b      	beq.n	8002e0e <HAL_GPIO_Init+0x236>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a55      	ldr	r2, [pc, #340]	@ (8002f10 <HAL_GPIO_Init+0x338>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d025      	beq.n	8002e0a <HAL_GPIO_Init+0x232>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a54      	ldr	r2, [pc, #336]	@ (8002f14 <HAL_GPIO_Init+0x33c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <HAL_GPIO_Init+0x22e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a53      	ldr	r2, [pc, #332]	@ (8002f18 <HAL_GPIO_Init+0x340>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x22a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	@ (8002f1c <HAL_GPIO_Init+0x344>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x226>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	@ (8002f20 <HAL_GPIO_Init+0x348>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x222>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a50      	ldr	r2, [pc, #320]	@ (8002f24 <HAL_GPIO_Init+0x34c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x21e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4f      	ldr	r2, [pc, #316]	@ (8002f28 <HAL_GPIO_Init+0x350>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x21a>
 8002dee:	2309      	movs	r3, #9
 8002df0:	e012      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002df2:	230a      	movs	r3, #10
 8002df4:	e010      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002df6:	2308      	movs	r3, #8
 8002df8:	e00e      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e00c      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002dfe:	2306      	movs	r3, #6
 8002e00:	e00a      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002e02:	2305      	movs	r3, #5
 8002e04:	e008      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002e06:	2304      	movs	r3, #4
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e004      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_GPIO_Init+0x240>
 8002e16:	2300      	movs	r3, #0
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f002 0203 	and.w	r2, r2, #3
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4093      	lsls	r3, r2
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e28:	4935      	ldr	r1, [pc, #212]	@ (8002f00 <HAL_GPIO_Init+0x328>)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e36:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5a:	4a34      	ldr	r2, [pc, #208]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e60:	4b32      	ldr	r3, [pc, #200]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e84:	4a29      	ldr	r2, [pc, #164]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e8a:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eae:	4a1f      	ldr	r2, [pc, #124]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed8:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <HAL_GPIO_Init+0x354>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	f67f ae86 	bls.w	8002bf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3724      	adds	r7, #36	@ 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40021400 	.word	0x40021400
 8002f1c:	40021800 	.word	0x40021800
 8002f20:	40021c00 	.word	0x40021c00
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40022400 	.word	0x40022400
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	887b      	ldrh	r3, [r7, #2]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	e001      	b.n	8002f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fa4:	887a      	ldrh	r2, [r7, #2]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	041a      	lsls	r2, r3, #16
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	619a      	str	r2, [r3, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc8:	b08f      	sub	sp, #60	@ 0x3c
 8002fca:	af0a      	add	r7, sp, #40	@ 0x28
 8002fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e116      	b.n	8003206 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f832 	bl	800105c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fa8c 	bl	8005534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	687e      	ldr	r6, [r7, #4]
 8003024:	466d      	mov	r5, sp
 8003026:	f106 0410 	add.w	r4, r6, #16
 800302a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003036:	e885 0003 	stmia.w	r5, {r0, r1}
 800303a:	1d33      	adds	r3, r6, #4
 800303c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303e:	6838      	ldr	r0, [r7, #0]
 8003040:	f002 fa20 	bl	8005484 <USB_CoreInit>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0d7      	b.n	8003206 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fa7a 	bl	8005556 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	e04a      	b.n	80030fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	333d      	adds	r3, #61	@ 0x3d
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	333c      	adds	r3, #60	@ 0x3c
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	b298      	uxth	r0, r3
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	3344      	adds	r3, #68	@ 0x44
 80030a4:	4602      	mov	r2, r0
 80030a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	3340      	adds	r3, #64	@ 0x40
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3348      	adds	r3, #72	@ 0x48
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334c      	adds	r3, #76	@ 0x4c
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3354      	adds	r3, #84	@ 0x54
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	3301      	adds	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d3af      	bcc.n	8003068 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e044      	b.n	8003198 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3301      	adds	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3b5      	bcc.n	800310e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	687e      	ldr	r6, [r7, #4]
 80031aa:	466d      	mov	r5, sp
 80031ac:	f106 0410 	add.w	r4, r6, #16
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80031c0:	1d33      	adds	r3, r6, #4
 80031c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c4:	6838      	ldr	r0, [r7, #0]
 80031c6:	f002 fa13 	bl	80055f0 <USB_DevInit>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e014      	b.n	8003206 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d102      	bne.n	80031fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f80b 	bl	8003210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 fbd1 	bl	80059a6 <USB_DevDisconnect>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_PCDEx_ActivateLPM+0x44>)
 8003240:	4313      	orrs	r3, r2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	10000003 	.word	0x10000003

08003258 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40007000 	.word	0x40007000

08003278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e29b      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b96      	ldr	r3, [pc, #600]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a8:	4b93      	ldr	r3, [pc, #588]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d112      	bne.n	80032da <HAL_RCC_OscConfig+0x62>
 80032b4:	4b90      	ldr	r3, [pc, #576]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b8d      	ldr	r3, [pc, #564]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d06c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x130>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d168      	bne.n	80033a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e275      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x7a>
 80032e4:	4b84      	ldr	r3, [pc, #528]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a83      	ldr	r2, [pc, #524]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e02e      	b.n	8003350 <HAL_RCC_OscConfig+0xd8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x9c>
 80032fa:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7e      	ldr	r2, [pc, #504]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b7c      	ldr	r3, [pc, #496]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7b      	ldr	r2, [pc, #492]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xd8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xc0>
 800331e:	4b76      	ldr	r3, [pc, #472]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a75      	ldr	r2, [pc, #468]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b73      	ldr	r3, [pc, #460]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a72      	ldr	r2, [pc, #456]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xd8>
 8003338:	4b6f      	ldr	r3, [pc, #444]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6e      	ldr	r2, [pc, #440]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b6c      	ldr	r3, [pc, #432]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6b      	ldr	r2, [pc, #428]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7ff f802 	bl	8002360 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fffe 	bl	8002360 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e229      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xe8>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe ffee 	bl	8002360 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe ffea 	bl	8002360 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	@ 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e215      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x110>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d069      	beq.n	800348a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b6:	4b50      	ldr	r3, [pc, #320]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x190>
 80033ce:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b47      	ldr	r3, [pc, #284]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x17a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1e9      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b41      	ldr	r3, [pc, #260]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	493d      	ldr	r1, [pc, #244]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e040      	b.n	800348a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d023      	beq.n	8003458 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b39      	ldr	r3, [pc, #228]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a38      	ldr	r2, [pc, #224]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe ffa0 	bl	8002360 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe ff9c 	bl	8002360 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1c7      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4929      	ldr	r1, [pc, #164]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
 8003456:	e018      	b.n	800348a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003458:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a26      	ldr	r2, [pc, #152]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe ff7c 	bl	8002360 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe ff78 	bl	8002360 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1a3      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d038      	beq.n	8003508 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d019      	beq.n	80034d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	4a15      	ldr	r2, [pc, #84]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fe ff59 	bl	8002360 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe ff55 	bl	8002360 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e180      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80034c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x23a>
 80034d0:	e01a      	b.n	8003508 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <HAL_RCC_OscConfig+0x280>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe ff3f 	bl	8002360 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe ff3b 	bl	8002360 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d903      	bls.n	80034fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e166      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
 80034f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b92      	ldr	r3, [pc, #584]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ee      	bne.n	80034e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a4 	beq.w	800365e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b8c      	ldr	r3, [pc, #560]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10d      	bne.n	800353e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	4b89      	ldr	r3, [pc, #548]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a88      	ldr	r2, [pc, #544]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b86      	ldr	r3, [pc, #536]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353e:	4b83      	ldr	r3, [pc, #524]	@ (800374c <HAL_RCC_OscConfig+0x4d4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800354a:	4b80      	ldr	r3, [pc, #512]	@ (800374c <HAL_RCC_OscConfig+0x4d4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7f      	ldr	r2, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x4d4>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fe ff03 	bl	8002360 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fe feff 	bl	8002360 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	@ 0x64
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e12a      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003570:	4b76      	ldr	r3, [pc, #472]	@ (800374c <HAL_RCC_OscConfig+0x4d4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x31a>
 8003584:	4b70      	ldr	r3, [pc, #448]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4a6f      	ldr	r2, [pc, #444]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003590:	e02d      	b.n	80035ee <HAL_RCC_OscConfig+0x376>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x33c>
 800359a:	4b6b      	ldr	r3, [pc, #428]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a6a      	ldr	r2, [pc, #424]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a6:	4b68      	ldr	r3, [pc, #416]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a67      	ldr	r2, [pc, #412]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	e01c      	b.n	80035ee <HAL_RCC_OscConfig+0x376>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x35e>
 80035bc:	4b62      	ldr	r3, [pc, #392]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a61      	ldr	r2, [pc, #388]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d4:	e00b      	b.n	80035ee <HAL_RCC_OscConfig+0x376>
 80035d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	4a5b      	ldr	r2, [pc, #364]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e2:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	4a58      	ldr	r2, [pc, #352]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d015      	beq.n	8003622 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe feb3 	bl	8002360 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fe feaf 	bl	8002360 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0d8      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003614:	4b4c      	ldr	r3, [pc, #304]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ee      	beq.n	80035fe <HAL_RCC_OscConfig+0x386>
 8003620:	e014      	b.n	800364c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe fe9d 	bl	8002360 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe fe99 	bl	8002360 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0c2      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003640:	4b41      	ldr	r3, [pc, #260]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ee      	bne.n	800362a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d105      	bne.n	800365e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003652:	4b3d      	ldr	r3, [pc, #244]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	4a3c      	ldr	r2, [pc, #240]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80ae 	beq.w	80037c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003668:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d06d      	beq.n	8003750 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d14b      	bne.n	8003714 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b32      	ldr	r3, [pc, #200]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a31      	ldr	r2, [pc, #196]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe fe6a 	bl	8002360 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe fe66 	bl	8002360 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e091      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	3b01      	subs	r3, #1
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	071b      	lsls	r3, r3, #28
 80036da:	491b      	ldr	r1, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 80036e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fe38 	bl	8002360 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe fe34 	bl	8002360 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e05f      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x47c>
 8003712:	e057      	b.n	80037c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0b      	ldr	r2, [pc, #44]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fe1e 	bl	8002360 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fe1a 	bl	8002360 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e045      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b03      	ldr	r3, [pc, #12]	@ (8003748 <HAL_RCC_OscConfig+0x4d0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x4b0>
 8003746:	e03d      	b.n	80037c4 <HAL_RCC_OscConfig+0x54c>
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003750:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <HAL_RCC_OscConfig+0x558>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d030      	beq.n	80037c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d129      	bne.n	80037c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d122      	bne.n	80037c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003786:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003788:	4293      	cmp	r3, r2
 800378a:	d119      	bne.n	80037c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d10f      	bne.n	80037c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0d0      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b67      	ldr	r3, [pc, #412]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	4965      	ldr	r1, [pc, #404]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0b8      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003834:	4b59      	ldr	r3, [pc, #356]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a58      	ldr	r2, [pc, #352]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800383e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800384c:	4b53      	ldr	r3, [pc, #332]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a52      	ldr	r2, [pc, #328]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003856:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b50      	ldr	r3, [pc, #320]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	494d      	ldr	r1, [pc, #308]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d040      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b47      	ldr	r3, [pc, #284]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d115      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07f      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	4b41      	ldr	r3, [pc, #260]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e073      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b3d      	ldr	r3, [pc, #244]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06b      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	4b39      	ldr	r3, [pc, #228]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4936      	ldr	r1, [pc, #216]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c8:	f7fe fd4a 	bl	8002360 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fe fd46 	bl	8002360 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e053      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b2d      	ldr	r3, [pc, #180]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 020c 	and.w	r2, r3, #12
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1eb      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b27      	ldr	r3, [pc, #156]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d210      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b24      	ldr	r3, [pc, #144]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	4922      	ldr	r1, [pc, #136]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e032      	b.n	800398e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003934:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4916      	ldr	r1, [pc, #88]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	490e      	ldr	r1, [pc, #56]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003966:	f000 f821 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 800396a:	4602      	mov	r2, r0
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	490a      	ldr	r1, [pc, #40]	@ (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003978:	5ccb      	ldrb	r3, [r1, r3]
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	4a09      	ldr	r2, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fca6 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023c00 	.word	0x40023c00
 800399c:	40023800 	.word	0x40023800
 80039a0:	08005d0c 	.word	0x08005d0c
 80039a4:	20000000 	.word	0x20000000
 80039a8:	20000004 	.word	0x20000004

080039ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b0:	b094      	sub	sp, #80	@ 0x50
 80039b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b8:	2300      	movs	r3, #0
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039bc:	2300      	movs	r3, #0
 80039be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c4:	4b79      	ldr	r3, [pc, #484]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x200>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d00d      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x40>
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	f200 80e1 	bhi.w	8003b98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x34>
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039de:	e0db      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b73      	ldr	r3, [pc, #460]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e4:	e0db      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039e6:	4b73      	ldr	r3, [pc, #460]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x208>)
 80039e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ea:	e0d8      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x200>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b6a      	ldr	r3, [pc, #424]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a16:	2300      	movs	r3, #0
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a30:	0150      	lsls	r0, r2, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4621      	mov	r1, r4
 8003a38:	1a51      	subs	r1, r2, r1
 8003a3a:	6139      	str	r1, [r7, #16]
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a50:	4659      	mov	r1, fp
 8003a52:	018b      	lsls	r3, r1, #6
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	018a      	lsls	r2, r1, #6
 8003a5e:	4651      	mov	r1, sl
 8003a60:	ebb2 0801 	subs.w	r8, r2, r1
 8003a64:	4659      	mov	r1, fp
 8003a66:	eb63 0901 	sbc.w	r9, r3, r1
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7e:	4690      	mov	r8, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	eb18 0303 	adds.w	r3, r8, r3
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	eb49 0303 	adc.w	r3, r9, r3
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	024b      	lsls	r3, r1, #9
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	024a      	lsls	r2, r1, #9
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003abc:	f7fc fbbc 	bl	8000238 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac8:	e058      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b38      	ldr	r3, [pc, #224]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x200>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0159      	lsls	r1, r3, #5
 8003af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af6:	0150      	lsls	r0, r2, #5
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4641      	mov	r1, r8
 8003afe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b02:	4649      	mov	r1, r9
 8003b04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b20:	eb63 050b 	sbc.w	r5, r3, fp
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	00eb      	lsls	r3, r5, #3
 8003b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b32:	00e2      	lsls	r2, r4, #3
 8003b34:	4614      	mov	r4, r2
 8003b36:	461d      	mov	r5, r3
 8003b38:	4643      	mov	r3, r8
 8003b3a:	18e3      	adds	r3, r4, r3
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	464b      	mov	r3, r9
 8003b40:	eb45 0303 	adc.w	r3, r5, r3
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b52:	4629      	mov	r1, r5
 8003b54:	028b      	lsls	r3, r1, #10
 8003b56:	4621      	mov	r1, r4
 8003b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	028a      	lsls	r2, r1, #10
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b66:	2200      	movs	r2, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	61fa      	str	r2, [r7, #28]
 8003b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b70:	f7fc fb62 	bl	8000238 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3750      	adds	r7, #80	@ 0x50
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	007a1200 	.word	0x007a1200

08003bb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd4:	f7ff fff0 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0a9b      	lsrs	r3, r3, #10
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4903      	ldr	r1, [pc, #12]	@ (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	08005d1c 	.word	0x08005d1c

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bfc:	f7ff ffdc 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0b5b      	lsrs	r3, r3, #13
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	@ (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08005d1c 	.word	0x08005d1c

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c48:	4b69      	ldr	r3, [pc, #420]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a68      	ldr	r2, [pc, #416]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c52:	6093      	str	r3, [r2, #8]
 8003c54:	4b66      	ldr	r3, [pc, #408]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5c:	4964      	ldr	r1, [pc, #400]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d017      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c88:	4959      	ldr	r1, [pc, #356]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d017      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb6:	4b4e      	ldr	r3, [pc, #312]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	494a      	ldr	r1, [pc, #296]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 808b 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	4b3a      	ldr	r3, [pc, #232]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	4a39      	ldr	r2, [pc, #228]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d10:	4b37      	ldr	r3, [pc, #220]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d1c:	4b35      	ldr	r3, [pc, #212]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d28:	f7fe fb1a 	bl	8002360 <HAL_GetTick>
 8003d2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fe fb16 	bl	8002360 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e38f      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d42:	4b2c      	ldr	r3, [pc, #176]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4e:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d035      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d02e      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6c:	4b20      	ldr	r3, [pc, #128]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d82:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d8e:	4a18      	ldr	r2, [pc, #96]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d94:	4b16      	ldr	r3, [pc, #88]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d114      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fade 	bl	8002360 <HAL_GetTick>
 8003da4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fe fada 	bl	8002360 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e351      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ee      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd6:	d111      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003de6:	400b      	ands	r3, r1
 8003de8:	4901      	ldr	r1, [pc, #4]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
 8003dee:	e00b      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000
 8003df8:	0ffffcff 	.word	0x0ffffcff
 8003dfc:	4bac      	ldr	r3, [pc, #688]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4aab      	ldr	r2, [pc, #684]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e06:	6093      	str	r3, [r2, #8]
 8003e08:	4ba9      	ldr	r3, [pc, #676]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e14:	49a6      	ldr	r1, [pc, #664]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e26:	4ba2      	ldr	r3, [pc, #648]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e2c:	4aa0      	ldr	r2, [pc, #640]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e36:	4b9e      	ldr	r3, [pc, #632]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	499b      	ldr	r1, [pc, #620]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e54:	4b96      	ldr	r3, [pc, #600]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e62:	4993      	ldr	r1, [pc, #588]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e76:	4b8e      	ldr	r3, [pc, #568]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e84:	498a      	ldr	r1, [pc, #552]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e98:	4b85      	ldr	r3, [pc, #532]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea6:	4982      	ldr	r1, [pc, #520]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eba:	4b7d      	ldr	r3, [pc, #500]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	4979      	ldr	r1, [pc, #484]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003edc:	4b74      	ldr	r3, [pc, #464]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	4971      	ldr	r1, [pc, #452]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003efe:	4b6c      	ldr	r3, [pc, #432]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f023 020c 	bic.w	r2, r3, #12
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0c:	4968      	ldr	r1, [pc, #416]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f20:	4b63      	ldr	r3, [pc, #396]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	4960      	ldr	r1, [pc, #384]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f42:	4b5b      	ldr	r3, [pc, #364]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f50:	4957      	ldr	r1, [pc, #348]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f64:	4b52      	ldr	r3, [pc, #328]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	494f      	ldr	r1, [pc, #316]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f86:	4b4a      	ldr	r3, [pc, #296]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	4946      	ldr	r1, [pc, #280]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fa8:	4b41      	ldr	r3, [pc, #260]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	493e      	ldr	r1, [pc, #248]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fca:	4b39      	ldr	r3, [pc, #228]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd8:	4935      	ldr	r1, [pc, #212]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fec:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ffa:	492d      	ldr	r1, [pc, #180]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800400e:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004014:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401c:	4924      	ldr	r1, [pc, #144]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800404e:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004054:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	4914      	ldr	r1, [pc, #80]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004070:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004080:	490b      	ldr	r1, [pc, #44]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a4:	4902      	ldr	r1, [pc, #8]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040c0:	4b8a      	ldr	r3, [pc, #552]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	4986      	ldr	r1, [pc, #536]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040e4:	4b81      	ldr	r3, [pc, #516]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040f4:	497d      	ldr	r1, [pc, #500]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d006      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80d6 	beq.w	80042bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004110:	4b76      	ldr	r3, [pc, #472]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a75      	ldr	r2, [pc, #468]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800411a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411c:	f7fe f920 	bl	8002360 <HAL_GetTick>
 8004120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004124:	f7fe f91c 	bl	8002360 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	@ 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e195      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004136:	4b6d      	ldr	r3, [pc, #436]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d021      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11d      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004156:	4b65      	ldr	r3, [pc, #404]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004164:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800416a:	0e1b      	lsrs	r3, r3, #24
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	019a      	lsls	r2, r3, #6
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	041b      	lsls	r3, r3, #16
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	061b      	lsls	r3, r3, #24
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	071b      	lsls	r3, r3, #28
 800418a:	4958      	ldr	r1, [pc, #352]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02e      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041bc:	d129      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041be:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041cc:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d2:	0f1b      	lsrs	r3, r3, #28
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	019a      	lsls	r2, r3, #6
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	061b      	lsls	r3, r3, #24
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	493e      	ldr	r1, [pc, #248]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041fa:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004200:	f023 021f 	bic.w	r2, r3, #31
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	3b01      	subs	r3, #1
 800420a:	4938      	ldr	r1, [pc, #224]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01d      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800421e:	4b33      	ldr	r3, [pc, #204]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800422c:	4b2f      	ldr	r3, [pc, #188]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004232:	0f1b      	lsrs	r3, r3, #28
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	019a      	lsls	r2, r3, #6
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	431a      	orrs	r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	071b      	lsls	r3, r3, #28
 8004252:	4926      	ldr	r1, [pc, #152]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	019a      	lsls	r2, r3, #6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	491a      	ldr	r1, [pc, #104]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800428a:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a17      	ldr	r2, [pc, #92]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004296:	f7fe f863 	bl	8002360 <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800429e:	f7fe f85f 	bl	8002360 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b64      	cmp	r3, #100	@ 0x64
 80042aa:	d901      	bls.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0d8      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042b0:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	f040 80ce 	bne.w	8004460 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a08      	ldr	r2, [pc, #32]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fe f846 	bl	8002360 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d6:	e00b      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042d8:	f7fe f842 	bl	8002360 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	@ 0x64
 80042e4:	d904      	bls.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0bb      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042f0:	4b5e      	ldr	r3, [pc, #376]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042fc:	d0ec      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800431a:	2b00      	cmp	r3, #0
 800431c:	d02e      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d12a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004326:	4b51      	ldr	r3, [pc, #324]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004334:	4b4d      	ldr	r3, [pc, #308]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	0f1b      	lsrs	r3, r3, #28
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	019a      	lsls	r2, r3, #6
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	071b      	lsls	r3, r3, #28
 800435a:	4944      	ldr	r1, [pc, #272]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004362:	4b42      	ldr	r3, [pc, #264]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004368:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	493d      	ldr	r1, [pc, #244]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d022      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004390:	d11d      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004392:	4b36      	ldr	r3, [pc, #216]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004398:	0e1b      	lsrs	r3, r3, #24
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043a0:	4b32      	ldr	r3, [pc, #200]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	0f1b      	lsrs	r3, r3, #28
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	019a      	lsls	r2, r3, #6
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	431a      	orrs	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	4929      	ldr	r1, [pc, #164]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d028      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043da:	4b24      	ldr	r3, [pc, #144]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043e8:	4b20      	ldr	r3, [pc, #128]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	071b      	lsls	r3, r3, #28
 800440e:	4917      	ldr	r1, [pc, #92]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004416:	4b15      	ldr	r3, [pc, #84]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800441c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	4911      	ldr	r1, [pc, #68]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800442c:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0e      	ldr	r2, [pc, #56]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd ff92 	bl	8002360 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004440:	f7fd ff8e 	bl	8002360 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e007      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800445a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800445e:	d1ef      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e09d      	b.n	80045be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004492:	d009      	beq.n	80044a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	61da      	str	r2, [r3, #28]
 800449a:	e005      	b.n	80044a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fd08 	bl	8000ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044e8:	d902      	bls.n	80044f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e002      	b.n	80044f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044fe:	d007      	beq.n	8004510 <HAL_SPI_Init+0xa0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004508:	d002      	beq.n	8004510 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004552:	ea42 0103 	orr.w	r1, r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	0c1b      	lsrs	r3, r3, #16
 800456c:	f003 0204 	and.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800458c:	ea42 0103 	orr.w	r1, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b088      	sub	sp, #32
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_SPI_Transmit+0x22>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e158      	b.n	800489a <HAL_SPI_Transmit+0x2d4>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045f0:	f7fd feb6 	bl	8002360 <HAL_GetTick>
 80045f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	d002      	beq.n	800460c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
    goto error;
 800460a:	e13d      	b.n	8004888 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_Transmit+0x52>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800461c:	e134      	b.n	8004888 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004668:	d10f      	bne.n	800468a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004688:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d007      	beq.n	80046a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b0:	d94b      	bls.n	800474a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_Transmit+0xfa>
 80046ba:	8afb      	ldrh	r3, [r7, #22]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d13e      	bne.n	800473e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046e4:	e02b      	b.n	800473e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d112      	bne.n	800471a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	881a      	ldrh	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004718:	e011      	b.n	800473e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471a:	f7fd fe21 	bl	8002360 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d803      	bhi.n	8004732 <HAL_SPI_Transmit+0x16c>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d102      	bne.n	8004738 <HAL_SPI_Transmit+0x172>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800473c:	e0a4      	b.n	8004888 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ce      	bne.n	80046e6 <HAL_SPI_Transmit+0x120>
 8004748:	e07c      	b.n	8004844 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Transmit+0x192>
 8004752:	8afb      	ldrh	r3, [r7, #22]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d170      	bne.n	800483a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d912      	bls.n	8004788 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	1c9a      	adds	r2, r3, #2
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b02      	subs	r3, #2
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004786:	e058      	b.n	800483a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	7812      	ldrb	r2, [r2, #0]
 8004794:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047ae:	e044      	b.n	800483a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d12b      	bne.n	8004816 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d912      	bls.n	80047ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b02      	subs	r3, #2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ec:	e025      	b.n	800483a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	7812      	ldrb	r2, [r2, #0]
 80047fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004814:	e011      	b.n	800483a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004816:	f7fd fda3 	bl	8002360 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d803      	bhi.n	800482e <HAL_SPI_Transmit+0x268>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d102      	bne.n	8004834 <HAL_SPI_Transmit+0x26e>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004838:	e026      	b.n	8004888 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1b5      	bne.n	80047b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f949 	bl	8004ae0 <SPI_EndRxTxTransaction>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e000      	b.n	8004888 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004898:	7ffb      	ldrb	r3, [r7, #31]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048b4:	f7fd fd54 	bl	8002360 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	4413      	add	r3, r2
 80048c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048c4:	f7fd fd4c 	bl	8002360 <HAL_GetTick>
 80048c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048ca:	4b39      	ldr	r3, [pc, #228]	@ (80049b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	015b      	lsls	r3, r3, #5
 80048d0:	0d1b      	lsrs	r3, r3, #20
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048da:	e054      	b.n	8004986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d050      	beq.n	8004986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048e4:	f7fd fd3c 	bl	8002360 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d902      	bls.n	80048fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d13d      	bne.n	8004976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004912:	d111      	bne.n	8004938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491c:	d004      	beq.n	8004928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004926:	d107      	bne.n	8004938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004940:	d10f      	bne.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e017      	b.n	80049a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	3b01      	subs	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d19b      	bne.n	80048dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000

080049b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	@ 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049c6:	f7fd fccb 	bl	8002360 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	4413      	add	r3, r2
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80049d6:	f7fd fcc3 	bl	8002360 <HAL_GetTick>
 80049da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049e4:	4b3d      	ldr	r3, [pc, #244]	@ (8004adc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	00da      	lsls	r2, r3, #3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	0d1b      	lsrs	r3, r3, #20
 80049f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049fc:	e060      	b.n	8004ac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a04:	d107      	bne.n	8004a16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d050      	beq.n	8004ac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a1e:	f7fd fc9f 	bl	8002360 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d902      	bls.n	8004a34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d13d      	bne.n	8004ab0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4c:	d111      	bne.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a56:	d004      	beq.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a60:	d107      	bne.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a7a:	d10f      	bne.n	8004a9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e010      	b.n	8004ad2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d196      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3728      	adds	r7, #40	@ 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000000 	.word	0x20000000

08004ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff ff5b 	bl	80049b4 <SPI_WaitFifoStateUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e046      	b.n	8004ba2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b14:	4b25      	ldr	r3, [pc, #148]	@ (8004bac <SPI_EndRxTxTransaction+0xcc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a25      	ldr	r2, [pc, #148]	@ (8004bb0 <SPI_EndRxTxTransaction+0xd0>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0d5b      	lsrs	r3, r3, #21
 8004b20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b32:	d112      	bne.n	8004b5a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2180      	movs	r1, #128	@ 0x80
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff feb0 	bl	80048a4 <SPI_WaitFlagStateUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e023      	b.n	8004ba2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b80      	cmp	r3, #128	@ 0x80
 8004b72:	d0f2      	beq.n	8004b5a <SPI_EndRxTxTransaction+0x7a>
 8004b74:	e000      	b.n	8004b78 <SPI_EndRxTxTransaction+0x98>
        break;
 8004b76:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ff15 	bl	80049b4 <SPI_WaitFifoStateUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e000      	b.n	8004ba2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	165e9f81 	.word	0x165e9f81

08004bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e040      	b.n	8004c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc f9e0 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	@ 0x24
 8004be0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f82c 	bl	8004c50 <UART_SetConfig>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e022      	b.n	8004c48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa84 	bl	8005118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fb0b 	bl	800525c <UART_CheckIdleState>
 8004c46:	4603      	mov	r3, r0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4ba6      	ldr	r3, [pc, #664]	@ (8004f14 <UART_SetConfig+0x2c4>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a94      	ldr	r2, [pc, #592]	@ (8004f18 <UART_SetConfig+0x2c8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d120      	bne.n	8004d0e <UART_SetConfig+0xbe>
 8004ccc:	4b93      	ldr	r3, [pc, #588]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d816      	bhi.n	8004d08 <UART_SetConfig+0xb8>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <UART_SetConfig+0x90>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004cf7 	.word	0x08004cf7
 8004cec:	08004d03 	.word	0x08004d03
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e150      	b.n	8004f98 <UART_SetConfig+0x348>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e14d      	b.n	8004f98 <UART_SetConfig+0x348>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e14a      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d02:	2308      	movs	r3, #8
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e147      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e144      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a83      	ldr	r2, [pc, #524]	@ (8004f20 <UART_SetConfig+0x2d0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d132      	bne.n	8004d7e <UART_SetConfig+0x12e>
 8004d18:	4b80      	ldr	r3, [pc, #512]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d828      	bhi.n	8004d78 <UART_SetConfig+0x128>
 8004d26:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <UART_SetConfig+0xdc>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d6d 	.word	0x08004d6d
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d79 	.word	0x08004d79
 8004d4c:	08004d67 	.word	0x08004d67
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d79 	.word	0x08004d79
 8004d5c:	08004d73 	.word	0x08004d73
 8004d60:	2300      	movs	r3, #0
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e118      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d66:	2302      	movs	r3, #2
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e115      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e112      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d72:	2308      	movs	r3, #8
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e10f      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e10c      	b.n	8004f98 <UART_SetConfig+0x348>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a68      	ldr	r2, [pc, #416]	@ (8004f24 <UART_SetConfig+0x2d4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d120      	bne.n	8004dca <UART_SetConfig+0x17a>
 8004d88:	4b64      	ldr	r3, [pc, #400]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d92:	2b30      	cmp	r3, #48	@ 0x30
 8004d94:	d013      	beq.n	8004dbe <UART_SetConfig+0x16e>
 8004d96:	2b30      	cmp	r3, #48	@ 0x30
 8004d98:	d814      	bhi.n	8004dc4 <UART_SetConfig+0x174>
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d009      	beq.n	8004db2 <UART_SetConfig+0x162>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d810      	bhi.n	8004dc4 <UART_SetConfig+0x174>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <UART_SetConfig+0x15c>
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d006      	beq.n	8004db8 <UART_SetConfig+0x168>
 8004daa:	e00b      	b.n	8004dc4 <UART_SetConfig+0x174>
 8004dac:	2300      	movs	r3, #0
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e0f2      	b.n	8004f98 <UART_SetConfig+0x348>
 8004db2:	2302      	movs	r3, #2
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e0ef      	b.n	8004f98 <UART_SetConfig+0x348>
 8004db8:	2304      	movs	r3, #4
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e0ec      	b.n	8004f98 <UART_SetConfig+0x348>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e0e9      	b.n	8004f98 <UART_SetConfig+0x348>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e0e6      	b.n	8004f98 <UART_SetConfig+0x348>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a56      	ldr	r2, [pc, #344]	@ (8004f28 <UART_SetConfig+0x2d8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d120      	bne.n	8004e16 <UART_SetConfig+0x1c6>
 8004dd4:	4b51      	ldr	r3, [pc, #324]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004de0:	d013      	beq.n	8004e0a <UART_SetConfig+0x1ba>
 8004de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004de4:	d814      	bhi.n	8004e10 <UART_SetConfig+0x1c0>
 8004de6:	2b80      	cmp	r3, #128	@ 0x80
 8004de8:	d009      	beq.n	8004dfe <UART_SetConfig+0x1ae>
 8004dea:	2b80      	cmp	r3, #128	@ 0x80
 8004dec:	d810      	bhi.n	8004e10 <UART_SetConfig+0x1c0>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <UART_SetConfig+0x1a8>
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d006      	beq.n	8004e04 <UART_SetConfig+0x1b4>
 8004df6:	e00b      	b.n	8004e10 <UART_SetConfig+0x1c0>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e0cc      	b.n	8004f98 <UART_SetConfig+0x348>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e0c9      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e04:	2304      	movs	r3, #4
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e0c6      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e0c3      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e10:	2310      	movs	r3, #16
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e0c0      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a44      	ldr	r2, [pc, #272]	@ (8004f2c <UART_SetConfig+0x2dc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d125      	bne.n	8004e6c <UART_SetConfig+0x21c>
 8004e20:	4b3e      	ldr	r3, [pc, #248]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2e:	d017      	beq.n	8004e60 <UART_SetConfig+0x210>
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e34:	d817      	bhi.n	8004e66 <UART_SetConfig+0x216>
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3a:	d00b      	beq.n	8004e54 <UART_SetConfig+0x204>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d811      	bhi.n	8004e66 <UART_SetConfig+0x216>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <UART_SetConfig+0x1fe>
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e4a:	d006      	beq.n	8004e5a <UART_SetConfig+0x20a>
 8004e4c:	e00b      	b.n	8004e66 <UART_SetConfig+0x216>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e0a1      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e54:	2302      	movs	r3, #2
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e09e      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e09b      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e60:	2308      	movs	r3, #8
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e098      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e66:	2310      	movs	r3, #16
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e095      	b.n	8004f98 <UART_SetConfig+0x348>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <UART_SetConfig+0x2e0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d125      	bne.n	8004ec2 <UART_SetConfig+0x272>
 8004e76:	4b29      	ldr	r3, [pc, #164]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e84:	d017      	beq.n	8004eb6 <UART_SetConfig+0x266>
 8004e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e8a:	d817      	bhi.n	8004ebc <UART_SetConfig+0x26c>
 8004e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e90:	d00b      	beq.n	8004eaa <UART_SetConfig+0x25a>
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e96:	d811      	bhi.n	8004ebc <UART_SetConfig+0x26c>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <UART_SetConfig+0x254>
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea0:	d006      	beq.n	8004eb0 <UART_SetConfig+0x260>
 8004ea2:	e00b      	b.n	8004ebc <UART_SetConfig+0x26c>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e076      	b.n	8004f98 <UART_SetConfig+0x348>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e073      	b.n	8004f98 <UART_SetConfig+0x348>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e070      	b.n	8004f98 <UART_SetConfig+0x348>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e06d      	b.n	8004f98 <UART_SetConfig+0x348>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e06a      	b.n	8004f98 <UART_SetConfig+0x348>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f34 <UART_SetConfig+0x2e4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d138      	bne.n	8004f3e <UART_SetConfig+0x2ee>
 8004ecc:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <UART_SetConfig+0x2cc>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ed6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eda:	d017      	beq.n	8004f0c <UART_SetConfig+0x2bc>
 8004edc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ee0:	d82a      	bhi.n	8004f38 <UART_SetConfig+0x2e8>
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee6:	d00b      	beq.n	8004f00 <UART_SetConfig+0x2b0>
 8004ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eec:	d824      	bhi.n	8004f38 <UART_SetConfig+0x2e8>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <UART_SetConfig+0x2aa>
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef6:	d006      	beq.n	8004f06 <UART_SetConfig+0x2b6>
 8004ef8:	e01e      	b.n	8004f38 <UART_SetConfig+0x2e8>
 8004efa:	2300      	movs	r3, #0
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e04b      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f00:	2302      	movs	r3, #2
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e048      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f06:	2304      	movs	r3, #4
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e045      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e042      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f12:	bf00      	nop
 8004f14:	efff69f3 	.word	0xefff69f3
 8004f18:	40011000 	.word	0x40011000
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40004400 	.word	0x40004400
 8004f24:	40004800 	.word	0x40004800
 8004f28:	40004c00 	.word	0x40004c00
 8004f2c:	40005000 	.word	0x40005000
 8004f30:	40011400 	.word	0x40011400
 8004f34:	40007800 	.word	0x40007800
 8004f38:	2310      	movs	r3, #16
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e02c      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a72      	ldr	r2, [pc, #456]	@ (800510c <UART_SetConfig+0x4bc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d125      	bne.n	8004f94 <UART_SetConfig+0x344>
 8004f48:	4b71      	ldr	r3, [pc, #452]	@ (8005110 <UART_SetConfig+0x4c0>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f52:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f56:	d017      	beq.n	8004f88 <UART_SetConfig+0x338>
 8004f58:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f5c:	d817      	bhi.n	8004f8e <UART_SetConfig+0x33e>
 8004f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f62:	d00b      	beq.n	8004f7c <UART_SetConfig+0x32c>
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f68:	d811      	bhi.n	8004f8e <UART_SetConfig+0x33e>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <UART_SetConfig+0x326>
 8004f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f72:	d006      	beq.n	8004f82 <UART_SetConfig+0x332>
 8004f74:	e00b      	b.n	8004f8e <UART_SetConfig+0x33e>
 8004f76:	2300      	movs	r3, #0
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e00d      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e00a      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f82:	2304      	movs	r3, #4
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e007      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e004      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f8e:	2310      	movs	r3, #16
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e001      	b.n	8004f98 <UART_SetConfig+0x348>
 8004f94:	2310      	movs	r3, #16
 8004f96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa0:	d15b      	bne.n	800505a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fa2:	7ffb      	ldrb	r3, [r7, #31]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d828      	bhi.n	8004ffa <UART_SetConfig+0x3aa>
 8004fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <UART_SetConfig+0x360>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fdfc 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61b8      	str	r0, [r7, #24]
        break;
 8004fda:	e013      	b.n	8005004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fe0c 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61b8      	str	r0, [r7, #24]
        break;
 8004fe2:	e00f      	b.n	8005004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8005114 <UART_SetConfig+0x4c4>)
 8004fe6:	61bb      	str	r3, [r7, #24]
        break;
 8004fe8:	e00c      	b.n	8005004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe fcdf 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8004fee:	61b8      	str	r0, [r7, #24]
        break;
 8004ff0:	e008      	b.n	8005004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff6:	61bb      	str	r3, [r7, #24]
        break;
 8004ff8:	e004      	b.n	8005004 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77bb      	strb	r3, [r7, #30]
        break;
 8005002:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d074      	beq.n	80050f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	005a      	lsls	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b0f      	cmp	r3, #15
 8005024:	d916      	bls.n	8005054 <UART_SetConfig+0x404>
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800502c:	d212      	bcs.n	8005054 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f023 030f 	bic.w	r3, r3, #15
 8005036:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	b29b      	uxth	r3, r3
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	b29a      	uxth	r2, r3
 8005044:	89fb      	ldrh	r3, [r7, #14]
 8005046:	4313      	orrs	r3, r2
 8005048:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	89fa      	ldrh	r2, [r7, #14]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e04f      	b.n	80050f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	77bb      	strb	r3, [r7, #30]
 8005058:	e04c      	b.n	80050f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800505a:	7ffb      	ldrb	r3, [r7, #31]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d828      	bhi.n	80050b2 <UART_SetConfig+0x462>
 8005060:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <UART_SetConfig+0x418>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	080050b3 	.word	0x080050b3
 8005078:	080050a3 	.word	0x080050a3
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe fda0 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8005090:	61b8      	str	r0, [r7, #24]
        break;
 8005092:	e013      	b.n	80050bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fe fdb0 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8005098:	61b8      	str	r0, [r7, #24]
        break;
 800509a:	e00f      	b.n	80050bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <UART_SetConfig+0x4c4>)
 800509e:	61bb      	str	r3, [r7, #24]
        break;
 80050a0:	e00c      	b.n	80050bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7fe fc83 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 80050a6:	61b8      	str	r0, [r7, #24]
        break;
 80050a8:	e008      	b.n	80050bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ae:	61bb      	str	r3, [r7, #24]
        break;
 80050b0:	e004      	b.n	80050bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	77bb      	strb	r3, [r7, #30]
        break;
 80050ba:	bf00      	nop
    }

    if (pclk != 0U)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	085a      	lsrs	r2, r3, #1
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	441a      	add	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b0f      	cmp	r3, #15
 80050da:	d909      	bls.n	80050f0 <UART_SetConfig+0x4a0>
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e2:	d205      	bcs.n	80050f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	e001      	b.n	80050f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005100:	7fbb      	ldrb	r3, [r7, #30]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40007c00 	.word	0x40007c00
 8005110:	40023800 	.word	0x40023800
 8005114:	00f42400 	.word	0x00f42400

08005118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01a      	beq.n	800522e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005216:	d10a      	bne.n	800522e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800526c:	f7fd f878 	bl	8002360 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d10e      	bne.n	800529e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005280:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f831 	bl	80052f6 <UART_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e027      	b.n	80052ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d10e      	bne.n	80052ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f81b 	bl	80052f6 <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e011      	b.n	80052ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b09c      	sub	sp, #112	@ 0x70
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005306:	e0a7      	b.n	8005458 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	f000 80a3 	beq.w	8005458 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fd f825 	bl	8002360 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <UART_WaitOnFlagUntilTimeout+0x32>
 8005322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005324:	2b00      	cmp	r3, #0
 8005326:	d13f      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005338:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800533c:	667b      	str	r3, [r7, #100]	@ 0x64
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005348:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800534c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	663b      	str	r3, [r7, #96]	@ 0x60
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800537a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800537c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e068      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d050      	beq.n	8005458 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c4:	d148      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80053e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e6      	bne.n	80053d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	613b      	str	r3, [r7, #16]
   return(result);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005422:	623a      	str	r2, [r7, #32]
 8005424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e010      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	f43f af48 	beq.w	8005308 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3770      	adds	r7, #112	@ 0x70
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005484:	b084      	sub	sp, #16
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	f107 001c 	add.w	r0, r7, #28
 8005492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2b01      	cmp	r3, #1
 800549a:	d120      	bne.n	80054de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <USB_CoreInit+0xac>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa96 	bl	8005a04 <USB_CoreReset>
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	e010      	b.n	8005500 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa8a 	bl	8005a04 <USB_CoreReset>
 80054f0:	4603      	mov	r3, r0
 80054f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10b      	bne.n	800551e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f043 0206 	orr.w	r2, r3, #6
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552a:	b004      	add	sp, #16
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	ffbdffbf 	.word	0xffbdffbf

08005534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f023 0201 	bic.w	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d115      	bne.n	80055a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005584:	2001      	movs	r0, #1
 8005586:	f7fc fef7 	bl	8002378 <HAL_Delay>
      ms++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa29 	bl	80059e8 <USB_GetMode>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d01e      	beq.n	80055da <USB_SetCurrentMode+0x84>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b31      	cmp	r3, #49	@ 0x31
 80055a0:	d9f0      	bls.n	8005584 <USB_SetCurrentMode+0x2e>
 80055a2:	e01a      	b.n	80055da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d115      	bne.n	80055d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055b6:	2001      	movs	r0, #1
 80055b8:	f7fc fede 	bl	8002378 <HAL_Delay>
      ms++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa10 	bl	80059e8 <USB_GetMode>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <USB_SetCurrentMode+0x84>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b31      	cmp	r3, #49	@ 0x31
 80055d2:	d9f0      	bls.n	80055b6 <USB_SetCurrentMode+0x60>
 80055d4:	e001      	b.n	80055da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e005      	b.n	80055e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b32      	cmp	r3, #50	@ 0x32
 80055de:	d101      	bne.n	80055e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f0:	b084      	sub	sp, #16
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80055fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e009      	b.n	8005624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3340      	adds	r3, #64	@ 0x40
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	2200      	movs	r2, #0
 800561c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3301      	adds	r3, #1
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b0e      	cmp	r3, #14
 8005628:	d9f2      	bls.n	8005610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800562a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11c      	bne.n	800566a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800563e:	f043 0302 	orr.w	r3, r3, #2
 8005642:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e005      	b.n	8005676 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	4619      	mov	r1, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005690:	461a      	mov	r2, r3
 8005692:	680b      	ldr	r3, [r1, #0]
 8005694:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10c      	bne.n	80056b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056a2:	2100      	movs	r1, #0
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f965 	bl	8005974 <USB_SetDevSpeed>
 80056aa:	e008      	b.n	80056be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056ac:	2101      	movs	r1, #1
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f960 	bl	8005974 <USB_SetDevSpeed>
 80056b4:	e003      	b.n	80056be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056b6:	2103      	movs	r1, #3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f95b 	bl	8005974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056be:	2110      	movs	r1, #16
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8f3 	bl	80058ac <USB_FlushTxFifo>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f91f 	bl	8005914 <USB_FlushRxFifo>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	461a      	mov	r2, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e043      	b.n	8005792 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800571c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005720:	d118      	bne.n	8005754 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005734:	461a      	mov	r2, r3
 8005736:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	e013      	b.n	8005766 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574a:	461a      	mov	r2, r3
 800574c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e008      	b.n	8005766 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005772:	461a      	mov	r2, r3
 8005774:	2300      	movs	r3, #0
 8005776:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800578a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3301      	adds	r3, #1
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3b7      	bcc.n	800570a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e043      	b.n	8005828 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b6:	d118      	bne.n	80057ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	461a      	mov	r2, r3
 80057cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e013      	b.n	80057fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e008      	b.n	80057fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f6:	461a      	mov	r2, r3
 80057f8:	2300      	movs	r3, #0
 80057fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005808:	461a      	mov	r2, r3
 800580a:	2300      	movs	r3, #0
 800580c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	461a      	mov	r2, r3
 800581c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005820:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	3301      	adds	r3, #1
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	429a      	cmp	r2, r3
 800582e:	d3b7      	bcc.n	80057a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800583e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005842:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005850:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f043 0210 	orr.w	r2, r3, #16
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <USB_DevInit+0x2b4>)
 800586a:	4313      	orrs	r3, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f043 0208 	orr.w	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d105      	bne.n	8005894 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <USB_DevInit+0x2b8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a0:	b004      	add	sp, #16
 80058a2:	4770      	bx	lr
 80058a4:	803c3800 	.word	0x803c3800
 80058a8:	40000004 	.word	0x40000004

080058ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <USB_FlushTxFifo+0x64>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01b      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	daf2      	bge.n	80058ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <USB_FlushTxFifo+0x64>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e006      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d0f0      	beq.n	80058e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	00030d40 	.word	0x00030d40

08005914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a11      	ldr	r2, [pc, #68]	@ (8005970 <USB_FlushRxFifo+0x5c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e018      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	daf2      	bge.n	8005920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2210      	movs	r2, #16
 8005942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a08      	ldr	r2, [pc, #32]	@ (8005970 <USB_FlushRxFifo+0x5c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e006      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d0f0      	beq.n	8005944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	00030d40 	.word	0x00030d40

08005974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80059c0:	f023 0303 	bic.w	r3, r3, #3
 80059c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0301 	and.w	r3, r3, #1
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4a13      	ldr	r2, [pc, #76]	@ (8005a68 <USB_CoreReset+0x64>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e01b      	b.n	8005a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	daf2      	bge.n	8005a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a09      	ldr	r2, [pc, #36]	@ (8005a68 <USB_CoreReset+0x64>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e006      	b.n	8005a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d0f0      	beq.n	8005a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	00030d40 	.word	0x00030d40

08005a6c <memset>:
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d100      	bne.n	8005a76 <memset+0xa>
 8005a74:	4770      	bx	lr
 8005a76:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7a:	e7f9      	b.n	8005a70 <memset+0x4>

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f000 f818 	bl	8005ac4 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	08005d9c 	.word	0x08005d9c
 8005ab8:	08005d9c 	.word	0x08005d9c
 8005abc:	08005d9c 	.word	0x08005d9c
 8005ac0:	08005da0 	.word	0x08005da0

08005ac4 <_init>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

08005ad0 <_fini>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr
