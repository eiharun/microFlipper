
ESP_WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080049d0  080049d0  000059d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c1c  08004c1c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c24  08004c24  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00005c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c28  08004c28  00005c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c2c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  2000005c  08004c88  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  08004c88  00006430  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4c9  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0b  00000000  00000000  00012553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00014460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067f  00000000  00000000  00014cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027025  00000000  00000000  00015357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c294  00000000  00000000  0003c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f10e7  00000000  00000000  00048610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001396f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  0013973c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0013bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	080049b8 	.word	0x080049b8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	080049b8 	.word	0x080049b8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <AT_queryWIFImode>:
		return AT_ERR;
	}
	return AT_ERR;
}
//----------WIFI----------//
ATStatus AT_queryWIFImode(UART_HandleTypeDef* huart4, WifiMode* mode){
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	if(txCplt==false){
 8000542:	4b63      	ldr	r3, [pc, #396]	@ (80006d0 <AT_queryWIFImode+0x198>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d020      	beq.n	8000592 <AT_queryWIFImode+0x5a>
		HAL_UART_Transmit_IT(huart4, (uint8_t*)"AT+CWMODE?\r\n", 12);
 8000550:	220c      	movs	r2, #12
 8000552:	4960      	ldr	r1, [pc, #384]	@ (80006d4 <AT_queryWIFImode+0x19c>)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f002 fe49 	bl	80031ec <HAL_UART_Transmit_IT>
	}
	while(!rxCplt){
 800055a:	e01a      	b.n	8000592 <AT_queryWIFImode+0x5a>
		//wait until rx is CPLT
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000562:	485d      	ldr	r0, [pc, #372]	@ (80006d8 <AT_queryWIFImode+0x1a0>)
 8000564:	f001 fd1e 	bl	8001fa4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fdb3 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000574:	4858      	ldr	r0, [pc, #352]	@ (80006d8 <AT_queryWIFImode+0x1a0>)
 8000576:	f001 fd15 	bl	8001fa4 <HAL_GPIO_WritePin>
		//Have a timeout(there is something wrong if this while loop runs more than 10 times)
		if(waitTMout>10){
 800057a:	4b58      	ldr	r3, [pc, #352]	@ (80006dc <AT_queryWIFImode+0x1a4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d901      	bls.n	8000586 <AT_queryWIFImode+0x4e>
			return AT_TMOUT;
 8000582:	2303      	movs	r3, #3
 8000584:	e0a0      	b.n	80006c8 <AT_queryWIFImode+0x190>
		}
		waitTMout++;
 8000586:	4b55      	ldr	r3, [pc, #340]	@ (80006dc <AT_queryWIFImode+0x1a4>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b53      	ldr	r3, [pc, #332]	@ (80006dc <AT_queryWIFImode+0x1a4>)
 8000590:	701a      	strb	r2, [r3, #0]
	while(!rxCplt){
 8000592:	4b53      	ldr	r3, [pc, #332]	@ (80006e0 <AT_queryWIFImode+0x1a8>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	f083 0301 	eor.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1dd      	bne.n	800055c <AT_queryWIFImode+0x24>
	}
	waitTMout=0;
 80005a0:	4b4e      	ldr	r3, [pc, #312]	@ (80006dc <AT_queryWIFImode+0x1a4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	if(rxCplt && txCplt){
 80005a6:	4b4e      	ldr	r3, [pc, #312]	@ (80006e0 <AT_queryWIFImode+0x1a8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 8082 	beq.w	80006b4 <AT_queryWIFImode+0x17c>
 80005b0:	4b47      	ldr	r3, [pc, #284]	@ (80006d0 <AT_queryWIFImode+0x198>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d07d      	beq.n	80006b4 <AT_queryWIFImode+0x17c>
		rxCplt=false;
 80005b8:	4b49      	ldr	r3, [pc, #292]	@ (80006e0 <AT_queryWIFImode+0x1a8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
		txCplt=false;
 80005be:	4b44      	ldr	r3, [pc, #272]	@ (80006d0 <AT_queryWIFImode+0x198>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
		memset(recv,'\0',strlen(recv));
 80005c4:	4b47      	ldr	r3, [pc, #284]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 80005c6:	681c      	ldr	r4, [r3, #0]
 80005c8:	4b46      	ldr	r3, [pc, #280]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fe33 	bl	8000238 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	4620      	mov	r0, r4
 80005da:	f004 f983 	bl	80048e4 <memset>
		if(data_head>data_tail){//handle wrap around condition
 80005de:	4b42      	ldr	r3, [pc, #264]	@ (80006e8 <AT_queryWIFImode+0x1b0>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <AT_queryWIFImode+0x1b4>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d91a      	bls.n	8000620 <AT_queryWIFImode+0xe8>
			uint16_t size_leftover = DATASIZE-data_head;
 80005ea:	4b3f      	ldr	r3, [pc, #252]	@ (80006e8 <AT_queryWIFImode+0x1b0>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80005f2:	82fb      	strh	r3, [r7, #22]
			memcpy((uint8_t*)recv, (uint8_t*)Data_Buffer+data_head, size_leftover);
 80005f4:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a3b      	ldr	r2, [pc, #236]	@ (80006e8 <AT_queryWIFImode+0x1b0>)
 80005fa:	8812      	ldrh	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a3c      	ldr	r2, [pc, #240]	@ (80006f0 <AT_queryWIFImode+0x1b8>)
 8000600:	4411      	add	r1, r2
 8000602:	8afa      	ldrh	r2, [r7, #22]
 8000604:	4618      	mov	r0, r3
 8000606:	f004 f9c9 	bl	800499c <memcpy>

			memcpy((uint8_t*)recv+size_leftover, (uint8_t*)Data_Buffer, data_tail);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	8afb      	ldrh	r3, [r7, #22]
 8000610:	4413      	add	r3, r2
 8000612:	4a36      	ldr	r2, [pc, #216]	@ (80006ec <AT_queryWIFImode+0x1b4>)
 8000614:	8812      	ldrh	r2, [r2, #0]
 8000616:	4936      	ldr	r1, [pc, #216]	@ (80006f0 <AT_queryWIFImode+0x1b8>)
 8000618:	4618      	mov	r0, r3
 800061a:	f004 f9bf 	bl	800499c <memcpy>
 800061e:	e00f      	b.n	8000640 <AT_queryWIFImode+0x108>
		}
		else{
			memcpy((uint8_t*)recv, (uint8_t*)Data_Buffer+data_head, data_tail-data_head);
 8000620:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	@ (80006e8 <AT_queryWIFImode+0x1b0>)
 8000626:	8812      	ldrh	r2, [r2, #0]
 8000628:	4611      	mov	r1, r2
 800062a:	4a31      	ldr	r2, [pc, #196]	@ (80006f0 <AT_queryWIFImode+0x1b8>)
 800062c:	4411      	add	r1, r2
 800062e:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <AT_queryWIFImode+0x1b4>)
 8000630:	8812      	ldrh	r2, [r2, #0]
 8000632:	4610      	mov	r0, r2
 8000634:	4a2c      	ldr	r2, [pc, #176]	@ (80006e8 <AT_queryWIFImode+0x1b0>)
 8000636:	8812      	ldrh	r2, [r2, #0]
 8000638:	1a82      	subs	r2, r0, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f9ae 	bl	800499c <memcpy>
		}

		if(strstr(recv, "\r\nOK\r\n")!=NULL){
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	492b      	ldr	r1, [pc, #172]	@ (80006f4 <AT_queryWIFImode+0x1bc>)
 8000646:	4618      	mov	r0, r3
 8000648:	f004 f967 	bl	800491a <strstr>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d025      	beq.n	800069e <AT_queryWIFImode+0x166>
			char* start = strstr(recv,"+CWMODE:");
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4928      	ldr	r1, [pc, #160]	@ (80006f8 <AT_queryWIFImode+0x1c0>)
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f95e 	bl	800491a <strstr>
 800065e:	6138      	str	r0, [r7, #16]
			char* curMode=(char*)'4';
 8000660:	2334      	movs	r3, #52	@ 0x34
 8000662:	60fb      	str	r3, [r7, #12]
			strncpy(curMode, start+strlen("+CWMODE:"),1);
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	3308      	adds	r3, #8
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f004 f941 	bl	80048f4 <strncpy>
			*mode = (WifiMode)atoi(curMode);
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f004 f8ad 	bl	80047d2 <atoi>
 8000678:	4603      	mov	r3, r0
 800067a:	b2da      	uxtb	r2, r3
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	701a      	strb	r2, [r3, #0]
			memset(recv,'\0',strlen(recv));
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdd5 	bl	8000238 <strlen>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	4620      	mov	r0, r4
 8000696:	f004 f925 	bl	80048e4 <memset>
			return AT_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e014      	b.n	80006c8 <AT_queryWIFImode+0x190>
		}
		else if(strstr(recv,"\r\nERROR\r\n")!=NULL){
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <AT_queryWIFImode+0x1ac>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4916      	ldr	r1, [pc, #88]	@ (80006fc <AT_queryWIFImode+0x1c4>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f938 	bl	800491a <strstr>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <AT_queryWIFImode+0x180>
			return AT_ERR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e009      	b.n	80006c8 <AT_queryWIFImode+0x190>
		}
	}
	else{
		return AT_PEND;
 80006b4:	2302      	movs	r3, #2
 80006b6:	e007      	b.n	80006c8 <AT_queryWIFImode+0x190>
		if(strstr(recv, "\r\nOK\r\n")!=NULL){
 80006b8:	bf00      	nop
	}
	if(rxErr){
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <AT_queryWIFImode+0x1c8>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <AT_queryWIFImode+0x18e>
		return AT_ERR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <AT_queryWIFImode+0x190>
	}
	return AT_ERR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	371c      	adds	r7, #28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	2000117d 	.word	0x2000117d
 80006d4:	08004a20 	.word	0x08004a20
 80006d8:	40020400 	.word	0x40020400
 80006dc:	2000117f 	.word	0x2000117f
 80006e0:	2000117c 	.word	0x2000117c
 80006e4:	20001180 	.word	0x20001180
 80006e8:	20001178 	.word	0x20001178
 80006ec:	2000117a 	.word	0x2000117a
 80006f0:	20000178 	.word	0x20000178
 80006f4:	08004a18 	.word	0x08004a18
 80006f8:	08004a30 	.word	0x08004a30
 80006fc:	080049e4 	.word	0x080049e4
 8000700:	2000117e 	.word	0x2000117e

08000704 <AT_setWIFImode>:

ATStatus AT_setWIFImode(UART_HandleTypeDef* huart4, WifiMode mode){
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
	if(txCplt==false){
 8000710:	4b68      	ldr	r3, [pc, #416]	@ (80008b4 <AT_setWIFImode+0x1b0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f083 0301 	eor.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d043      	beq.n	80007a6 <AT_setWIFImode+0xa2>
		switch(mode){
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d840      	bhi.n	80007a6 <AT_setWIFImode+0xa2>
 8000724:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <AT_setWIFImode+0x28>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	08000749 	.word	0x08000749
 8000734:	08000755 	.word	0x08000755
 8000738:	08000761 	.word	0x08000761
		case Null:
			HAL_UART_Transmit_IT(huart4, (uint8_t*)"AT+CWMODE=0\r\n", 13);
 800073c:	220d      	movs	r2, #13
 800073e:	495e      	ldr	r1, [pc, #376]	@ (80008b8 <AT_setWIFImode+0x1b4>)
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f002 fd53 	bl	80031ec <HAL_UART_Transmit_IT>
			break;
 8000746:	e012      	b.n	800076e <AT_setWIFImode+0x6a>
		case STATION:
			HAL_UART_Transmit_IT(huart4, (uint8_t*)"AT+CWMODE=1\r\n", 13);
 8000748:	220d      	movs	r2, #13
 800074a:	495c      	ldr	r1, [pc, #368]	@ (80008bc <AT_setWIFImode+0x1b8>)
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f002 fd4d 	bl	80031ec <HAL_UART_Transmit_IT>
			break;
 8000752:	e00c      	b.n	800076e <AT_setWIFImode+0x6a>
		case AP:
			HAL_UART_Transmit_IT(huart4, (uint8_t*)"AT+CWMODE=2\r\n", 13);
 8000754:	220d      	movs	r2, #13
 8000756:	495a      	ldr	r1, [pc, #360]	@ (80008c0 <AT_setWIFImode+0x1bc>)
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f002 fd47 	bl	80031ec <HAL_UART_Transmit_IT>
			break;
 800075e:	e006      	b.n	800076e <AT_setWIFImode+0x6a>
		case AP_STATION:
			HAL_UART_Transmit_IT(huart4, (uint8_t*)"AT+CWMODE=3\r\n", 13);
 8000760:	220d      	movs	r2, #13
 8000762:	4958      	ldr	r1, [pc, #352]	@ (80008c4 <AT_setWIFImode+0x1c0>)
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f002 fd41 	bl	80031ec <HAL_UART_Transmit_IT>
			break;
 800076a:	bf00      	nop
 800076c:	e01b      	b.n	80007a6 <AT_setWIFImode+0xa2>
		}
	}
	while(!rxCplt){
 800076e:	e01a      	b.n	80007a6 <AT_setWIFImode+0xa2>
		//wait until rx is CPLT
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000776:	4854      	ldr	r0, [pc, #336]	@ (80008c8 <AT_setWIFImode+0x1c4>)
 8000778:	f001 fc14 	bl	8001fa4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fca9 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000788:	484f      	ldr	r0, [pc, #316]	@ (80008c8 <AT_setWIFImode+0x1c4>)
 800078a:	f001 fc0b 	bl	8001fa4 <HAL_GPIO_WritePin>
		//Have a timeout(there is something wrong if this while loop runs more than 10 times)
		if(waitTMout>10){
 800078e:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <AT_setWIFImode+0x1c8>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0a      	cmp	r3, #10
 8000794:	d901      	bls.n	800079a <AT_setWIFImode+0x96>
			return AT_TMOUT;
 8000796:	2303      	movs	r3, #3
 8000798:	e088      	b.n	80008ac <AT_setWIFImode+0x1a8>
		}
		waitTMout++;
 800079a:	4b4c      	ldr	r3, [pc, #304]	@ (80008cc <AT_setWIFImode+0x1c8>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b4a      	ldr	r3, [pc, #296]	@ (80008cc <AT_setWIFImode+0x1c8>)
 80007a4:	701a      	strb	r2, [r3, #0]
	while(!rxCplt){
 80007a6:	4b4a      	ldr	r3, [pc, #296]	@ (80008d0 <AT_setWIFImode+0x1cc>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f083 0301 	eor.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1dd      	bne.n	8000770 <AT_setWIFImode+0x6c>
	}
	waitTMout=0;
 80007b4:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <AT_setWIFImode+0x1c8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	if(rxCplt && txCplt){
 80007ba:	4b45      	ldr	r3, [pc, #276]	@ (80008d0 <AT_setWIFImode+0x1cc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d06a      	beq.n	8000898 <AT_setWIFImode+0x194>
 80007c2:	4b3c      	ldr	r3, [pc, #240]	@ (80008b4 <AT_setWIFImode+0x1b0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d066      	beq.n	8000898 <AT_setWIFImode+0x194>
		rxCplt=false;
 80007ca:	4b41      	ldr	r3, [pc, #260]	@ (80008d0 <AT_setWIFImode+0x1cc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
		txCplt=false;
 80007d0:	4b38      	ldr	r3, [pc, #224]	@ (80008b4 <AT_setWIFImode+0x1b0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		memset(recv,'\0',strlen(recv));
 80007d6:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 80007d8:	681c      	ldr	r4, [r3, #0]
 80007da:	4b3e      	ldr	r3, [pc, #248]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fd2a 	bl	8000238 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	4620      	mov	r0, r4
 80007ec:	f004 f87a 	bl	80048e4 <memset>
		if(data_head>data_tail){//handle wrap around condition
 80007f0:	4b39      	ldr	r3, [pc, #228]	@ (80008d8 <AT_setWIFImode+0x1d4>)
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	4b39      	ldr	r3, [pc, #228]	@ (80008dc <AT_setWIFImode+0x1d8>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d91a      	bls.n	8000832 <AT_setWIFImode+0x12e>
			uint16_t size_leftover = DATASIZE-data_head;
 80007fc:	4b36      	ldr	r3, [pc, #216]	@ (80008d8 <AT_setWIFImode+0x1d4>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000804:	81fb      	strh	r3, [r7, #14]
			memcpy((uint8_t*)recv, (uint8_t*)Data_Buffer+data_head, size_leftover);
 8000806:	4b33      	ldr	r3, [pc, #204]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a33      	ldr	r2, [pc, #204]	@ (80008d8 <AT_setWIFImode+0x1d4>)
 800080c:	8812      	ldrh	r2, [r2, #0]
 800080e:	4611      	mov	r1, r2
 8000810:	4a33      	ldr	r2, [pc, #204]	@ (80008e0 <AT_setWIFImode+0x1dc>)
 8000812:	4411      	add	r1, r2
 8000814:	89fa      	ldrh	r2, [r7, #14]
 8000816:	4618      	mov	r0, r3
 8000818:	f004 f8c0 	bl	800499c <memcpy>

			memcpy((uint8_t*)recv+size_leftover, (uint8_t*)Data_Buffer, data_tail);
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	4413      	add	r3, r2
 8000824:	4a2d      	ldr	r2, [pc, #180]	@ (80008dc <AT_setWIFImode+0x1d8>)
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	492d      	ldr	r1, [pc, #180]	@ (80008e0 <AT_setWIFImode+0x1dc>)
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f8b6 	bl	800499c <memcpy>
 8000830:	e00f      	b.n	8000852 <AT_setWIFImode+0x14e>
		}
		else{
			memcpy((uint8_t*)recv, (uint8_t*)Data_Buffer+data_head, data_tail-data_head);
 8000832:	4b28      	ldr	r3, [pc, #160]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a28      	ldr	r2, [pc, #160]	@ (80008d8 <AT_setWIFImode+0x1d4>)
 8000838:	8812      	ldrh	r2, [r2, #0]
 800083a:	4611      	mov	r1, r2
 800083c:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <AT_setWIFImode+0x1dc>)
 800083e:	4411      	add	r1, r2
 8000840:	4a26      	ldr	r2, [pc, #152]	@ (80008dc <AT_setWIFImode+0x1d8>)
 8000842:	8812      	ldrh	r2, [r2, #0]
 8000844:	4610      	mov	r0, r2
 8000846:	4a24      	ldr	r2, [pc, #144]	@ (80008d8 <AT_setWIFImode+0x1d4>)
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	1a82      	subs	r2, r0, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f004 f8a5 	bl	800499c <memcpy>
		}

		if(strstr(recv, "\r\nOK\r\n")!=NULL){
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4923      	ldr	r1, [pc, #140]	@ (80008e4 <AT_setWIFImode+0x1e0>)
 8000858:	4618      	mov	r0, r3
 800085a:	f004 f85e 	bl	800491a <strstr>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00e      	beq.n	8000882 <AT_setWIFImode+0x17e>
			//do something?
			memset(recv,'\0',strlen(recv));
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 8000866:	681c      	ldr	r4, [r3, #0]
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fce3 	bl	8000238 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	4620      	mov	r0, r4
 800087a:	f004 f833 	bl	80048e4 <memset>
			return AT_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e014      	b.n	80008ac <AT_setWIFImode+0x1a8>
		}
		else if(strstr(recv,"\r\nERROR\r\n")!=NULL){
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <AT_setWIFImode+0x1d0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4918      	ldr	r1, [pc, #96]	@ (80008e8 <AT_setWIFImode+0x1e4>)
 8000888:	4618      	mov	r0, r3
 800088a:	f004 f846 	bl	800491a <strstr>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <AT_setWIFImode+0x198>
			return AT_ERR;
 8000894:	2301      	movs	r3, #1
 8000896:	e009      	b.n	80008ac <AT_setWIFImode+0x1a8>
		}
	}
	else{
		return AT_PEND;
 8000898:	2302      	movs	r3, #2
 800089a:	e007      	b.n	80008ac <AT_setWIFImode+0x1a8>
		if(strstr(recv, "\r\nOK\r\n")!=NULL){
 800089c:	bf00      	nop
	}
	if(rxErr){
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <AT_setWIFImode+0x1e8>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <AT_setWIFImode+0x1a6>
		return AT_ERR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <AT_setWIFImode+0x1a8>
	}
	return AT_ERR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	2000117d 	.word	0x2000117d
 80008b8:	08004a3c 	.word	0x08004a3c
 80008bc:	08004a4c 	.word	0x08004a4c
 80008c0:	08004a5c 	.word	0x08004a5c
 80008c4:	08004a6c 	.word	0x08004a6c
 80008c8:	40020400 	.word	0x40020400
 80008cc:	2000117f 	.word	0x2000117f
 80008d0:	2000117c 	.word	0x2000117c
 80008d4:	20001180 	.word	0x20001180
 80008d8:	20001178 	.word	0x20001178
 80008dc:	2000117a 	.word	0x2000117a
 80008e0:	20000178 	.word	0x20000178
 80008e4:	08004a18 	.word	0x08004a18
 80008e8:	080049e4 	.word	0x080049e4
 80008ec:	2000117e 	.word	0x2000117e

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008f8:	f000 f956 	bl	8000ba8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fb8d 	bl	800101a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f82c 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 f904 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000908:	f000 f8e4 	bl	8000ad4 <MX_DMA_Init>
  MX_UART4_Init();
 800090c:	f000 f882 	bl	8000a14 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000910:	f000 f8b0 	bl	8000a74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, UART4_RX, RXSIZE);
 8000914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000918:	490e      	ldr	r1, [pc, #56]	@ (8000954 <main+0x64>)
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <main+0x68>)
 800091c:	f003 ff05 	bl	800472a <HAL_UARTEx_ReceiveToIdle_DMA>
  ATStatus test;
  WifiMode queryMode=Null;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3406 	strb.w	r3, [r7, #1030]	@ 0x406
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = AT_setWIFImode(&huart4,AP);
 8000926:	2102      	movs	r1, #2
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <main+0x68>)
 800092a:	f7ff feeb 	bl	8000704 <AT_setWIFImode>
 800092e:	4603      	mov	r3, r0
 8000930:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
	  test = AT_queryWIFImode(&huart4,&queryMode);
 8000934:	f207 4306 	addw	r3, r7, #1030	@ 0x406
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	@ (8000958 <main+0x68>)
 800093c:	f7ff fdfc 	bl	8000538 <AT_queryWIFImode>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407

	  HAL_Delay(1000);
 8000946:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094a:	f000 fbc3 	bl	80010d4 <HAL_Delay>
	  test = AT_setWIFImode(&huart4,AP);
 800094e:	bf00      	nop
 8000950:	e7e9      	b.n	8000926 <main+0x36>
 8000952:	bf00      	nop
 8000954:	20000078 	.word	0x20000078
 8000958:	20001184 	.word	0x20001184

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	@ 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2234      	movs	r2, #52	@ 0x34
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 ffba 	bl	80048e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <SystemClock_Config+0xb0>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a21      	ldr	r2, [pc, #132]	@ (8000a0c <SystemClock_Config+0xb0>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <SystemClock_Config+0xb0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <SystemClock_Config+0xb4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <SystemClock_Config+0xb4>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <SystemClock_Config+0xb4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fb05 	bl	8001fd8 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f914 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fd9e 	bl	8002534 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009fe:	f000 f8ff 	bl	8000c00 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	@ 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <MX_UART4_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_UART4_Init+0x58>)
 8000a58:	f002 fb7a 	bl	8003150 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8cd 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20001184 	.word	0x20001184
 8000a70:	40004c00 	.word	0x40004c00

08000a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000a7a:	4a15      	ldr	r2, [pc, #84]	@ (8000ad0 <MX_USART3_UART_Init+0x5c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USART3_UART_Init+0x58>)
 8000ab8:	f002 fb4a 	bl	8003150 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f89d 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000120c 	.word	0x2000120c
 8000ad0:	40004800 	.word	0x40004800

08000ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_DMA_Init+0x38>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <MX_DMA_Init+0x38>)
 8000ae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_DMA_Init+0x38>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	200d      	movs	r0, #13
 8000af8:	f000 fbeb 	bl	80012d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000afc:	200d      	movs	r0, #13
 8000afe:	f000 fc04 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_GPIO_Init+0x90>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b74:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <MX_GPIO_Init+0x94>)
 8000b76:	f001 fa15 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin;
 8000b7a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_GPIO_Init+0x94>)
 8000b94:	f001 f85a 	bl	8001c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bba:	f000 fbc1 	bl	8001340 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bca:	231f      	movs	r3, #31
 8000bcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bce:	2387      	movs	r3, #135	@ 0x87
 8000bd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fbdf 	bl	80013b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f000 fbbc 	bl	8001370 <HAL_MPU_Enable>

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0b0      	sub	sp, #192	@ 0xc0
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	2290      	movs	r2, #144	@ 0x90
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fe35 	bl	80048e4 <memset>
  if(huart->Instance==UART4)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8000df8 <HAL_UART_MspInit+0x1a4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d173      	bne.n	8000d6c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fe34 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9e:	f7ff ffaf 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ca2:	4b56      	ldr	r3, [pc, #344]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a55      	ldr	r2, [pc, #340]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000ca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b53      	ldr	r3, [pc, #332]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b50      	ldr	r3, [pc, #320]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a4f      	ldr	r2, [pc, #316]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cec:	2308      	movs	r3, #8
 8000cee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4841      	ldr	r0, [pc, #260]	@ (8000e00 <HAL_UART_MspInit+0x1ac>)
 8000cfa:	f000 ffa7 	bl	8001c4c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000cfe:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d00:	4a41      	ldr	r2, [pc, #260]	@ (8000e08 <HAL_UART_MspInit+0x1b4>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000d04:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d20:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d26:	4b37      	ldr	r3, [pc, #220]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d32:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000d3e:	4831      	ldr	r0, [pc, #196]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d40:	f000 fb7a 	bl	8001438 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000d4a:	f7ff ff59 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a2c      	ldr	r2, [pc, #176]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d52:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d54:	4a2b      	ldr	r2, [pc, #172]	@ (8000e04 <HAL_UART_MspInit+0x1b0>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2034      	movs	r0, #52	@ 0x34
 8000d60:	f000 fab7 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d64:	2034      	movs	r0, #52	@ 0x34
 8000d66:	f000 fad0 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6a:	e041      	b.n	8000df0 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a26      	ldr	r2, [pc, #152]	@ (8000e0c <HAL_UART_MspInit+0x1b8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d13c      	bne.n	8000df0 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fdbb 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8000d90:	f7ff ff36 	bl	8000c00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a18      	ldr	r2, [pc, #96]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000d9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <HAL_UART_MspInit+0x1a8>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dde:	2307      	movs	r3, #7
 8000de0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000de8:	4619      	mov	r1, r3
 8000dea:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <HAL_UART_MspInit+0x1bc>)
 8000dec:	f000 ff2e 	bl	8001c4c <HAL_GPIO_Init>
}
 8000df0:	bf00      	nop
 8000df2:	37c0      	adds	r7, #192	@ 0xc0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40004c00 	.word	0x40004c00
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	20001294 	.word	0x20001294
 8000e08:	40026040 	.word	0x40026040
 8000e0c:	40004800 	.word	0x40004800
 8000e10:	40020c00 	.word	0x40020c00

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f913 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <DMA1_Stream2_IRQHandler+0x10>)
 8000e7a:	f000 fc7d 	bl	8001778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20001294 	.word	0x20001294

08000e88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <UART4_IRQHandler+0x10>)
 8000e8e:	f002 fa0b 	bl	80032a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20001184 	.word	0x20001184

08000e9c <HAL_UARTEx_RxEventCallback>:
//	if(rxCplt==false){
//		HAL_UART_Receive_IT(&huart4, UART4_RX, RXSIZE);
//	}
//}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	rxErr=false;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
	rxCplt=true;
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]

	data_head=data_tail;//New position to enter(index of end of previous entry=tail-1)
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0xac>)
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000eba:	801a      	strh	r2, [r3, #0]

	if(data_head+Size>=DATASIZE){//Handle case to wrap around circular buffer
 8000ebc:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eca:	db1f      	blt.n	8000f0c <HAL_UARTEx_RxEventCallback+0x70>
		uint16_t size_leftover = DATASIZE-data_head;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000ed4:	81fb      	strh	r3, [r7, #14]
		memcpy((uint8_t *)Data_Buffer+data_head, UART4_RX, size_leftover);
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	491c      	ldr	r1, [pc, #112]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fd59 	bl	800499c <memcpy>

		memcpy((uint8_t *)Data_Buffer, (uint8_t *)UART4_RX+size_leftover, Size-size_leftover);
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000eee:	1899      	adds	r1, r3, r2
 8000ef0:	887a      	ldrh	r2, [r7, #2]
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4815      	ldr	r0, [pc, #84]	@ (8000f50 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000efa:	f003 fd4f 	bl	800499c <memcpy>
		data_tail = Size-size_leftover;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	89fb      	ldrh	r3, [r7, #14]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0xac>)
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	e010      	b.n	8000f2e <HAL_UARTEx_RxEventCallback+0x92>
	}
	else{//Copy to data buffer and update pointer
		memcpy ((uint8_t *)Data_Buffer+data_head, UART4_RX, Size);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000f14:	4413      	add	r3, r2
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	490e      	ldr	r1, [pc, #56]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fd3e 	bl	800499c <memcpy>
		data_tail = data_head+Size;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0xac>)
 8000f2c:	801a      	strh	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin,RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000f34:	f001 f836 	bl	8001fa4 <HAL_GPIO_WritePin>

//	memset(UART4_RX,'\0',RXSIZE);//RESET/CLEAR data buffer for next rx
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000117e 	.word	0x2000117e
 8000f44:	2000117c 	.word	0x2000117c
 8000f48:	2000117a 	.word	0x2000117a
 8000f4c:	20001178 	.word	0x20001178
 8000f50:	20000178 	.word	0x20000178
 8000f54:	20000078 	.word	0x20000078
 8000f58:	40020400 	.word	0x40020400

08000f5c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	txCplt=true;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_UART_TxCpltCallback+0x34>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
	rxErr=false;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_UART_TxCpltCallback+0x38>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin,SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <HAL_UART_TxCpltCallback+0x3c>)
 8000f76:	f001 f815 	bl	8001fa4 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, UART4_RX, RXSIZE);
 8000f7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f7e:	4907      	ldr	r1, [pc, #28]	@ (8000f9c <HAL_UART_TxCpltCallback+0x40>)
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <HAL_UART_TxCpltCallback+0x44>)
 8000f82:	f003 fbd2 	bl	800472a <HAL_UARTEx_ReceiveToIdle_DMA>
	//Immedietely after the AT command is sent, start listening for a response.
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000117d 	.word	0x2000117d
 8000f94:	2000117e 	.word	0x2000117e
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	20000078 	.word	0x20000078
 8000fa0:	20001184 	.word	0x20001184

08000fa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	@ (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffd7 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f003 fcad 	bl	8004954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fc79 	bl	80008f0 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800100c:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 8001010:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001014:	20001430 	.word	0x20001430

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>

0800101a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f94c 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001024:	200f      	movs	r0, #15
 8001026:	f000 f805 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102a:	f7ff fdef 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f967 	bl	8001326 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f92f 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000008 	.word	0x20000008
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	200012f4 	.word	0x200012f4

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200012f4 	.word	0x200012f4

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	05fa0000 	.word	0x05fa0000

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	@ (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	@ (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	@ 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff29 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff3e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff31 	bl	8001180 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001344:	f3bf 8f5f 	dmb	sy
}
 8001348:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_MPU_Disable+0x28>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_MPU_Disable+0x28>)
 8001350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001354:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_MPU_Disable+0x2c>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	e000ed90 	.word	0xe000ed90

08001370 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001378:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <HAL_MPU_Enable+0x38>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_MPU_Enable+0x3c>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_MPU_Enable+0x3c>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800138e:	f3bf 8f4f 	dsb	sy
}
 8001392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001394:	f3bf 8f6f 	isb	sy
}
 8001398:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed90 	.word	0xe000ed90
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	785a      	ldrb	r2, [r3, #1]
 80013bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <HAL_MPU_ConfigRegion+0x84>)
 80013be:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d029      	beq.n	800141c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80013c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001434 <HAL_MPU_ConfigRegion+0x84>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7b1b      	ldrb	r3, [r3, #12]
 80013d4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7adb      	ldrb	r3, [r3, #11]
 80013da:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7a9b      	ldrb	r3, [r3, #10]
 80013e2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7b5b      	ldrb	r3, [r3, #13]
 80013ea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7b9b      	ldrb	r3, [r3, #14]
 80013f2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7bdb      	ldrb	r3, [r3, #15]
 80013fa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7a5b      	ldrb	r3, [r3, #9]
 8001402:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001404:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7a1b      	ldrb	r3, [r3, #8]
 800140a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800140c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001416:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001418:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800141a:	e005      	b.n	8001428 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_MPU_ConfigRegion+0x84>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <HAL_MPU_ConfigRegion+0x84>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed90 	.word	0xe000ed90

08001438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff fe3a 	bl	80010bc <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e099      	b.n	8001588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001474:	e00f      	b.n	8001496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001476:	f7ff fe21 	bl	80010bc <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b05      	cmp	r3, #5
 8001482:	d908      	bls.n	8001496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e078      	b.n	8001588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e8      	bne.n	8001476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4b38      	ldr	r3, [pc, #224]	@ (8001590 <HAL_DMA_Init+0x158>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d107      	bne.n	8001500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	4313      	orrs	r3, r2
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f023 0307 	bic.w	r3, r3, #7
 8001516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4313      	orrs	r3, r2
 8001520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	2b04      	cmp	r3, #4
 8001528:	d117      	bne.n	800155a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00e      	beq.n	800155a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fb09 	bl	8001b54 <DMA_CheckFifoParam>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2240      	movs	r2, #64	@ 0x40
 800154c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001556:	2301      	movs	r3, #1
 8001558:	e016      	b.n	8001588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fac0 	bl	8001ae8 <DMA_CalcBaseAndBitshift>
 8001568:	4603      	mov	r3, r0
 800156a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001570:	223f      	movs	r2, #63	@ 0x3f
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	e010803f 	.word	0xe010803f

08001594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_DMA_Start_IT+0x26>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e048      	b.n	800164c <HAL_DMA_Start_IT+0xb8>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d137      	bne.n	800163e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fa52 	bl	8001a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	223f      	movs	r2, #63	@ 0x3f
 80015ee:	409a      	lsls	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0216 	orr.w	r2, r2, #22
 8001602:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001612:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e005      	b.n	800164a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001662:	f7ff fd2b 	bl	80010bc <HAL_GetTick>
 8001666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d008      	beq.n	8001686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2280      	movs	r2, #128	@ 0x80
 8001678:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e052      	b.n	800172c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0216 	bic.w	r2, r2, #22
 8001694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <HAL_DMA_Abort+0x62>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0208 	bic.w	r2, r2, #8
 80016c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	e013      	b.n	8001700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d8:	f7ff fcf0 	bl	80010bc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d90c      	bls.n	8001700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e015      	b.n	800172c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e4      	bne.n	80016d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	223f      	movs	r2, #63	@ 0x3f
 8001714:	409a      	lsls	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00c      	b.n	800176c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2205      	movs	r2, #5
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001784:	4b8e      	ldr	r3, [pc, #568]	@ (80019c0 <HAL_DMA_IRQHandler+0x248>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a8e      	ldr	r2, [pc, #568]	@ (80019c4 <HAL_DMA_IRQHandler+0x24c>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0a9b      	lsrs	r3, r3, #10
 8001790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a2:	2208      	movs	r2, #8
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01a      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0204 	bic.w	r2, r2, #4
 80017ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	2208      	movs	r2, #8
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d012      	beq.n	800181a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001806:	2201      	movs	r2, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181e:	2204      	movs	r2, #4
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183c:	2204      	movs	r2, #4
 800183e:	409a      	lsls	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001854:	2210      	movs	r2, #16
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d043      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03c      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	2210      	movs	r2, #16
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d018      	beq.n	80018ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d024      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
 80018a6:	e01f      	b.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01b      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
 80018b8:	e016      	b.n	80018e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0208 	bic.w	r2, r2, #8
 80018d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2220      	movs	r2, #32
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 808f 	beq.w	8001a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8087 	beq.w	8001a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190e:	2220      	movs	r2, #32
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b05      	cmp	r3, #5
 8001920:	d136      	bne.n	8001990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0216 	bic.w	r2, r2, #22
 8001930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <HAL_DMA_IRQHandler+0x1da>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0208 	bic.w	r2, r2, #8
 8001960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	223f      	movs	r2, #63	@ 0x3f
 8001968:	409a      	lsls	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	2b00      	cmp	r3, #0
 8001984:	d07e      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
        }
        return;
 800198e:	e079      	b.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01d      	beq.n	80019da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10d      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d031      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e02c      	b.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000
 80019c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
 80019d8:	e01e      	b.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0210 	bic.w	r2, r2, #16
 80019f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d032      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d022      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2205      	movs	r2, #5
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d307      	bcc.n	8001a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f2      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x2cc>
 8001a5e:	e000      	b.n	8001a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
 8001a82:	e000      	b.n	8001a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a84:	bf00      	nop
    }
  }
}
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b40      	cmp	r3, #64	@ 0x40
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b10      	subs	r3, #16
 8001af8:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <DMA_CalcBaseAndBitshift+0x60>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <DMA_CalcBaseAndBitshift+0x64>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d908      	bls.n	8001b28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <DMA_CalcBaseAndBitshift+0x68>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	1d1a      	adds	r2, r3, #4
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b26:	e006      	b.n	8001b36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <DMA_CalcBaseAndBitshift+0x68>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	aaaaaaab 	.word	0xaaaaaaab
 8001b4c:	08004b10 	.word	0x08004b10
 8001b50:	fffffc00 	.word	0xfffffc00

08001b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11f      	bne.n	8001bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d856      	bhi.n	8001c22 <DMA_CheckFifoParam+0xce>
 8001b74:	a201      	add	r2, pc, #4	@ (adr r2, 8001b7c <DMA_CheckFifoParam+0x28>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001b9f 	.word	0x08001b9f
 8001b84:	08001b8d 	.word	0x08001b8d
 8001b88:	08001c23 	.word	0x08001c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d046      	beq.n	8001c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b9c:	e043      	b.n	8001c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ba6:	d140      	bne.n	8001c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bac:	e03d      	b.n	8001c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bb6:	d121      	bne.n	8001bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d837      	bhi.n	8001c2e <DMA_CheckFifoParam+0xda>
 8001bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc4 <DMA_CheckFifoParam+0x70>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bdb 	.word	0x08001bdb
 8001bcc:	08001bd5 	.word	0x08001bd5
 8001bd0:	08001bed 	.word	0x08001bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e030      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d025      	beq.n	8001c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bea:	e022      	b.n	8001c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bf4:	d11f      	bne.n	8001c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bfa:	e01c      	b.n	8001c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d903      	bls.n	8001c0a <DMA_CheckFifoParam+0xb6>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d003      	beq.n	8001c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c08:	e018      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0e:	e015      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00e      	beq.n	8001c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c20:	e00b      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c22:	bf00      	nop
 8001c24:	e00a      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e008      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e006      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e004      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
 8001c34:	e002      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c36:	bf00      	nop
 8001c38:	e000      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e175      	b.n	8001f58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8164 	bne.w	8001f52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d005      	beq.n	8001ca2 <HAL_GPIO_Init+0x56>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d130      	bne.n	8001d04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d017      	beq.n	8001d40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d123      	bne.n	8001d94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	69b9      	ldr	r1, [r7, #24]
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80be 	beq.w	8001f52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b66      	ldr	r3, [pc, #408]	@ (8001f70 <HAL_GPIO_Init+0x324>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a65      	ldr	r2, [pc, #404]	@ (8001f70 <HAL_GPIO_Init+0x324>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b63      	ldr	r3, [pc, #396]	@ (8001f70 <HAL_GPIO_Init+0x324>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dee:	4a61      	ldr	r2, [pc, #388]	@ (8001f74 <HAL_GPIO_Init+0x328>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a58      	ldr	r2, [pc, #352]	@ (8001f78 <HAL_GPIO_Init+0x32c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d037      	beq.n	8001e8a <HAL_GPIO_Init+0x23e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_GPIO_Init+0x330>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d031      	beq.n	8001e86 <HAL_GPIO_Init+0x23a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a56      	ldr	r2, [pc, #344]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <HAL_GPIO_Init+0x236>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a55      	ldr	r2, [pc, #340]	@ (8001f84 <HAL_GPIO_Init+0x338>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d025      	beq.n	8001e7e <HAL_GPIO_Init+0x232>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a54      	ldr	r2, [pc, #336]	@ (8001f88 <HAL_GPIO_Init+0x33c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <HAL_GPIO_Init+0x22e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a53      	ldr	r2, [pc, #332]	@ (8001f8c <HAL_GPIO_Init+0x340>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d019      	beq.n	8001e76 <HAL_GPIO_Init+0x22a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_GPIO_Init+0x344>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a51      	ldr	r2, [pc, #324]	@ (8001f94 <HAL_GPIO_Init+0x348>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00d      	beq.n	8001e6e <HAL_GPIO_Init+0x222>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a50      	ldr	r2, [pc, #320]	@ (8001f98 <HAL_GPIO_Init+0x34c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x21e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f9c <HAL_GPIO_Init+0x350>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_GPIO_Init+0x21a>
 8001e62:	2309      	movs	r3, #9
 8001e64:	e012      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e66:	230a      	movs	r3, #10
 8001e68:	e010      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	e00e      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e00c      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00a      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e76:	2305      	movs	r3, #5
 8001e78:	e008      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x240>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4093      	lsls	r3, r2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e9c:	4935      	ldr	r1, [pc, #212]	@ (8001f74 <HAL_GPIO_Init+0x328>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a34      	ldr	r2, [pc, #208]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a29      	ldr	r2, [pc, #164]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001efe:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f22:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <HAL_GPIO_Init+0x354>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	f67f ae86 	bls.w	8001c6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3724      	adds	r7, #36	@ 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40021400 	.word	0x40021400
 8001f90:	40021800 	.word	0x40021800
 8001f94:	40021c00 	.word	0x40021c00
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40022400 	.word	0x40022400
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e29b      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8087 	beq.w	800210a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	4b96      	ldr	r3, [pc, #600]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d00c      	beq.n	8002022 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002008:	4b93      	ldr	r3, [pc, #588]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0x62>
 8002014:	4b90      	ldr	r3, [pc, #576]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002020:	d10b      	bne.n	800203a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	4b8d      	ldr	r3, [pc, #564]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d06c      	beq.n	8002108 <HAL_RCC_OscConfig+0x130>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d168      	bne.n	8002108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e275      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x7a>
 8002044:	4b84      	ldr	r3, [pc, #528]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a83      	ldr	r2, [pc, #524]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e02e      	b.n	80020b0 <HAL_RCC_OscConfig+0xd8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x9c>
 800205a:	4b7f      	ldr	r3, [pc, #508]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7e      	ldr	r2, [pc, #504]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b7c      	ldr	r3, [pc, #496]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7b      	ldr	r2, [pc, #492]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xd8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0xc0>
 800207e:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a75      	ldr	r2, [pc, #468]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b73      	ldr	r3, [pc, #460]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a72      	ldr	r2, [pc, #456]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xd8>
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f800 	bl	80010bc <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fffc 	bl	80010bc <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e229      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xe8>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffec 	bl	80010bc <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe ffe8 	bl	80010bc <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e215      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x110>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d069      	beq.n	80021ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002116:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x190>
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x17a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1e9      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	493d      	ldr	r1, [pc, #244]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e040      	b.n	80021ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a38      	ldr	r2, [pc, #224]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ff9e 	bl	80010bc <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7fe ff9a 	bl	80010bc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1c7      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4929      	ldr	r1, [pc, #164]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe ff7a 	bl	80010bc <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7fe ff76 	bl	80010bc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1a3      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d038      	beq.n	8002268 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe ff57 	bl	80010bc <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe ff53 	bl	80010bc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e180      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x23a>
 8002230:	e01a      	b.n	8002268 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <HAL_RCC_OscConfig+0x280>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe ff3d 	bl	80010bc <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe ff39 	bl	80010bc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d903      	bls.n	800225c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e166      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
 8002258:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b92      	ldr	r3, [pc, #584]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a4 	beq.w	80023be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b8c      	ldr	r3, [pc, #560]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b89      	ldr	r3, [pc, #548]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a88      	ldr	r2, [pc, #544]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	4b86      	ldr	r3, [pc, #536]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	4b83      	ldr	r3, [pc, #524]	@ (80024ac <HAL_RCC_OscConfig+0x4d4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022aa:	4b80      	ldr	r3, [pc, #512]	@ (80024ac <HAL_RCC_OscConfig+0x4d4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7f      	ldr	r2, [pc, #508]	@ (80024ac <HAL_RCC_OscConfig+0x4d4>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe ff01 	bl	80010bc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe fefd 	bl	80010bc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	@ 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e12a      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d0:	4b76      	ldr	r3, [pc, #472]	@ (80024ac <HAL_RCC_OscConfig+0x4d4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x31a>
 80022e4:	4b70      	ldr	r3, [pc, #448]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	4a6f      	ldr	r2, [pc, #444]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f0:	e02d      	b.n	800234e <HAL_RCC_OscConfig+0x376>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x33c>
 80022fa:	4b6b      	ldr	r3, [pc, #428]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	4a6a      	ldr	r2, [pc, #424]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	@ 0x70
 8002306:	4b68      	ldr	r3, [pc, #416]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a67      	ldr	r2, [pc, #412]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	e01c      	b.n	800234e <HAL_RCC_OscConfig+0x376>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d10c      	bne.n	8002336 <HAL_RCC_OscConfig+0x35e>
 800231c:	4b62      	ldr	r3, [pc, #392]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	4a61      	ldr	r2, [pc, #388]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	4b5f      	ldr	r3, [pc, #380]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	4a5e      	ldr	r2, [pc, #376]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	@ 0x70
 8002334:	e00b      	b.n	800234e <HAL_RCC_OscConfig+0x376>
 8002336:	4b5c      	ldr	r3, [pc, #368]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233a:	4a5b      	ldr	r2, [pc, #364]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	@ 0x70
 8002342:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d015      	beq.n	8002382 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7fe feb1 	bl	80010bc <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe fead 	bl	80010bc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e0d8      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	4b4c      	ldr	r3, [pc, #304]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ee      	beq.n	800235e <HAL_RCC_OscConfig+0x386>
 8002380:	e014      	b.n	80023ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe fe9b 	bl	80010bc <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fe97 	bl	80010bc <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0c2      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ee      	bne.n	800238a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80ae 	beq.w	8002524 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c8:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d06d      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d14b      	bne.n	8002474 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a31      	ldr	r2, [pc, #196]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fe68 	bl	80010bc <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fe64 	bl	80010bc <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e091      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	071b      	lsls	r3, r3, #28
 800243a:	491b      	ldr	r1, [pc, #108]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fe36 	bl	80010bc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fe32 	bl	80010bc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e05f      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x47c>
 8002472:	e057      	b.n	8002524 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0b      	ldr	r2, [pc, #44]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fe1c 	bl	80010bc <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fe18 	bl	80010bc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e045      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	4b03      	ldr	r3, [pc, #12]	@ (80024a8 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x4b0>
 80024a6:	e03d      	b.n	8002524 <HAL_RCC_OscConfig+0x54c>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <HAL_RCC_OscConfig+0x558>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d030      	beq.n	8002520 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d129      	bne.n	8002520 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d122      	bne.n	8002520 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d119      	bne.n	8002520 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10f      	bne.n	8002520 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0d0      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d910      	bls.n	800257c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b67      	ldr	r3, [pc, #412]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020f 	bic.w	r2, r3, #15
 8002562:	4965      	ldr	r1, [pc, #404]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b63      	ldr	r3, [pc, #396]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a58      	ldr	r2, [pc, #352]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800259e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a52      	ldr	r2, [pc, #328]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	494d      	ldr	r1, [pc, #308]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d040      	beq.n	8002658 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d115      	bne.n	8002616 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e073      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06b      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4936      	ldr	r1, [pc, #216]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002628:	f7fe fd48 	bl	80010bc <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fd44 	bl	80010bc <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e053      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d210      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	4922      	ldr	r1, [pc, #136]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e032      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4916      	ldr	r1, [pc, #88]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	490e      	ldr	r1, [pc, #56]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490a      	ldr	r1, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x1cc>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1d0>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_ClockConfig+0x1d4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fca4 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	40023800 	.word	0x40023800
 8002700:	08004af8 	.word	0x08004af8
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b090      	sub	sp, #64	@ 0x40
 8002712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
 8002718:	2300      	movs	r3, #0
 800271a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002724:	4b59      	ldr	r3, [pc, #356]	@ (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00d      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x40>
 8002730:	2b08      	cmp	r3, #8
 8002732:	f200 80a1 	bhi.w	8002878 <HAL_RCC_GetSysClockFreq+0x16c>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e09b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b53      	ldr	r3, [pc, #332]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x184>)
 8002742:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002744:	e09b      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002746:	4b53      	ldr	r3, [pc, #332]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x188>)
 8002748:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800274a:	e098      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800274c:	4b4f      	ldr	r3, [pc, #316]	@ (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002754:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002756:	4b4d      	ldr	r3, [pc, #308]	@ (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b4a      	ldr	r3, [pc, #296]	@ (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	627a      	str	r2, [r7, #36]	@ 0x24
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002774:	2100      	movs	r1, #0
 8002776:	4b47      	ldr	r3, [pc, #284]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x188>)
 8002778:	fb03 f201 	mul.w	r2, r3, r1
 800277c:	2300      	movs	r3, #0
 800277e:	fb00 f303 	mul.w	r3, r0, r3
 8002782:	4413      	add	r3, r2
 8002784:	4a43      	ldr	r2, [pc, #268]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x188>)
 8002786:	fba0 1202 	umull	r1, r2, r0, r2
 800278a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800278c:	460a      	mov	r2, r1
 800278e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002792:	4413      	add	r3, r2
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002798:	2200      	movs	r2, #0
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	61fa      	str	r2, [r7, #28]
 800279e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027a6:	f7fd fd4f 	bl	8000248 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4613      	mov	r3, r2
 80027b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027b2:	e053      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b4:	4b35      	ldr	r3, [pc, #212]	@ (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	2200      	movs	r2, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	617a      	str	r2, [r7, #20]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027c6:	f04f 0b00 	mov.w	fp, #0
 80027ca:	4652      	mov	r2, sl
 80027cc:	465b      	mov	r3, fp
 80027ce:	f04f 0000 	mov.w	r0, #0
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	0159      	lsls	r1, r3, #5
 80027d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027dc:	0150      	lsls	r0, r2, #5
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	ebb2 080a 	subs.w	r8, r2, sl
 80027e6:	eb63 090b 	sbc.w	r9, r3, fp
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002802:	eb63 0509 	sbc.w	r5, r3, r9
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	00eb      	lsls	r3, r5, #3
 8002810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002814:	00e2      	lsls	r2, r4, #3
 8002816:	4614      	mov	r4, r2
 8002818:	461d      	mov	r5, r3
 800281a:	eb14 030a 	adds.w	r3, r4, sl
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	eb45 030b 	adc.w	r3, r5, fp
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002832:	4629      	mov	r1, r5
 8002834:	028b      	lsls	r3, r1, #10
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800283c:	4621      	mov	r1, r4
 800283e:	028a      	lsls	r2, r1, #10
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002846:	2200      	movs	r2, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	60fa      	str	r2, [r7, #12]
 800284c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002850:	f7fd fcfa 	bl	8000248 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_RCC_GetSysClockFreq+0x180>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	3301      	adds	r3, #1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800286c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x184>)
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002880:	4618      	mov	r0, r3
 8002882:	3740      	adds	r7, #64	@ 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	00f42400 	.word	0x00f42400
 8002894:	017d7840 	.word	0x017d7840

08002898 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b4:	f7ff fff0 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	@ (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08004b08 	.word	0x08004b08

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028dc:	f7ff ffdc 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0b5b      	lsrs	r3, r3, #13
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	@ (80028fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08004b08 	.word	0x08004b08

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002928:	4b69      	ldr	r3, [pc, #420]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a68      	ldr	r2, [pc, #416]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002932:	6093      	str	r3, [r2, #8]
 8002934:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	4964      	ldr	r1, [pc, #400]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d017      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002960:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	4959      	ldr	r1, [pc, #356]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002978:	d101      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002996:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	494a      	ldr	r1, [pc, #296]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b4:	d101      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 808b 	beq.w	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	4a39      	ldr	r2, [pc, #228]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f0:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029fc:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a34      	ldr	r2, [pc, #208]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a08:	f7fe fb58 	bl	80010bc <HAL_GetTick>
 8002a0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a10:	f7fe fb54 	bl	80010bc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	@ 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e38f      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d035      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d02e      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a60:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d114      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fb1c 	bl	80010bc <HAL_GetTick>
 8002a84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe fb18 	bl	80010bc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e351      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0ee      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab6:	d111      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	4901      	ldr	r1, [pc, #4]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	0ffffcff 	.word	0x0ffffcff
 8002adc:	4bac      	ldr	r3, [pc, #688]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4aab      	ldr	r2, [pc, #684]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ae6:	6093      	str	r3, [r2, #8]
 8002ae8:	4ba9      	ldr	r3, [pc, #676]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	49a6      	ldr	r1, [pc, #664]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b06:	4ba2      	ldr	r3, [pc, #648]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b0c:	4aa0      	ldr	r2, [pc, #640]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b16:	4b9e      	ldr	r3, [pc, #632]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b18:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b20:	499b      	ldr	r1, [pc, #620]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b34:	4b96      	ldr	r3, [pc, #600]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b42:	4993      	ldr	r1, [pc, #588]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b56:	4b8e      	ldr	r3, [pc, #568]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b64:	498a      	ldr	r1, [pc, #552]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b78:	4b85      	ldr	r3, [pc, #532]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b86:	4982      	ldr	r1, [pc, #520]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4979      	ldr	r1, [pc, #484]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bbc:	4b74      	ldr	r3, [pc, #464]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	4971      	ldr	r1, [pc, #452]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bde:	4b6c      	ldr	r3, [pc, #432]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	f023 020c 	bic.w	r2, r3, #12
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bec:	4968      	ldr	r1, [pc, #416]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c00:	4b63      	ldr	r3, [pc, #396]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	4960      	ldr	r1, [pc, #384]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c22:	4b5b      	ldr	r3, [pc, #364]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c30:	4957      	ldr	r1, [pc, #348]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c44:	4b52      	ldr	r3, [pc, #328]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	494f      	ldr	r1, [pc, #316]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c74:	4946      	ldr	r1, [pc, #280]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c88:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	493e      	ldr	r1, [pc, #248]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002caa:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb8:	4935      	ldr	r1, [pc, #212]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ccc:	4b30      	ldr	r3, [pc, #192]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cda:	492d      	ldr	r1, [pc, #180]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d011      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cfc:	4924      	ldr	r1, [pc, #144]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2e:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d34:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3c:	4914      	ldr	r1, [pc, #80]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d50:	4b0f      	ldr	r3, [pc, #60]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d56:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d60:	490b      	ldr	r1, [pc, #44]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00f      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d84:	4902      	ldr	r1, [pc, #8]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d8c:	e002      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002da0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	4986      	ldr	r1, [pc, #536]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dc4:	4b81      	ldr	r3, [pc, #516]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd4:	497d      	ldr	r1, [pc, #500]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d006      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80d6 	beq.w	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002df0:	4b76      	ldr	r3, [pc, #472]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a75      	ldr	r2, [pc, #468]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe f95e 	bl	80010bc <HAL_GetTick>
 8002e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e04:	f7fe f95a 	bl	80010bc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e195      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e16:	4b6d      	ldr	r3, [pc, #436]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d021      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11d      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e36:	4b65      	ldr	r3, [pc, #404]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e44:	4b61      	ldr	r3, [pc, #388]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e4a:	0e1b      	lsrs	r3, r3, #24
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	019a      	lsls	r2, r3, #6
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	4958      	ldr	r1, [pc, #352]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02e      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e9c:	d129      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eac:	4b47      	ldr	r3, [pc, #284]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb2:	0f1b      	lsrs	r3, r3, #28
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	019a      	lsls	r2, r3, #6
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	071b      	lsls	r3, r3, #28
 8002ed2:	493e      	ldr	r1, [pc, #248]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eda:	4b3c      	ldr	r3, [pc, #240]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee0:	f023 021f 	bic.w	r2, r3, #31
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	4938      	ldr	r1, [pc, #224]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01d      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002efe:	4b33      	ldr	r3, [pc, #204]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f04:	0e1b      	lsrs	r3, r3, #24
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f12:	0f1b      	lsrs	r3, r3, #28
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	019a      	lsls	r2, r3, #6
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	4926      	ldr	r1, [pc, #152]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d011      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	019a      	lsls	r2, r3, #6
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	071b      	lsls	r3, r3, #28
 8002f62:	491a      	ldr	r1, [pc, #104]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f6a:	4b18      	ldr	r3, [pc, #96]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a17      	ldr	r2, [pc, #92]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f76:	f7fe f8a1 	bl	80010bc <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f7e:	f7fe f89d 	bl	80010bc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	@ 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0d8      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f90:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 80ce 	bne.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fa4:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb0:	f7fe f884 	bl	80010bc <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fb8:	f7fe f880 	bl	80010bc <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d904      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0bb      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fdc:	d0ec      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02e      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d12a      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003006:	4b51      	ldr	r3, [pc, #324]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003014:	4b4d      	ldr	r3, [pc, #308]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	0f1b      	lsrs	r3, r3, #28
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	019a      	lsls	r2, r3, #6
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	4944      	ldr	r1, [pc, #272]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003042:	4b42      	ldr	r3, [pc, #264]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003048:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	493d      	ldr	r1, [pc, #244]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d022      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800306c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003070:	d11d      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003072:	4b36      	ldr	r3, [pc, #216]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	0e1b      	lsrs	r3, r3, #24
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003080:	4b32      	ldr	r3, [pc, #200]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	0f1b      	lsrs	r3, r3, #28
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	019a      	lsls	r2, r3, #6
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	061b      	lsls	r3, r3, #24
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	071b      	lsls	r3, r3, #28
 80030a6:	4929      	ldr	r1, [pc, #164]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d028      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030c8:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	431a      	orrs	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4917      	ldr	r1, [pc, #92]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030f6:	4b15      	ldr	r3, [pc, #84]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	4911      	ldr	r1, [pc, #68]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800310c:	4b0f      	ldr	r3, [pc, #60]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0e      	ldr	r2, [pc, #56]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fd ffd0 	bl	80010bc <HAL_GetTick>
 800311c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003120:	f7fd ffcc 	bl	80010bc <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e007      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003132:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800313a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800313e:	d1ef      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e040      	b.n	80031e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fd6e 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	@ 0x24
 800317c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fb9a 	bl	80038c8 <UART_SetConfig>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fdf2 	bl	8003d90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fe79 	bl	8003ed4 <UART_CheckIdleState>
 80031e2:	4603      	mov	r3, r0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b08b      	sub	sp, #44	@ 0x2c
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d147      	bne.n	8003292 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_Transmit_IT+0x22>
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e040      	b.n	8003294 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2221      	movs	r2, #33	@ 0x21
 800323a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003244:	d107      	bne.n	8003256 <HAL_UART_Transmit_IT+0x6a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <HAL_UART_Transmit_IT+0xb4>)
 8003252:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003254:	e002      	b.n	800325c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <HAL_UART_Transmit_IT+0xb8>)
 800325a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	613b      	str	r3, [r7, #16]
   return(result);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	623b      	str	r3, [r7, #32]
 800327c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	69f9      	ldr	r1, [r7, #28]
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	61bb      	str	r3, [r7, #24]
   return(result);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e6      	bne.n	800325c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	372c      	adds	r7, #44	@ 0x2c
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	08004617 	.word	0x08004617
 80032a4:	08004561 	.word	0x08004561

080032a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0ba      	sub	sp, #232	@ 0xe8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032d6:	4013      	ands	r3, r2
 80032d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d115      	bne.n	8003310 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00f      	beq.n	8003310 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 82ac 	beq.w	800385e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
      }
      return;
 800330e:	e2a6      	b.n	800385e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8117 	beq.w	8003548 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800331a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800332a:	4b85      	ldr	r3, [pc, #532]	@ (8003540 <HAL_UART_IRQHandler+0x298>)
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 810a 	beq.w	8003548 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d011      	beq.n	8003364 <HAL_UART_IRQHandler+0xbc>
 8003340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d011      	beq.n	8003394 <HAL_UART_IRQHandler+0xec>
 8003370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2202      	movs	r2, #2
 8003382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d011      	beq.n	80033c4 <HAL_UART_IRQHandler+0x11c>
 80033a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2204      	movs	r2, #4
 80033b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ba:	f043 0202 	orr.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2208      	movs	r2, #8
 80033ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f6:	f043 0208 	orr.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <HAL_UART_IRQHandler+0x18a>
 800340c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00c      	beq.n	8003432 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8212 	beq.w	8003862 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347a:	2b40      	cmp	r3, #64	@ 0x40
 800347c:	d005      	beq.n	800348a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800347e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003482:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04f      	beq.n	800352a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fefc 	bl	8004288 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d141      	bne.n	8003522 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1d9      	bne.n	800349e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d013      	beq.n	800351a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f6:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <HAL_UART_IRQHandler+0x29c>)
 80034f8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe f918 	bl	8001734 <HAL_DMA_Abort_IT>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d017      	beq.n	800353a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003514:	4610      	mov	r0, r2
 8003516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	e00f      	b.n	800353a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9c0 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	e00b      	b.n	800353a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9bc 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	e007      	b.n	800353a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9b8 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003538:	e193      	b.n	8003862 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353a:	bf00      	nop
    return;
 800353c:	e191      	b.n	8003862 <HAL_UART_IRQHandler+0x5ba>
 800353e:	bf00      	nop
 8003540:	04000120 	.word	0x04000120
 8003544:	08004535 	.word	0x08004535

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 814c 	bne.w	80037ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8145 	beq.w	80037ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 813e 	beq.w	80037ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2210      	movs	r2, #16
 8003574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	f040 80b6 	bne.w	80036f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003592:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8165 	beq.w	8003866 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80035a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a6:	429a      	cmp	r2, r3
 80035a8:	f080 815d 	bcs.w	8003866 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c0:	f000 8086 	beq.w	80036d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1da      	bne.n	80035c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800361e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3308      	adds	r3, #8
 800362e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800363a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e1      	bne.n	800360e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800365a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800365c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800366e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800367c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e3      	bne.n	800364a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800369e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a0:	f023 0310 	bic.w	r3, r3, #16
 80036a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e4      	bne.n	8003690 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd ffc2 	bl	8001654 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fbd6 	bl	8000e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f0:	e0b9      	b.n	8003866 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80ab 	beq.w	800386a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a6 	beq.w	800386a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800372c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
 8003742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800374e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e4      	bne.n	800371e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	623b      	str	r3, [r7, #32]
   return(result);
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003778:	633a      	str	r2, [r7, #48]	@ 0x30
 800377a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800377e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e3      	bne.n	8003754 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f023 0310 	bic.w	r3, r3, #16
 80037b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	617b      	str	r3, [r7, #20]
   return(result);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e4      	bne.n	80037a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fb5a 	bl	8000e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037e8:	e03f      	b.n	800386a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <HAL_UART_IRQHandler+0x56c>
 80037f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800380a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f851 	bl	80038b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003812:	e02d      	b.n	8003870 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00e      	beq.n	800383e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01c      	beq.n	800386e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
    }
    return;
 800383c:	e017      	b.n	800386e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <HAL_UART_IRQHandler+0x5c8>
 800384a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800384e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 ff3d 	bl	80046d6 <UART_EndTransmit_IT>
    return;
 800385c:	e008      	b.n	8003870 <HAL_UART_IRQHandler+0x5c8>
      return;
 800385e:	bf00      	nop
 8003860:	e006      	b.n	8003870 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003862:	bf00      	nop
 8003864:	e004      	b.n	8003870 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <HAL_UART_IRQHandler+0x5c8>
      return;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <HAL_UART_IRQHandler+0x5c8>
    return;
 800386e:	bf00      	nop
  }

}
 8003870:	37e8      	adds	r7, #232	@ 0xe8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop

08003878 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4ba6      	ldr	r3, [pc, #664]	@ (8003b8c <UART_SetConfig+0x2c4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a94      	ldr	r2, [pc, #592]	@ (8003b90 <UART_SetConfig+0x2c8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d120      	bne.n	8003986 <UART_SetConfig+0xbe>
 8003944:	4b93      	ldr	r3, [pc, #588]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b03      	cmp	r3, #3
 8003950:	d816      	bhi.n	8003980 <UART_SetConfig+0xb8>
 8003952:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <UART_SetConfig+0x90>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	08003969 	.word	0x08003969
 800395c:	08003975 	.word	0x08003975
 8003960:	0800396f 	.word	0x0800396f
 8003964:	0800397b 	.word	0x0800397b
 8003968:	2301      	movs	r3, #1
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e150      	b.n	8003c10 <UART_SetConfig+0x348>
 800396e:	2302      	movs	r3, #2
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e14d      	b.n	8003c10 <UART_SetConfig+0x348>
 8003974:	2304      	movs	r3, #4
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e14a      	b.n	8003c10 <UART_SetConfig+0x348>
 800397a:	2308      	movs	r3, #8
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e147      	b.n	8003c10 <UART_SetConfig+0x348>
 8003980:	2310      	movs	r3, #16
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e144      	b.n	8003c10 <UART_SetConfig+0x348>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a83      	ldr	r2, [pc, #524]	@ (8003b98 <UART_SetConfig+0x2d0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d132      	bne.n	80039f6 <UART_SetConfig+0x12e>
 8003990:	4b80      	ldr	r3, [pc, #512]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d828      	bhi.n	80039f0 <UART_SetConfig+0x128>
 800399e:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <UART_SetConfig+0xdc>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039d9 	.word	0x080039d9
 80039a8:	080039f1 	.word	0x080039f1
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039f1 	.word	0x080039f1
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039df 	.word	0x080039df
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f1 	.word	0x080039f1
 80039d4:	080039eb 	.word	0x080039eb
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e118      	b.n	8003c10 <UART_SetConfig+0x348>
 80039de:	2302      	movs	r3, #2
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e115      	b.n	8003c10 <UART_SetConfig+0x348>
 80039e4:	2304      	movs	r3, #4
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e112      	b.n	8003c10 <UART_SetConfig+0x348>
 80039ea:	2308      	movs	r3, #8
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e10f      	b.n	8003c10 <UART_SetConfig+0x348>
 80039f0:	2310      	movs	r3, #16
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e10c      	b.n	8003c10 <UART_SetConfig+0x348>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a68      	ldr	r2, [pc, #416]	@ (8003b9c <UART_SetConfig+0x2d4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d120      	bne.n	8003a42 <UART_SetConfig+0x17a>
 8003a00:	4b64      	ldr	r3, [pc, #400]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a0a:	2b30      	cmp	r3, #48	@ 0x30
 8003a0c:	d013      	beq.n	8003a36 <UART_SetConfig+0x16e>
 8003a0e:	2b30      	cmp	r3, #48	@ 0x30
 8003a10:	d814      	bhi.n	8003a3c <UART_SetConfig+0x174>
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d009      	beq.n	8003a2a <UART_SetConfig+0x162>
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d810      	bhi.n	8003a3c <UART_SetConfig+0x174>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0x15c>
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d006      	beq.n	8003a30 <UART_SetConfig+0x168>
 8003a22:	e00b      	b.n	8003a3c <UART_SetConfig+0x174>
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e0f2      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e0ef      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a30:	2304      	movs	r3, #4
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e0ec      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a36:	2308      	movs	r3, #8
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e0e9      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e0e6      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a56      	ldr	r2, [pc, #344]	@ (8003ba0 <UART_SetConfig+0x2d8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d120      	bne.n	8003a8e <UART_SetConfig+0x1c6>
 8003a4c:	4b51      	ldr	r3, [pc, #324]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a58:	d013      	beq.n	8003a82 <UART_SetConfig+0x1ba>
 8003a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a5c:	d814      	bhi.n	8003a88 <UART_SetConfig+0x1c0>
 8003a5e:	2b80      	cmp	r3, #128	@ 0x80
 8003a60:	d009      	beq.n	8003a76 <UART_SetConfig+0x1ae>
 8003a62:	2b80      	cmp	r3, #128	@ 0x80
 8003a64:	d810      	bhi.n	8003a88 <UART_SetConfig+0x1c0>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <UART_SetConfig+0x1a8>
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d006      	beq.n	8003a7c <UART_SetConfig+0x1b4>
 8003a6e:	e00b      	b.n	8003a88 <UART_SetConfig+0x1c0>
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0cc      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e0c9      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e0c6      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a82:	2308      	movs	r3, #8
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e0c3      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e0c0      	b.n	8003c10 <UART_SetConfig+0x348>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a44      	ldr	r2, [pc, #272]	@ (8003ba4 <UART_SetConfig+0x2dc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d125      	bne.n	8003ae4 <UART_SetConfig+0x21c>
 8003a98:	4b3e      	ldr	r3, [pc, #248]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	d017      	beq.n	8003ad8 <UART_SetConfig+0x210>
 8003aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aac:	d817      	bhi.n	8003ade <UART_SetConfig+0x216>
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d00b      	beq.n	8003acc <UART_SetConfig+0x204>
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab8:	d811      	bhi.n	8003ade <UART_SetConfig+0x216>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <UART_SetConfig+0x1fe>
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac2:	d006      	beq.n	8003ad2 <UART_SetConfig+0x20a>
 8003ac4:	e00b      	b.n	8003ade <UART_SetConfig+0x216>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e0a1      	b.n	8003c10 <UART_SetConfig+0x348>
 8003acc:	2302      	movs	r3, #2
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e09e      	b.n	8003c10 <UART_SetConfig+0x348>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e09b      	b.n	8003c10 <UART_SetConfig+0x348>
 8003ad8:	2308      	movs	r3, #8
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e098      	b.n	8003c10 <UART_SetConfig+0x348>
 8003ade:	2310      	movs	r3, #16
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e095      	b.n	8003c10 <UART_SetConfig+0x348>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba8 <UART_SetConfig+0x2e0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d125      	bne.n	8003b3a <UART_SetConfig+0x272>
 8003aee:	4b29      	ldr	r3, [pc, #164]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003af8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003afc:	d017      	beq.n	8003b2e <UART_SetConfig+0x266>
 8003afe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b02:	d817      	bhi.n	8003b34 <UART_SetConfig+0x26c>
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b08:	d00b      	beq.n	8003b22 <UART_SetConfig+0x25a>
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0e:	d811      	bhi.n	8003b34 <UART_SetConfig+0x26c>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <UART_SetConfig+0x254>
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b18:	d006      	beq.n	8003b28 <UART_SetConfig+0x260>
 8003b1a:	e00b      	b.n	8003b34 <UART_SetConfig+0x26c>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e076      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b22:	2302      	movs	r3, #2
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e073      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e070      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e06d      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b34:	2310      	movs	r3, #16
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e06a      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <UART_SetConfig+0x2e4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d138      	bne.n	8003bb6 <UART_SetConfig+0x2ee>
 8003b44:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <UART_SetConfig+0x2cc>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b52:	d017      	beq.n	8003b84 <UART_SetConfig+0x2bc>
 8003b54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b58:	d82a      	bhi.n	8003bb0 <UART_SetConfig+0x2e8>
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5e:	d00b      	beq.n	8003b78 <UART_SetConfig+0x2b0>
 8003b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b64:	d824      	bhi.n	8003bb0 <UART_SetConfig+0x2e8>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <UART_SetConfig+0x2aa>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6e:	d006      	beq.n	8003b7e <UART_SetConfig+0x2b6>
 8003b70:	e01e      	b.n	8003bb0 <UART_SetConfig+0x2e8>
 8003b72:	2300      	movs	r3, #0
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e04b      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e048      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e045      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b84:	2308      	movs	r3, #8
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e042      	b.n	8003c10 <UART_SetConfig+0x348>
 8003b8a:	bf00      	nop
 8003b8c:	efff69f3 	.word	0xefff69f3
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40004400 	.word	0x40004400
 8003b9c:	40004800 	.word	0x40004800
 8003ba0:	40004c00 	.word	0x40004c00
 8003ba4:	40005000 	.word	0x40005000
 8003ba8:	40011400 	.word	0x40011400
 8003bac:	40007800 	.word	0x40007800
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e02c      	b.n	8003c10 <UART_SetConfig+0x348>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a72      	ldr	r2, [pc, #456]	@ (8003d84 <UART_SetConfig+0x4bc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d125      	bne.n	8003c0c <UART_SetConfig+0x344>
 8003bc0:	4b71      	ldr	r3, [pc, #452]	@ (8003d88 <UART_SetConfig+0x4c0>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003bca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003bce:	d017      	beq.n	8003c00 <UART_SetConfig+0x338>
 8003bd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003bd4:	d817      	bhi.n	8003c06 <UART_SetConfig+0x33e>
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bda:	d00b      	beq.n	8003bf4 <UART_SetConfig+0x32c>
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be0:	d811      	bhi.n	8003c06 <UART_SetConfig+0x33e>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <UART_SetConfig+0x326>
 8003be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bea:	d006      	beq.n	8003bfa <UART_SetConfig+0x332>
 8003bec:	e00b      	b.n	8003c06 <UART_SetConfig+0x33e>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e00d      	b.n	8003c10 <UART_SetConfig+0x348>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e00a      	b.n	8003c10 <UART_SetConfig+0x348>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e007      	b.n	8003c10 <UART_SetConfig+0x348>
 8003c00:	2308      	movs	r3, #8
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e004      	b.n	8003c10 <UART_SetConfig+0x348>
 8003c06:	2310      	movs	r3, #16
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e001      	b.n	8003c10 <UART_SetConfig+0x348>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c18:	d15b      	bne.n	8003cd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d828      	bhi.n	8003c72 <UART_SetConfig+0x3aa>
 8003c20:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <UART_SetConfig+0x360>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c73 	.word	0x08003c73
 8003c38:	08003c63 	.word	0x08003c63
 8003c3c:	08003c73 	.word	0x08003c73
 8003c40:	08003c73 	.word	0x08003c73
 8003c44:	08003c73 	.word	0x08003c73
 8003c48:	08003c6b 	.word	0x08003c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe fe30 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8003c50:	61b8      	str	r0, [r7, #24]
        break;
 8003c52:	e013      	b.n	8003c7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c54:	f7fe fe40 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003c58:	61b8      	str	r0, [r7, #24]
        break;
 8003c5a:	e00f      	b.n	8003c7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d8c <UART_SetConfig+0x4c4>)
 8003c5e:	61bb      	str	r3, [r7, #24]
        break;
 8003c60:	e00c      	b.n	8003c7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c62:	f7fe fd53 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8003c66:	61b8      	str	r0, [r7, #24]
        break;
 8003c68:	e008      	b.n	8003c7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e004      	b.n	8003c7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	77bb      	strb	r3, [r7, #30]
        break;
 8003c7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d074      	beq.n	8003d6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	005a      	lsls	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	d916      	bls.n	8003ccc <UART_SetConfig+0x404>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d212      	bcs.n	8003ccc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	89fb      	ldrh	r3, [r7, #14]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	89fa      	ldrh	r2, [r7, #14]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	e04f      	b.n	8003d6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77bb      	strb	r3, [r7, #30]
 8003cd0:	e04c      	b.n	8003d6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cd2:	7ffb      	ldrb	r3, [r7, #31]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d828      	bhi.n	8003d2a <UART_SetConfig+0x462>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <UART_SetConfig+0x418>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d1b 	.word	0x08003d1b
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d2b 	.word	0x08003d2b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fdd4 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8003d08:	61b8      	str	r0, [r7, #24]
        break;
 8003d0a:	e013      	b.n	8003d34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7fe fde4 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003d10:	61b8      	str	r0, [r7, #24]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	@ (8003d8c <UART_SetConfig+0x4c4>)
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fcf7 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8003d1e:	61b8      	str	r0, [r7, #24]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77bb      	strb	r3, [r7, #30]
        break;
 8003d32:	bf00      	nop
    }

    if (pclk != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	085a      	lsrs	r2, r3, #1
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	441a      	add	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b0f      	cmp	r3, #15
 8003d52:	d909      	bls.n	8003d68 <UART_SetConfig+0x4a0>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5a:	d205      	bcs.n	8003d68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	e001      	b.n	8003d6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d78:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40007c00 	.word	0x40007c00
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	00f42400 	.word	0x00f42400

08003d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e8e:	d10a      	bne.n	8003ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ee4:	f7fd f8ea 	bl	80010bc <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d10e      	bne.n	8003f16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f831 	bl	8003f6e <UART_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e027      	b.n	8003f66 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d10e      	bne.n	8003f42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f81b 	bl	8003f6e <UART_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e011      	b.n	8003f66 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b09c      	sub	sp, #112	@ 0x70
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7e:	e0a7      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	f000 80a3 	beq.w	80040d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fd f897 	bl	80010bc <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d13f      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003fc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e6      	bne.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ff2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003ff4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e068      	b.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d050      	beq.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403c:	d148      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004046:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800405c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
 8004068:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800406c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	613b      	str	r3, [r7, #16]
   return(result);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800409a:	623a      	str	r2, [r7, #32]
 800409c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e010      	b.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4013      	ands	r3, r2
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	429a      	cmp	r2, r3
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f43f af48 	beq.w	8003f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3770      	adds	r7, #112	@ 0x70
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b096      	sub	sp, #88	@ 0x58
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	88fa      	ldrh	r2, [r7, #6]
 8004114:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2222      	movs	r2, #34	@ 0x22
 8004124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412c:	2b00      	cmp	r3, #0
 800412e:	d028      	beq.n	8004182 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004134:	4a3e      	ldr	r2, [pc, #248]	@ (8004230 <UART_Start_Receive_DMA+0x134>)
 8004136:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413c:	4a3d      	ldr	r2, [pc, #244]	@ (8004234 <UART_Start_Receive_DMA+0x138>)
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004144:	4a3c      	ldr	r2, [pc, #240]	@ (8004238 <UART_Start_Receive_DMA+0x13c>)
 8004146:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414c:	2200      	movs	r2, #0
 800414e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3324      	adds	r3, #36	@ 0x24
 800415a:	4619      	mov	r1, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	461a      	mov	r2, r3
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	f7fd fa16 	bl	8001594 <HAL_DMA_Start_IT>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2210      	movs	r2, #16
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e051      	b.n	8004226 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800419e:	657b      	str	r3, [r7, #84]	@ 0x54
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80041b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80041dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004210:	623a      	str	r2, [r7, #32]
 8004212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	61bb      	str	r3, [r7, #24]
   return(result);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e5      	bne.n	80041f0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3758      	adds	r7, #88	@ 0x58
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	08004351 	.word	0x08004351
 8004234:	08004479 	.word	0x08004479
 8004238:	080044b7 	.word	0x080044b7

0800423c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	60bb      	str	r3, [r7, #8]
   return(result);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e6      	bne.n	8004244 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800427c:	bf00      	nop
 800427e:	3724      	adds	r7, #36	@ 0x24
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b095      	sub	sp, #84	@ 0x54
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80042b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e6      	bne.n	8004290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3308      	adds	r3, #8
 80042e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e5      	bne.n	80042c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d118      	bne.n	8004330 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	60bb      	str	r3, [r7, #8]
   return(result);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 0310 	bic.w	r3, r3, #16
 8004312:	647b      	str	r3, [r7, #68]	@ 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	613b      	str	r3, [r7, #16]
   return(result);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004344:	bf00      	nop
 8004346:	3754      	adds	r7, #84	@ 0x54
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b09c      	sub	sp, #112	@ 0x70
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004366:	d071      	beq.n	800444c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8004368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436a:	2200      	movs	r2, #0
 800436c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800437e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004384:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800438e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004390:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800439c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80043c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	623b      	str	r3, [r7, #32]
   return(result);
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800440a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	2b01      	cmp	r3, #1
 8004418:	d118      	bne.n	800444c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	60fb      	str	r3, [r7, #12]
   return(result);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0310 	bic.w	r3, r3, #16
 800442e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	617b      	str	r3, [r7, #20]
   return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e6      	bne.n	800441a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444e:	2200      	movs	r2, #0
 8004450:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004460:	4619      	mov	r1, r3
 8004462:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004464:	f7fc fd1a 	bl	8000e9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004468:	e002      	b.n	8004470 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800446a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800446c:	f7ff fa04 	bl	8003878 <HAL_UART_RxCpltCallback>
}
 8004470:	bf00      	nop
 8004472:	3770      	adds	r7, #112	@ 0x70
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004484:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004490:	2b01      	cmp	r3, #1
 8004492:	d109      	bne.n	80044a8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7fc fcfb 	bl	8000e9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044a6:	e002      	b.n	80044ae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff f9ef 	bl	800388c <HAL_UART_RxHalfCpltCallback>
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d109      	bne.n	80044f4 <UART_DMAError+0x3e>
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b21      	cmp	r3, #33	@ 0x21
 80044e4:	d106      	bne.n	80044f4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f7ff fea4 	bl	800423c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fe:	2b40      	cmp	r3, #64	@ 0x40
 8004500:	d109      	bne.n	8004516 <UART_DMAError+0x60>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b22      	cmp	r3, #34	@ 0x22
 8004506:	d106      	bne.n	8004516 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	f7ff feb9 	bl	8004288 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451c:	f043 0210 	orr.w	r2, r3, #16
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f7ff f9ba 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452c:	bf00      	nop
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff f9a4 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b08f      	sub	sp, #60	@ 0x3c
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800456c:	2b21      	cmp	r3, #33	@ 0x21
 800456e:	d14c      	bne.n	800460a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d132      	bne.n	80045e2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	61fb      	str	r3, [r7, #28]
   return(result);
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004590:	637b      	str	r3, [r7, #52]	@ 0x34
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e6      	bne.n	800457c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80045e0:	e013      	b.n	800460a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800460a:	bf00      	nop
 800460c:	373c      	adds	r7, #60	@ 0x3c
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b091      	sub	sp, #68	@ 0x44
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004622:	2b21      	cmp	r3, #33	@ 0x21
 8004624:	d151      	bne.n	80046ca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d132      	bne.n	8004698 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	623b      	str	r3, [r7, #32]
   return(result);
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	633b      	str	r3, [r7, #48]	@ 0x30
 8004652:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e6      	bne.n	8004632 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	60fb      	str	r3, [r7, #12]
   return(result);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	69b9      	ldr	r1, [r7, #24]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	617b      	str	r3, [r7, #20]
   return(result);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e6      	bne.n	8004664 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004696:	e018      	b.n	80046ca <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800469e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	1c9a      	adds	r2, r3, #2
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80046ca:	bf00      	nop
 80046cc:	3744      	adds	r7, #68	@ 0x44
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fc fc1d 	bl	8000f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004722:	bf00      	nop
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b08c      	sub	sp, #48	@ 0x30
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800473e:	2b20      	cmp	r3, #32
 8004740:	d142      	bne.n	80047c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e03b      	b.n	80047ca <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	461a      	mov	r2, r3
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fcc9 	bl	80040fc <UART_Start_Receive_DMA>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004774:	2b00      	cmp	r3, #0
 8004776:	d124      	bne.n	80047c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477c:	2b01      	cmp	r3, #1
 800477e:	d11d      	bne.n	80047bc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2210      	movs	r2, #16
 8004786:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f043 0310 	orr.w	r3, r3, #16
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6a39      	ldr	r1, [r7, #32]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e6      	bne.n	8004788 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80047ba:	e002      	b.n	80047c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80047c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047c6:	e000      	b.n	80047ca <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3730      	adds	r7, #48	@ 0x30
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <atoi>:
 80047d2:	220a      	movs	r2, #10
 80047d4:	2100      	movs	r1, #0
 80047d6:	f000 b87b 	b.w	80048d0 <strtol>
	...

080047dc <_strtol_l.constprop.0>:
 80047dc:	2b24      	cmp	r3, #36	@ 0x24
 80047de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e2:	4686      	mov	lr, r0
 80047e4:	4690      	mov	r8, r2
 80047e6:	d801      	bhi.n	80047ec <_strtol_l.constprop.0+0x10>
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d106      	bne.n	80047fa <_strtol_l.constprop.0+0x1e>
 80047ec:	f000 f8ac 	bl	8004948 <__errno>
 80047f0:	2316      	movs	r3, #22
 80047f2:	6003      	str	r3, [r0, #0]
 80047f4:	2000      	movs	r0, #0
 80047f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fa:	4834      	ldr	r0, [pc, #208]	@ (80048cc <_strtol_l.constprop.0+0xf0>)
 80047fc:	460d      	mov	r5, r1
 80047fe:	462a      	mov	r2, r5
 8004800:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004804:	5d06      	ldrb	r6, [r0, r4]
 8004806:	f016 0608 	ands.w	r6, r6, #8
 800480a:	d1f8      	bne.n	80047fe <_strtol_l.constprop.0+0x22>
 800480c:	2c2d      	cmp	r4, #45	@ 0x2d
 800480e:	d12d      	bne.n	800486c <_strtol_l.constprop.0+0x90>
 8004810:	782c      	ldrb	r4, [r5, #0]
 8004812:	2601      	movs	r6, #1
 8004814:	1c95      	adds	r5, r2, #2
 8004816:	f033 0210 	bics.w	r2, r3, #16
 800481a:	d109      	bne.n	8004830 <_strtol_l.constprop.0+0x54>
 800481c:	2c30      	cmp	r4, #48	@ 0x30
 800481e:	d12a      	bne.n	8004876 <_strtol_l.constprop.0+0x9a>
 8004820:	782a      	ldrb	r2, [r5, #0]
 8004822:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004826:	2a58      	cmp	r2, #88	@ 0x58
 8004828:	d125      	bne.n	8004876 <_strtol_l.constprop.0+0x9a>
 800482a:	786c      	ldrb	r4, [r5, #1]
 800482c:	2310      	movs	r3, #16
 800482e:	3502      	adds	r5, #2
 8004830:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004834:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004838:	2200      	movs	r2, #0
 800483a:	fbbc f9f3 	udiv	r9, ip, r3
 800483e:	4610      	mov	r0, r2
 8004840:	fb03 ca19 	mls	sl, r3, r9, ip
 8004844:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004848:	2f09      	cmp	r7, #9
 800484a:	d81b      	bhi.n	8004884 <_strtol_l.constprop.0+0xa8>
 800484c:	463c      	mov	r4, r7
 800484e:	42a3      	cmp	r3, r4
 8004850:	dd27      	ble.n	80048a2 <_strtol_l.constprop.0+0xc6>
 8004852:	1c57      	adds	r7, r2, #1
 8004854:	d007      	beq.n	8004866 <_strtol_l.constprop.0+0x8a>
 8004856:	4581      	cmp	r9, r0
 8004858:	d320      	bcc.n	800489c <_strtol_l.constprop.0+0xc0>
 800485a:	d101      	bne.n	8004860 <_strtol_l.constprop.0+0x84>
 800485c:	45a2      	cmp	sl, r4
 800485e:	db1d      	blt.n	800489c <_strtol_l.constprop.0+0xc0>
 8004860:	fb00 4003 	mla	r0, r0, r3, r4
 8004864:	2201      	movs	r2, #1
 8004866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800486a:	e7eb      	b.n	8004844 <_strtol_l.constprop.0+0x68>
 800486c:	2c2b      	cmp	r4, #43	@ 0x2b
 800486e:	bf04      	itt	eq
 8004870:	782c      	ldrbeq	r4, [r5, #0]
 8004872:	1c95      	addeq	r5, r2, #2
 8004874:	e7cf      	b.n	8004816 <_strtol_l.constprop.0+0x3a>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1da      	bne.n	8004830 <_strtol_l.constprop.0+0x54>
 800487a:	2c30      	cmp	r4, #48	@ 0x30
 800487c:	bf0c      	ite	eq
 800487e:	2308      	moveq	r3, #8
 8004880:	230a      	movne	r3, #10
 8004882:	e7d5      	b.n	8004830 <_strtol_l.constprop.0+0x54>
 8004884:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004888:	2f19      	cmp	r7, #25
 800488a:	d801      	bhi.n	8004890 <_strtol_l.constprop.0+0xb4>
 800488c:	3c37      	subs	r4, #55	@ 0x37
 800488e:	e7de      	b.n	800484e <_strtol_l.constprop.0+0x72>
 8004890:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004894:	2f19      	cmp	r7, #25
 8004896:	d804      	bhi.n	80048a2 <_strtol_l.constprop.0+0xc6>
 8004898:	3c57      	subs	r4, #87	@ 0x57
 800489a:	e7d8      	b.n	800484e <_strtol_l.constprop.0+0x72>
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	e7e1      	b.n	8004866 <_strtol_l.constprop.0+0x8a>
 80048a2:	1c53      	adds	r3, r2, #1
 80048a4:	d108      	bne.n	80048b8 <_strtol_l.constprop.0+0xdc>
 80048a6:	2322      	movs	r3, #34	@ 0x22
 80048a8:	f8ce 3000 	str.w	r3, [lr]
 80048ac:	4660      	mov	r0, ip
 80048ae:	f1b8 0f00 	cmp.w	r8, #0
 80048b2:	d0a0      	beq.n	80047f6 <_strtol_l.constprop.0+0x1a>
 80048b4:	1e69      	subs	r1, r5, #1
 80048b6:	e006      	b.n	80048c6 <_strtol_l.constprop.0+0xea>
 80048b8:	b106      	cbz	r6, 80048bc <_strtol_l.constprop.0+0xe0>
 80048ba:	4240      	negs	r0, r0
 80048bc:	f1b8 0f00 	cmp.w	r8, #0
 80048c0:	d099      	beq.n	80047f6 <_strtol_l.constprop.0+0x1a>
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	d1f6      	bne.n	80048b4 <_strtol_l.constprop.0+0xd8>
 80048c6:	f8c8 1000 	str.w	r1, [r8]
 80048ca:	e794      	b.n	80047f6 <_strtol_l.constprop.0+0x1a>
 80048cc:	08004b19 	.word	0x08004b19

080048d0 <strtol>:
 80048d0:	4613      	mov	r3, r2
 80048d2:	460a      	mov	r2, r1
 80048d4:	4601      	mov	r1, r0
 80048d6:	4802      	ldr	r0, [pc, #8]	@ (80048e0 <strtol+0x10>)
 80048d8:	6800      	ldr	r0, [r0, #0]
 80048da:	f7ff bf7f 	b.w	80047dc <_strtol_l.constprop.0>
 80048de:	bf00      	nop
 80048e0:	2000000c 	.word	0x2000000c

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <strncpy>:
 80048f4:	b510      	push	{r4, lr}
 80048f6:	3901      	subs	r1, #1
 80048f8:	4603      	mov	r3, r0
 80048fa:	b132      	cbz	r2, 800490a <strncpy+0x16>
 80048fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004900:	f803 4b01 	strb.w	r4, [r3], #1
 8004904:	3a01      	subs	r2, #1
 8004906:	2c00      	cmp	r4, #0
 8004908:	d1f7      	bne.n	80048fa <strncpy+0x6>
 800490a:	441a      	add	r2, r3
 800490c:	2100      	movs	r1, #0
 800490e:	4293      	cmp	r3, r2
 8004910:	d100      	bne.n	8004914 <strncpy+0x20>
 8004912:	bd10      	pop	{r4, pc}
 8004914:	f803 1b01 	strb.w	r1, [r3], #1
 8004918:	e7f9      	b.n	800490e <strncpy+0x1a>

0800491a <strstr>:
 800491a:	780a      	ldrb	r2, [r1, #0]
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	b96a      	cbnz	r2, 800493c <strstr+0x22>
 8004920:	bd70      	pop	{r4, r5, r6, pc}
 8004922:	429a      	cmp	r2, r3
 8004924:	d109      	bne.n	800493a <strstr+0x20>
 8004926:	460c      	mov	r4, r1
 8004928:	4605      	mov	r5, r0
 800492a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f6      	beq.n	8004920 <strstr+0x6>
 8004932:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004936:	429e      	cmp	r6, r3
 8004938:	d0f7      	beq.n	800492a <strstr+0x10>
 800493a:	3001      	adds	r0, #1
 800493c:	7803      	ldrb	r3, [r0, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ef      	bne.n	8004922 <strstr+0x8>
 8004942:	4618      	mov	r0, r3
 8004944:	e7ec      	b.n	8004920 <strstr+0x6>
	...

08004948 <__errno>:
 8004948:	4b01      	ldr	r3, [pc, #4]	@ (8004950 <__errno+0x8>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	2000000c 	.word	0x2000000c

08004954 <__libc_init_array>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	4d0d      	ldr	r5, [pc, #52]	@ (800498c <__libc_init_array+0x38>)
 8004958:	4c0d      	ldr	r4, [pc, #52]	@ (8004990 <__libc_init_array+0x3c>)
 800495a:	1b64      	subs	r4, r4, r5
 800495c:	10a4      	asrs	r4, r4, #2
 800495e:	2600      	movs	r6, #0
 8004960:	42a6      	cmp	r6, r4
 8004962:	d109      	bne.n	8004978 <__libc_init_array+0x24>
 8004964:	4d0b      	ldr	r5, [pc, #44]	@ (8004994 <__libc_init_array+0x40>)
 8004966:	4c0c      	ldr	r4, [pc, #48]	@ (8004998 <__libc_init_array+0x44>)
 8004968:	f000 f826 	bl	80049b8 <_init>
 800496c:	1b64      	subs	r4, r4, r5
 800496e:	10a4      	asrs	r4, r4, #2
 8004970:	2600      	movs	r6, #0
 8004972:	42a6      	cmp	r6, r4
 8004974:	d105      	bne.n	8004982 <__libc_init_array+0x2e>
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	f855 3b04 	ldr.w	r3, [r5], #4
 800497c:	4798      	blx	r3
 800497e:	3601      	adds	r6, #1
 8004980:	e7ee      	b.n	8004960 <__libc_init_array+0xc>
 8004982:	f855 3b04 	ldr.w	r3, [r5], #4
 8004986:	4798      	blx	r3
 8004988:	3601      	adds	r6, #1
 800498a:	e7f2      	b.n	8004972 <__libc_init_array+0x1e>
 800498c:	08004c24 	.word	0x08004c24
 8004990:	08004c24 	.word	0x08004c24
 8004994:	08004c24 	.word	0x08004c24
 8004998:	08004c28 	.word	0x08004c28

0800499c <memcpy>:
 800499c:	440a      	add	r2, r1
 800499e:	4291      	cmp	r1, r2
 80049a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a4:	d100      	bne.n	80049a8 <memcpy+0xc>
 80049a6:	4770      	bx	lr
 80049a8:	b510      	push	{r4, lr}
 80049aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b2:	4291      	cmp	r1, r2
 80049b4:	d1f9      	bne.n	80049aa <memcpy+0xe>
 80049b6:	bd10      	pop	{r4, pc}

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr
