
ESP_WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e38  08003e38  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e88  08003e88  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003e90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000010  08003ea0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08003ea0  00005548  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b77a  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd2  00000000  00000000  000107b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00012590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063a  00000000  00000000  00012db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ebf  00000000  00000000  000133f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc44  00000000  00000000  0003a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0de4  00000000  00000000  00045ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136cd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000207c  00000000  00000000  00136d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00138d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003e20 	.word	0x08003e20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003e20 	.word	0x08003e20

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <AT_restart>:
	}
	return AT_PEND;
}


ATStatus AT_restart(UART_HandleTypeDef* huart4, char* output){
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	if(txCplt){
 8000542:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <AT_restart+0xc0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d002      	beq.n	8000550 <AT_restart+0x18>
		txCplt=false;
 800054a:	4b2b      	ldr	r3, [pc, #172]	@ (80005f8 <AT_restart+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit_IT(huart4, (uint8_t*)"AT+RST\r\n", 8);
 8000550:	2208      	movs	r2, #8
 8000552:	492a      	ldr	r1, [pc, #168]	@ (80005fc <AT_restart+0xc4>)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f002 f87b 	bl	8002650 <HAL_UART_Transmit_IT>
	if(rxCplt){
 800055a:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <AT_restart+0xc8>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d03b      	beq.n	80005da <AT_restart+0xa2>
		strncpy(recv,(char*)UART4_RX,strlen((char*)UART4_RX));
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <AT_restart+0xcc>)
 8000564:	681c      	ldr	r4, [r3, #0]
 8000566:	4828      	ldr	r0, [pc, #160]	@ (8000608 <AT_restart+0xd0>)
 8000568:	f7ff fe66 	bl	8000238 <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	4925      	ldr	r1, [pc, #148]	@ (8000608 <AT_restart+0xd0>)
 8000572:	4620      	mov	r0, r4
 8000574:	f003 fc1d 	bl	8003db2 <strncpy>
		memset(UART4_RX, '\0', sizeof(UART4_RX));//Clear buffer
 8000578:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800057c:	2100      	movs	r1, #0
 800057e:	4822      	ldr	r0, [pc, #136]	@ (8000608 <AT_restart+0xd0>)
 8000580:	f003 fbfd 	bl	8003d7e <memset>
		rxCplt=false;
 8000584:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <AT_restart+0xc8>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
		if(!strncmp(recv,"AT+RST\r\n\r\nOK\r\n", 14)){
 800058a:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <AT_restart+0xcc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	220e      	movs	r2, #14
 8000590:	491e      	ldr	r1, [pc, #120]	@ (800060c <AT_restart+0xd4>)
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fbfb 	bl	8003d8e <strncmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d10e      	bne.n	80005bc <AT_restart+0x84>
			memset(recv,'\0',strlen(recv));
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <AT_restart+0xcc>)
 80005a0:	681c      	ldr	r4, [r3, #0]
 80005a2:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <AT_restart+0xcc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe46 	bl	8000238 <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	4620      	mov	r0, r4
 80005b4:	f003 fbe3 	bl	8003d7e <memset>
			return AT_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	e018      	b.n	80005ee <AT_restart+0xb6>
//			memset(recv,'\0',strlen(recv));
//			return AT_OK;
//		}
		else{
			//Unexpected output
			memset(recv,'\0',strlen(recv));
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <AT_restart+0xcc>)
 80005be:	681c      	ldr	r4, [r3, #0]
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <AT_restart+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe37 	bl	8000238 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	4620      	mov	r0, r4
 80005d2:	f003 fbd4 	bl	8003d7e <memset>
			return AT_ERR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e009      	b.n	80005ee <AT_restart+0xb6>
		}
	}
	if(rxErr){
 80005da:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <AT_restart+0xd8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d004      	beq.n	80005ec <AT_restart+0xb4>
		rxErr=false;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <AT_restart+0xd8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
		return AT_ERR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <AT_restart+0xb6>
	}
	return AT_PEND;
 80005ec:	2302      	movs	r3, #2
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	08003e4c 	.word	0x08003e4c
 8000600:	2000042c 	.word	0x2000042c
 8000604:	20000430 	.word	0x20000430
 8000608:	2000002c 	.word	0x2000002c
 800060c:	08003e58 	.word	0x08003e58
 8000610:	2000042d 	.word	0x2000042d

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800061c:	f000 f902 	bl	8000824 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fabf 	bl	8000ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f81e 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8d8 	bl	80007dc <MX_GPIO_Init>
  MX_UART4_Init();
 800062c:	f000 f876 	bl	800071c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f8a4 	bl	800077c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, (uint8_t*)UART4_RX, 10);
 8000634:	220a      	movs	r2, #10
 8000636:	4909      	ldr	r1, [pc, #36]	@ (800065c <main+0x48>)
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <main+0x4c>)
 800063a:	f002 f867 	bl	800270c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = AT_restart(&huart4, output);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4807      	ldr	r0, [pc, #28]	@ (8000660 <main+0x4c>)
 8000644:	f7ff ff78 	bl	8000538 <AT_restart>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
	  HAL_Delay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000652:	f000 fb03 	bl	8000c5c <HAL_Delay>
	  test = AT_restart(&huart4, output);
 8000656:	bf00      	nop
 8000658:	e7f1      	b.n	800063e <main+0x2a>
 800065a:	bf00      	nop
 800065c:	2000002c 	.word	0x2000002c
 8000660:	20000434 	.word	0x20000434

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fb83 	bl	8003d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xb0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xb0>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xb0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SystemClock_Config+0xb4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <SystemClock_Config+0xb4>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <SystemClock_Config+0xb4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 feb3 	bl	800143c <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006dc:	f000 f8ce 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f94c 	bl	8001998 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000706:	f000 f8b9 	bl	800087c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_UART4_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <MX_UART4_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_UART4_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_UART4_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_UART4_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_UART4_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_UART4_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_UART4_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_UART4_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_UART4_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_UART4_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_UART4_Init+0x58>)
 8000760:	f001 ff28 	bl	80025b4 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f887 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000434 	.word	0x20000434
 8000778:	40004c00 	.word	0x40004c00

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	@ (80007d8 <MX_USART3_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007c0:	f001 fef8 	bl	80025b4 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f857 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200004bc 	.word	0x200004bc
 80007d8:	40004800 	.word	0x40004800

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <MX_GPIO_Init+0x44>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_GPIO_Init+0x44>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000836:	f000 fb47 	bl	8000ec8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800083a:	2301      	movs	r3, #1
 800083c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800083e:	2300      	movs	r3, #0
 8000840:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000846:	231f      	movs	r3, #31
 8000848:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800084a:	2387      	movs	r3, #135	@ 0x87
 800084c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800084e:	2300      	movs	r3, #0
 8000850:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000852:	2300      	movs	r3, #0
 8000854:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000856:	2301      	movs	r3, #1
 8000858:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800085a:	2301      	movs	r3, #1
 800085c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000866:	463b      	mov	r3, r7
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fb65 	bl	8000f38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800086e:	2004      	movs	r0, #4
 8000870:	f000 fb42 	bl	8000ef8 <HAL_MPU_Enable>

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x44>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x44>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x44>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x44>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x44>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0b0      	sub	sp, #192	@ 0xc0
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	2290      	movs	r2, #144	@ 0x90
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fa44 	bl	8003d7e <memset>
  if(huart->Instance==UART4)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <HAL_UART_MspInit+0x148>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d145      	bne.n	800098c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000904:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000906:	2300      	movs	r3, #0
 8000908:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fa28 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800091a:	f7ff ffaf 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800091e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a3e      	ldr	r2, [pc, #248]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 8000924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b39      	ldr	r3, [pc, #228]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a38      	ldr	r2, [pc, #224]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800094e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000968:	2308      	movs	r3, #8
 800096a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000972:	4619      	mov	r1, r3
 8000974:	482a      	ldr	r0, [pc, #168]	@ (8000a20 <HAL_UART_MspInit+0x150>)
 8000976:	f000 fbb5 	bl	80010e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2034      	movs	r0, #52	@ 0x34
 8000980:	f000 fa6b 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000984:	2034      	movs	r0, #52	@ 0x34
 8000986:	f000 fa84 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800098a:	e041      	b.n	8000a10 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a24      	ldr	r2, [pc, #144]	@ (8000a24 <HAL_UART_MspInit+0x154>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d13c      	bne.n	8000a10 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000996:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800099a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f9dd 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80009b0:	f7ff ff64 	bl	800087c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	4a18      	ldr	r2, [pc, #96]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 80009ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009be:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d0:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <HAL_UART_MspInit+0x14c>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009fe:	2307      	movs	r3, #7
 8000a00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <HAL_UART_MspInit+0x158>)
 8000a0c:	f000 fb6a 	bl	80010e4 <HAL_GPIO_Init>
}
 8000a10:	bf00      	nop
 8000a12:	37c0      	adds	r7, #192	@ 0xc0
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40004c00 	.word	0x40004c00
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 f8cb 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <UART4_IRQHandler+0x10>)
 8000a92:	f001 fe7f 	bl	8002794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000434 	.word	0x20000434

08000aa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	//cp buffer, clear rx
	rxErr=false;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x20>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	rxCplt=true;
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x24>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	2000042d 	.word	0x2000042d
 8000ac4:	2000042c 	.word	0x2000042c

08000ac8 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
//	indx = Size;//Size=how many bytes was recieved when this was called
	rxErr=false;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_UARTEx_RxEventCallback+0x24>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	rxCplt=true;
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_UARTEx_RxEventCallback+0x28>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
//	HAL_UARTEx_ReceiveToIdle_IT(&huart4, UART4_RX, sizeof(UART4_RX));
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	2000042d 	.word	0x2000042d
 8000af0:	2000042c 	.word	0x2000042c

08000af4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	txCplt=true;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <HAL_UART_TxCpltCallback+0x28>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	rxErr=false;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <HAL_UART_TxCpltCallback+0x2c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_IT(&huart4, UART4_RX, 1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, UART4_RX, sizeof(UART4_RX));
 8000b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0c:	4905      	ldr	r1, [pc, #20]	@ (8000b24 <HAL_UART_TxCpltCallback+0x30>)
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <HAL_UART_TxCpltCallback+0x34>)
 8000b10:	f003 f8e1 	bl	8003cd6 <HAL_UARTEx_ReceiveToIdle_IT>
	//Immedietely after the AT command is sent, start listening for a response.
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	2000042d 	.word	0x2000042d
 8000b24:	2000002c 	.word	0x2000002c
 8000b28:	20000434 	.word	0x20000434

08000b2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	@ (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 f92b 	bl	8003dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd47 	bl	8000614 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	08003e90 	.word	0x08003e90
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20000548 	.word	0x20000548

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>

08000ba2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 f94c 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bac:	200f      	movs	r0, #15
 8000bae:	f000 f805 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb2:	f7ff fe69 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f967 	bl	8000eae <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f000 f92f 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000004 	.word	0x20000004
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000544 	.word	0x20000544

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000544 	.word	0x20000544

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000000c 	.word	0x2000000c

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00
 8000ce8:	05fa0000 	.word	0x05fa0000

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	@ (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	@ (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	@ 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ecc:	f3bf 8f5f 	dmb	sy
}
 8000ed0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <HAL_MPU_Disable+0x28>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_MPU_Disable+0x28>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000edc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ede:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <HAL_MPU_Disable+0x2c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	e000ed90 	.word	0xe000ed90

08000ef8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f00:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <HAL_MPU_Enable+0x38>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_MPU_Enable+0x3c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	4a09      	ldr	r2, [pc, #36]	@ (8000f34 <HAL_MPU_Enable+0x3c>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f16:	f3bf 8f4f 	dsb	sy
}
 8000f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1c:	f3bf 8f6f 	isb	sy
}
 8000f20:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed90 	.word	0xe000ed90
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	785a      	ldrb	r2, [r3, #1]
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000f46:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d029      	beq.n	8000fa4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000f50:	4a1a      	ldr	r2, [pc, #104]	@ (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7b1b      	ldrb	r3, [r3, #12]
 8000f5c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7adb      	ldrb	r3, [r3, #11]
 8000f62:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a9b      	ldrb	r3, [r3, #10]
 8000f6a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7b5b      	ldrb	r3, [r3, #13]
 8000f72:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7b9b      	ldrb	r3, [r3, #14]
 8000f7a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7bdb      	ldrb	r3, [r3, #15]
 8000f82:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7a5b      	ldrb	r3, [r3, #9]
 8000f8a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7a1b      	ldrb	r3, [r3, #8]
 8000f92:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f94:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f9e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fa0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000fa2:	e005      	b.n	8000fb0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <HAL_MPU_ConfigRegion+0x84>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed90 	.word	0xe000ed90

08000fc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fce:	f7ff fe39 	bl	8000c44 <HAL_GetTick>
 8000fd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d008      	beq.n	8000ff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2280      	movs	r2, #128	@ 0x80
 8000fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e052      	b.n	8001098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0216 	bic.w	r2, r2, #22
 8001000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	695a      	ldr	r2, [r3, #20]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <HAL_DMA_Abort+0x62>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0208 	bic.w	r2, r2, #8
 8001030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001042:	e013      	b.n	800106c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001044:	f7ff fdfe 	bl	8000c44 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b05      	cmp	r3, #5
 8001050:	d90c      	bls.n	800106c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2203      	movs	r2, #3
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e015      	b.n	8001098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e4      	bne.n	8001044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800107e:	223f      	movs	r2, #63	@ 0x3f
 8001080:	409a      	lsls	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d004      	beq.n	80010be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00c      	b.n	80010d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e175      	b.n	80013f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8164 	bne.w	80013ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x56>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80be 	beq.w	80013ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_GPIO_Init+0x324>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a65      	ldr	r2, [pc, #404]	@ (8001408 <HAL_GPIO_Init+0x324>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <HAL_GPIO_Init+0x324>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001286:	4a61      	ldr	r2, [pc, #388]	@ (800140c <HAL_GPIO_Init+0x328>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	@ (8001410 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d037      	beq.n	8001322 <HAL_GPIO_Init+0x23e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a57      	ldr	r2, [pc, #348]	@ (8001414 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d031      	beq.n	800131e <HAL_GPIO_Init+0x23a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a56      	ldr	r2, [pc, #344]	@ (8001418 <HAL_GPIO_Init+0x334>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x236>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a55      	ldr	r2, [pc, #340]	@ (800141c <HAL_GPIO_Init+0x338>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x232>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a54      	ldr	r2, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x33c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x22e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a53      	ldr	r2, [pc, #332]	@ (8001424 <HAL_GPIO_Init+0x340>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x22a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x344>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x226>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a51      	ldr	r2, [pc, #324]	@ (800142c <HAL_GPIO_Init+0x348>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x222>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a50      	ldr	r2, [pc, #320]	@ (8001430 <HAL_GPIO_Init+0x34c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x21e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001434 <HAL_GPIO_Init+0x350>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x21a>
 80012fa:	2309      	movs	r3, #9
 80012fc:	e012      	b.n	8001324 <HAL_GPIO_Init+0x240>
 80012fe:	230a      	movs	r3, #10
 8001300:	e010      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001302:	2308      	movs	r3, #8
 8001304:	e00e      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001306:	2307      	movs	r3, #7
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800130a:	2306      	movs	r3, #6
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	@ (800140c <HAL_GPIO_Init+0x328>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <HAL_GPIO_Init+0x354>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a34      	ldr	r2, [pc, #208]	@ (8001438 <HAL_GPIO_Init+0x354>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b32      	ldr	r3, [pc, #200]	@ (8001438 <HAL_GPIO_Init+0x354>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a29      	ldr	r2, [pc, #164]	@ (8001438 <HAL_GPIO_Init+0x354>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <HAL_GPIO_Init+0x354>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <HAL_GPIO_Init+0x354>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_GPIO_Init+0x354>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_GPIO_Init+0x354>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae86 	bls.w	8001104 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40021c00 	.word	0x40021c00
 8001430:	40022000 	.word	0x40022000
 8001434:	40022400 	.word	0x40022400
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e29b      	b.n	800198a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8087 	beq.w	800156e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001460:	4b96      	ldr	r3, [pc, #600]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00c      	beq.n	8001486 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146c:	4b93      	ldr	r3, [pc, #588]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d112      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
 8001478:	4b90      	ldr	r3, [pc, #576]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001484:	d10b      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	4b8d      	ldr	r3, [pc, #564]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06c      	beq.n	800156c <HAL_RCC_OscConfig+0x130>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d168      	bne.n	800156c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e275      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x7a>
 80014a8:	4b84      	ldr	r3, [pc, #528]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a83      	ldr	r2, [pc, #524]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x9c>
 80014be:	4b7f      	ldr	r3, [pc, #508]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a7e      	ldr	r2, [pc, #504]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7b      	ldr	r2, [pc, #492]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xc0>
 80014e2:	4b76      	ldr	r3, [pc, #472]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a75      	ldr	r2, [pc, #468]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b73      	ldr	r3, [pc, #460]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a72      	ldr	r2, [pc, #456]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014fc:	4b6f      	ldr	r3, [pc, #444]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6e      	ldr	r2, [pc, #440]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b6c      	ldr	r3, [pc, #432]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6b      	ldr	r2, [pc, #428]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb92 	bl	8000c44 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fb8e 	bl	8000c44 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e229      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b61      	ldr	r3, [pc, #388]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb7e 	bl	8000c44 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fb7a 	bl	8000c44 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e215      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b57      	ldr	r3, [pc, #348]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x110>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d069      	beq.n	800164e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157a:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x190>
 8001592:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1e9      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	493d      	ldr	r1, [pc, #244]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e040      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a38      	ldr	r2, [pc, #224]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb30 	bl	8000c44 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fb2c 	bl	8000c44 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1c7      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4929      	ldr	r1, [pc, #164]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
 800161a:	e018      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb0c 	bl	8000c44 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fb08 	bl	8000c44 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1a3      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d038      	beq.n	80016cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d019      	beq.n	8001696 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fae9 	bl	8000c44 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff fae5 	bl	8000c44 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e180      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800168a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x23a>
 8001694:	e01a      	b.n	80016cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800169a:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff facf 	bl	8000c44 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff facb 	bl	8000c44 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d903      	bls.n	80016c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e166      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
 80016bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4b92      	ldr	r3, [pc, #584]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a4 	beq.w	8001822 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b8c      	ldr	r3, [pc, #560]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b89      	ldr	r3, [pc, #548]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a88      	ldr	r2, [pc, #544]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b86      	ldr	r3, [pc, #536]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4b83      	ldr	r3, [pc, #524]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800170e:	4b80      	ldr	r3, [pc, #512]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7f      	ldr	r2, [pc, #508]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fa93 	bl	8000c44 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fa8f 	bl	8000c44 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	@ 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e12a      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b76      	ldr	r3, [pc, #472]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x31a>
 8001748:	4b70      	ldr	r3, [pc, #448]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a6f      	ldr	r2, [pc, #444]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x33c>
 800175e:	4b6b      	ldr	r3, [pc, #428]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	4a6a      	ldr	r2, [pc, #424]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	@ 0x70
 800176a:	4b68      	ldr	r3, [pc, #416]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a67      	ldr	r2, [pc, #412]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x35e>
 8001780:	4b62      	ldr	r3, [pc, #392]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001784:	4a61      	ldr	r2, [pc, #388]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6713      	str	r3, [r2, #112]	@ 0x70
 800178c:	4b5f      	ldr	r3, [pc, #380]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a5e      	ldr	r2, [pc, #376]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
 800179a:	4b5c      	ldr	r3, [pc, #368]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	4a5b      	ldr	r2, [pc, #364]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a6:	4b59      	ldr	r3, [pc, #356]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a58      	ldr	r2, [pc, #352]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa43 	bl	8000c44 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fa3f 	bl	8000c44 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0d8      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b4c      	ldr	r3, [pc, #304]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x386>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fa2d 	bl	8000c44 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fa29 	bl	8000c44 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0c2      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a3c      	ldr	r2, [pc, #240]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80ae 	beq.w	8001988 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b37      	ldr	r3, [pc, #220]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d06d      	beq.n	8001914 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d14b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b32      	ldr	r3, [pc, #200]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a31      	ldr	r2, [pc, #196]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f9fa 	bl	8000c44 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f9f6 	bl	8000c44 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e091      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	4b29      	ldr	r3, [pc, #164]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	071b      	lsls	r3, r3, #28
 800189e:	491b      	ldr	r1, [pc, #108]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a18      	ldr	r2, [pc, #96]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f9c8 	bl	8000c44 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f9c4 	bl	8000c44 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e05f      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x47c>
 80018d6:	e057      	b.n	8001988 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff f9ae 	bl	8000c44 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f9aa 	bl	8000c44 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e045      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x4b0>
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x54c>
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <HAL_RCC_OscConfig+0x558>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d030      	beq.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d129      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d122      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800194a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800194c:	4293      	cmp	r3, r2
 800194e:	d119      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d10f      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 020f 	bic.w	r2, r3, #15
 80019c6:	4965      	ldr	r1, [pc, #404]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e073      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4936      	ldr	r1, [pc, #216]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f8da 	bl	8000c44 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f8d6 	bl	8000c44 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e053      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d210      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 020f 	bic.w	r2, r3, #15
 8001ad2:	4922      	ldr	r1, [pc, #136]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	@ (8001b64 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <HAL_RCC_ClockConfig+0x1d0>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_ClockConfig+0x1d4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f836 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08003e68 	.word	0x08003e68
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b090      	sub	sp, #64	@ 0x40
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80a1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e09b      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ba8:	e09b      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bae:	e098      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bba:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d028      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4b47      	ldr	r3, [pc, #284]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bdc:	fb03 f201 	mul.w	r2, r3, r1
 8001be0:	2300      	movs	r3, #0
 8001be2:	fb00 f303 	mul.w	r3, r0, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	4a43      	ldr	r2, [pc, #268]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bea:	fba0 1202 	umull	r1, r2, r0, r2
 8001bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	61fa      	str	r2, [r7, #28]
 8001c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c0a:	f7fe fb1d 	bl	8000248 <__aeabi_uldivmod>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4613      	mov	r3, r2
 8001c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c16:	e053      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	617a      	str	r2, [r7, #20]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c2a:	f04f 0b00 	mov.w	fp, #0
 8001c2e:	4652      	mov	r2, sl
 8001c30:	465b      	mov	r3, fp
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0159      	lsls	r1, r3, #5
 8001c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c40:	0150      	lsls	r0, r2, #5
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ebb2 080a 	subs.w	r8, r2, sl
 8001c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c62:	ebb2 0408 	subs.w	r4, r2, r8
 8001c66:	eb63 0509 	sbc.w	r5, r3, r9
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	00eb      	lsls	r3, r5, #3
 8001c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c78:	00e2      	lsls	r2, r4, #3
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	eb14 030a 	adds.w	r3, r4, sl
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	eb45 030b 	adc.w	r3, r5, fp
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001caa:	2200      	movs	r2, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb4:	f7fe fac8 	bl	8000248 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3740      	adds	r7, #64	@ 0x40
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	017d7840 	.word	0x017d7840

08001cfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08003e78 	.word	0x08003e78

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	@ (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08003e78 	.word	0x08003e78

08001d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d012      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d8c:	4b69      	ldr	r3, [pc, #420]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a68      	ldr	r2, [pc, #416]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d96:	6093      	str	r3, [r2, #8]
 8001d98:	4b66      	ldr	r3, [pc, #408]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da0:	4964      	ldr	r1, [pc, #400]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d017      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dcc:	4959      	ldr	r1, [pc, #356]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d017      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	494a      	ldr	r1, [pc, #296]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e18:	d101      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 808b 	beq.w	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b3a      	ldr	r3, [pc, #232]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4a39      	ldr	r2, [pc, #228]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e54:	4b37      	ldr	r3, [pc, #220]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a34      	ldr	r2, [pc, #208]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7fe feea 	bl	8000c44 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e74:	f7fe fee6 	bl	8000c44 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	@ 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e38f      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e86:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e92:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d035      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d02e      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb0:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	4a1a      	ldr	r2, [pc, #104]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ed2:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ed8:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d114      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe feae 	bl	8000c44 <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe feaa 	bl	8000c44 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e351      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ee      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f1a:	d111      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	4901      	ldr	r1, [pc, #4]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	0ffffcff 	.word	0x0ffffcff
 8001f40:	4bac      	ldr	r3, [pc, #688]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4aab      	ldr	r2, [pc, #684]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f46:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001f4a:	6093      	str	r3, [r2, #8]
 8001f4c:	4ba9      	ldr	r3, [pc, #676]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	49a6      	ldr	r1, [pc, #664]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d010      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f6a:	4ba2      	ldr	r3, [pc, #648]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f70:	4aa0      	ldr	r2, [pc, #640]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7a:	4b9e      	ldr	r3, [pc, #632]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f84:	499b      	ldr	r1, [pc, #620]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f98:	4b96      	ldr	r3, [pc, #600]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fa6:	4993      	ldr	r1, [pc, #588]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fba:	4b8e      	ldr	r3, [pc, #568]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fc8:	498a      	ldr	r1, [pc, #552]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fdc:	4b85      	ldr	r3, [pc, #532]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fea:	4982      	ldr	r1, [pc, #520]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200c:	4979      	ldr	r1, [pc, #484]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002020:	4b74      	ldr	r3, [pc, #464]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4971      	ldr	r1, [pc, #452]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002042:	4b6c      	ldr	r3, [pc, #432]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002048:	f023 020c 	bic.w	r2, r3, #12
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	4968      	ldr	r1, [pc, #416]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002064:	4b63      	ldr	r3, [pc, #396]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	4960      	ldr	r1, [pc, #384]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002086:	4b5b      	ldr	r3, [pc, #364]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002094:	4957      	ldr	r1, [pc, #348]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020a8:	4b52      	ldr	r3, [pc, #328]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	494f      	ldr	r1, [pc, #316]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020ca:	4b4a      	ldr	r3, [pc, #296]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4946      	ldr	r1, [pc, #280]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020ec:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fa:	493e      	ldr	r1, [pc, #248]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800210e:	4b39      	ldr	r3, [pc, #228]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002114:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211c:	4935      	ldr	r1, [pc, #212]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002130:	4b30      	ldr	r3, [pc, #192]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800213e:	492d      	ldr	r1, [pc, #180]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d011      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002152:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002158:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002160:	4924      	ldr	r1, [pc, #144]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800216c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002170:	d101      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a0:	4914      	ldr	r1, [pc, #80]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c4:	490b      	ldr	r1, [pc, #44]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00f      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e8:	4902      	ldr	r1, [pc, #8]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021f0:	e002      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002204:	4b8a      	ldr	r3, [pc, #552]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800220a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002214:	4986      	ldr	r1, [pc, #536]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002228:	4b81      	ldr	r3, [pc, #516]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800222e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002238:	497d      	ldr	r1, [pc, #500]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d006      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80d6 	beq.w	8002400 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002254:	4b76      	ldr	r3, [pc, #472]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a75      	ldr	r2, [pc, #468]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800225e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002260:	f7fe fcf0 	bl	8000c44 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002268:	f7fe fcec 	bl	8000c44 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	@ 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e195      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800227a:	4b6d      	ldr	r3, [pc, #436]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d021      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11d      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800229a:	4b65      	ldr	r3, [pc, #404]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022a8:	4b61      	ldr	r3, [pc, #388]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ae:	0e1b      	lsrs	r3, r3, #24
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	019a      	lsls	r2, r3, #6
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	4958      	ldr	r1, [pc, #352]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02e      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002300:	d129      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002302:	4b4b      	ldr	r3, [pc, #300]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002310:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002316:	0f1b      	lsrs	r3, r3, #28
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	019a      	lsls	r2, r3, #6
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	061b      	lsls	r3, r3, #24
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	071b      	lsls	r3, r3, #28
 8002336:	493e      	ldr	r1, [pc, #248]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002344:	f023 021f 	bic.w	r2, r3, #31
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	3b01      	subs	r3, #1
 800234e:	4938      	ldr	r1, [pc, #224]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01d      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002362:	4b33      	ldr	r3, [pc, #204]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002368:	0e1b      	lsrs	r3, r3, #24
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002370:	4b2f      	ldr	r3, [pc, #188]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002376:	0f1b      	lsrs	r3, r3, #28
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	019a      	lsls	r2, r3, #6
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	431a      	orrs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	071b      	lsls	r3, r3, #28
 8002396:	4926      	ldr	r1, [pc, #152]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d011      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	019a      	lsls	r2, r3, #6
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	071b      	lsls	r3, r3, #28
 80023c6:	491a      	ldr	r1, [pc, #104]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023ce:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023da:	f7fe fc33 	bl	8000c44 <HAL_GetTick>
 80023de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023e2:	f7fe fc2f 	bl	8000c44 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	@ 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0d8      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	f040 80ce 	bne.w	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7fe fc16 	bl	8000c44 <HAL_GetTick>
 8002418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800241a:	e00b      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800241c:	f7fe fc12 	bl	8000c44 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d904      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0bb      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002434:	4b5e      	ldr	r3, [pc, #376]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800243c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002440:	d0ec      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02e      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d12a      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800246a:	4b51      	ldr	r3, [pc, #324]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002478:	4b4d      	ldr	r3, [pc, #308]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	0f1b      	lsrs	r3, r3, #28
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	019a      	lsls	r2, r3, #6
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	431a      	orrs	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	071b      	lsls	r3, r3, #28
 800249e:	4944      	ldr	r1, [pc, #272]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024a6:	4b42      	ldr	r3, [pc, #264]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	493d      	ldr	r1, [pc, #244]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d022      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024d4:	d11d      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024d6:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	0e1b      	lsrs	r3, r3, #24
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024e4:	4b32      	ldr	r3, [pc, #200]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	0f1b      	lsrs	r3, r3, #28
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	019a      	lsls	r2, r3, #6
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	071b      	lsls	r3, r3, #28
 800250a:	4929      	ldr	r1, [pc, #164]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d028      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800251e:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800252c:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	0c1b      	lsrs	r3, r3, #16
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	019a      	lsls	r2, r3, #6
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	431a      	orrs	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	071b      	lsls	r3, r3, #28
 8002552:	4917      	ldr	r1, [pc, #92]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002560:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	4911      	ldr	r1, [pc, #68]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257c:	f7fe fb62 	bl	8000c44 <HAL_GetTick>
 8002580:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002584:	f7fe fb5e 	bl	8000c44 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e007      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800259e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025a2:	d1ef      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e040      	b.n	8002648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe f97a 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	@ 0x24
 80025e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fbca 	bl	8002d8c <UART_SetConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e022      	b.n	8002648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fe22 	bl	8003254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800261e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800262e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fea9 	bl	8003398 <UART_CheckIdleState>
 8002646:	4603      	mov	r3, r0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002650:	b480      	push	{r7}
 8002652:	b08b      	sub	sp, #44	@ 0x2c
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002662:	2b20      	cmp	r3, #32
 8002664:	d147      	bne.n	80026f6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_UART_Transmit_IT+0x22>
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e040      	b.n	80026f8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	@ 0x21
 800269e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a8:	d107      	bne.n	80026ba <HAL_UART_Transmit_IT+0x6a>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a13      	ldr	r2, [pc, #76]	@ (8002704 <HAL_UART_Transmit_IT+0xb4>)
 80026b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80026b8:	e002      	b.n	80026c0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <HAL_UART_Transmit_IT+0xb8>)
 80026be:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	613b      	str	r3, [r7, #16]
   return(result);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e2:	69f9      	ldr	r1, [r7, #28]
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	e841 2300 	strex	r3, r2, [r1]
 80026ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e6      	bne.n	80026c0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	372c      	adds	r7, #44	@ 0x2c
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	080038f7 	.word	0x080038f7
 8002708:	08003841 	.word	0x08003841

0800270c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	@ 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002720:	2b20      	cmp	r3, #32
 8002722:	d132      	bne.n	800278a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Receive_IT+0x24>
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e02b      	b.n	800278c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d018      	beq.n	800277a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	613b      	str	r3, [r7, #16]
   return(result);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	69f9      	ldr	r1, [r7, #28]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	61bb      	str	r3, [r7, #24]
   return(result);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e6      	bne.n	8002748 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	461a      	mov	r2, r3
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 ff1d 	bl	80035c0 <UART_Start_Receive_IT>
 8002786:	4603      	mov	r3, r0
 8002788:	e000      	b.n	800278c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	@ 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0ba      	sub	sp, #232	@ 0xe8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80027be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80027c2:	4013      	ands	r3, r2
 80027c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80027c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d115      	bne.n	80027fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00f      	beq.n	80027fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 82ac 	beq.w	8002d4a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
      }
      return;
 80027fa:	e2a6      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8117 	beq.w	8002a34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002816:	4b85      	ldr	r3, [pc, #532]	@ (8002a2c <HAL_UART_IRQHandler+0x298>)
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 810a 	beq.w	8002a34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <HAL_UART_IRQHandler+0xbc>
 800282c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d011      	beq.n	8002880 <HAL_UART_IRQHandler+0xec>
 800285c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_UART_IRQHandler+0x11c>
 800288c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2204      	movs	r2, #4
 800289e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e2:	f043 0208 	orr.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_UART_IRQHandler+0x18a>
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00c      	beq.n	800291e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800290c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8212 	beq.w	8002d4e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002966:	2b40      	cmp	r3, #64	@ 0x40
 8002968:	d005      	beq.n	8002976 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800296a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800296e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04f      	beq.n	8002a16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fee8 	bl	800374c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	d141      	bne.n	8002a0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3308      	adds	r3, #8
 8002990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3308      	adds	r3, #8
 80029b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1d9      	bne.n	800298a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e2:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <HAL_UART_IRQHandler+0x29c>)
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fb58 	bl	80010a0 <HAL_DMA_Abort_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a00:	4610      	mov	r0, r2
 8002a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00f      	b.n	8002a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f9ac 	bl	8002d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00b      	b.n	8002a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f9a8 	bl	8002d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e007      	b.n	8002a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f9a4 	bl	8002d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002a24:	e193      	b.n	8002d4e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a26:	bf00      	nop
    return;
 8002a28:	e191      	b.n	8002d4e <HAL_UART_IRQHandler+0x5ba>
 8002a2a:	bf00      	nop
 8002a2c:	04000120 	.word	0x04000120
 8002a30:	08003815 	.word	0x08003815

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f040 814c 	bne.w	8002cd6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8145 	beq.w	8002cd6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 813e 	beq.w	8002cd6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6c:	2b40      	cmp	r3, #64	@ 0x40
 8002a6e:	f040 80b6 	bne.w	8002bde <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8165 	beq.w	8002d52 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a92:	429a      	cmp	r2, r3
 8002a94:	f080 815d 	bcs.w	8002d52 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aac:	f000 8086 	beq.w	8002bbc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ade:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1da      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3308      	adds	r3, #8
 8002b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3308      	adds	r3, #8
 8002b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e1      	bne.n	8002afa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3308      	adds	r3, #8
 8002b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e3      	bne.n	8002b36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b8c:	f023 0310 	bic.w	r3, r3, #16
 8002b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ba0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e4      	bne.n	8002b7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fa02 	bl	8000fc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd ff76 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bdc:	e0b9      	b.n	8002d52 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80ab 	beq.w	8002d56 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a6 	beq.w	8002d56 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e4      	bne.n	8002c0a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3308      	adds	r3, #8
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c64:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e3      	bne.n	8002c40 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 0310 	bic.w	r3, r3, #16
 8002ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	617b      	str	r3, [r7, #20]
   return(result);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1e4      	bne.n	8002c8c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fefa 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cd4:	e03f      	b.n	8002d56 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00e      	beq.n	8002d00 <HAL_UART_IRQHandler+0x56c>
 8002ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f83d 	bl	8002d78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cfe:	e02d      	b.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01c      	beq.n	8002d5a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
    }
    return;
 8002d28:	e017      	b.n	8002d5a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fe37 	bl	80039b6 <UART_EndTransmit_IT>
    return;
 8002d48:	e008      	b.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8002d4a:	bf00      	nop
 8002d4c:	e006      	b.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
    return;
 8002d4e:	bf00      	nop
 8002d50:	e004      	b.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8002d52:	bf00      	nop
 8002d54:	e002      	b.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HAL_UART_IRQHandler+0x5c8>
    return;
 8002d5a:	bf00      	nop
  }

}
 8002d5c:	37e8      	adds	r7, #232	@ 0xe8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop

08002d64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4ba6      	ldr	r3, [pc, #664]	@ (8003050 <UART_SetConfig+0x2c4>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a94      	ldr	r2, [pc, #592]	@ (8003054 <UART_SetConfig+0x2c8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d120      	bne.n	8002e4a <UART_SetConfig+0xbe>
 8002e08:	4b93      	ldr	r3, [pc, #588]	@ (8003058 <UART_SetConfig+0x2cc>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d816      	bhi.n	8002e44 <UART_SetConfig+0xb8>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <UART_SetConfig+0x90>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e39 	.word	0x08002e39
 8002e24:	08002e33 	.word	0x08002e33
 8002e28:	08002e3f 	.word	0x08002e3f
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e150      	b.n	80030d4 <UART_SetConfig+0x348>
 8002e32:	2302      	movs	r3, #2
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e14d      	b.n	80030d4 <UART_SetConfig+0x348>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e14a      	b.n	80030d4 <UART_SetConfig+0x348>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e147      	b.n	80030d4 <UART_SetConfig+0x348>
 8002e44:	2310      	movs	r3, #16
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e144      	b.n	80030d4 <UART_SetConfig+0x348>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a83      	ldr	r2, [pc, #524]	@ (800305c <UART_SetConfig+0x2d0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d132      	bne.n	8002eba <UART_SetConfig+0x12e>
 8002e54:	4b80      	ldr	r3, [pc, #512]	@ (8003058 <UART_SetConfig+0x2cc>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d828      	bhi.n	8002eb4 <UART_SetConfig+0x128>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <UART_SetConfig+0xdc>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002eb5 	.word	0x08002eb5
 8002e70:	08002eb5 	.word	0x08002eb5
 8002e74:	08002eb5 	.word	0x08002eb5
 8002e78:	08002ea9 	.word	0x08002ea9
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002ea3 	.word	0x08002ea3
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002eb5 	.word	0x08002eb5
 8002e98:	08002eaf 	.word	0x08002eaf
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e118      	b.n	80030d4 <UART_SetConfig+0x348>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e115      	b.n	80030d4 <UART_SetConfig+0x348>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e112      	b.n	80030d4 <UART_SetConfig+0x348>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e10f      	b.n	80030d4 <UART_SetConfig+0x348>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e10c      	b.n	80030d4 <UART_SetConfig+0x348>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a68      	ldr	r2, [pc, #416]	@ (8003060 <UART_SetConfig+0x2d4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <UART_SetConfig+0x17a>
 8002ec4:	4b64      	ldr	r3, [pc, #400]	@ (8003058 <UART_SetConfig+0x2cc>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ece:	2b30      	cmp	r3, #48	@ 0x30
 8002ed0:	d013      	beq.n	8002efa <UART_SetConfig+0x16e>
 8002ed2:	2b30      	cmp	r3, #48	@ 0x30
 8002ed4:	d814      	bhi.n	8002f00 <UART_SetConfig+0x174>
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d009      	beq.n	8002eee <UART_SetConfig+0x162>
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d810      	bhi.n	8002f00 <UART_SetConfig+0x174>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x15c>
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d006      	beq.n	8002ef4 <UART_SetConfig+0x168>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x174>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e0f2      	b.n	80030d4 <UART_SetConfig+0x348>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e0ef      	b.n	80030d4 <UART_SetConfig+0x348>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e0ec      	b.n	80030d4 <UART_SetConfig+0x348>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e0e9      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e0e6      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a56      	ldr	r2, [pc, #344]	@ (8003064 <UART_SetConfig+0x2d8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d120      	bne.n	8002f52 <UART_SetConfig+0x1c6>
 8002f10:	4b51      	ldr	r3, [pc, #324]	@ (8003058 <UART_SetConfig+0x2cc>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f1c:	d013      	beq.n	8002f46 <UART_SetConfig+0x1ba>
 8002f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f20:	d814      	bhi.n	8002f4c <UART_SetConfig+0x1c0>
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d009      	beq.n	8002f3a <UART_SetConfig+0x1ae>
 8002f26:	2b80      	cmp	r3, #128	@ 0x80
 8002f28:	d810      	bhi.n	8002f4c <UART_SetConfig+0x1c0>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <UART_SetConfig+0x1a8>
 8002f2e:	2b40      	cmp	r3, #64	@ 0x40
 8002f30:	d006      	beq.n	8002f40 <UART_SetConfig+0x1b4>
 8002f32:	e00b      	b.n	8002f4c <UART_SetConfig+0x1c0>
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e0cc      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e0c9      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f40:	2304      	movs	r3, #4
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e0c6      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f46:	2308      	movs	r3, #8
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e0c3      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e0c0      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a44      	ldr	r2, [pc, #272]	@ (8003068 <UART_SetConfig+0x2dc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d125      	bne.n	8002fa8 <UART_SetConfig+0x21c>
 8002f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003058 <UART_SetConfig+0x2cc>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f6a:	d017      	beq.n	8002f9c <UART_SetConfig+0x210>
 8002f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f70:	d817      	bhi.n	8002fa2 <UART_SetConfig+0x216>
 8002f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f76:	d00b      	beq.n	8002f90 <UART_SetConfig+0x204>
 8002f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f7c:	d811      	bhi.n	8002fa2 <UART_SetConfig+0x216>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <UART_SetConfig+0x1fe>
 8002f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f86:	d006      	beq.n	8002f96 <UART_SetConfig+0x20a>
 8002f88:	e00b      	b.n	8002fa2 <UART_SetConfig+0x216>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e0a1      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f90:	2302      	movs	r3, #2
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e09e      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f96:	2304      	movs	r3, #4
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e09b      	b.n	80030d4 <UART_SetConfig+0x348>
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e098      	b.n	80030d4 <UART_SetConfig+0x348>
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e095      	b.n	80030d4 <UART_SetConfig+0x348>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2f      	ldr	r2, [pc, #188]	@ (800306c <UART_SetConfig+0x2e0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d125      	bne.n	8002ffe <UART_SetConfig+0x272>
 8002fb2:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <UART_SetConfig+0x2cc>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fc0:	d017      	beq.n	8002ff2 <UART_SetConfig+0x266>
 8002fc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fc6:	d817      	bhi.n	8002ff8 <UART_SetConfig+0x26c>
 8002fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fcc:	d00b      	beq.n	8002fe6 <UART_SetConfig+0x25a>
 8002fce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fd2:	d811      	bhi.n	8002ff8 <UART_SetConfig+0x26c>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <UART_SetConfig+0x254>
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fdc:	d006      	beq.n	8002fec <UART_SetConfig+0x260>
 8002fde:	e00b      	b.n	8002ff8 <UART_SetConfig+0x26c>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e076      	b.n	80030d4 <UART_SetConfig+0x348>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e073      	b.n	80030d4 <UART_SetConfig+0x348>
 8002fec:	2304      	movs	r3, #4
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e070      	b.n	80030d4 <UART_SetConfig+0x348>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e06d      	b.n	80030d4 <UART_SetConfig+0x348>
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e06a      	b.n	80030d4 <UART_SetConfig+0x348>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <UART_SetConfig+0x2e4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d138      	bne.n	800307a <UART_SetConfig+0x2ee>
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <UART_SetConfig+0x2cc>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003012:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003016:	d017      	beq.n	8003048 <UART_SetConfig+0x2bc>
 8003018:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800301c:	d82a      	bhi.n	8003074 <UART_SetConfig+0x2e8>
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003022:	d00b      	beq.n	800303c <UART_SetConfig+0x2b0>
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003028:	d824      	bhi.n	8003074 <UART_SetConfig+0x2e8>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <UART_SetConfig+0x2aa>
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003032:	d006      	beq.n	8003042 <UART_SetConfig+0x2b6>
 8003034:	e01e      	b.n	8003074 <UART_SetConfig+0x2e8>
 8003036:	2300      	movs	r3, #0
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e04b      	b.n	80030d4 <UART_SetConfig+0x348>
 800303c:	2302      	movs	r3, #2
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e048      	b.n	80030d4 <UART_SetConfig+0x348>
 8003042:	2304      	movs	r3, #4
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e045      	b.n	80030d4 <UART_SetConfig+0x348>
 8003048:	2308      	movs	r3, #8
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e042      	b.n	80030d4 <UART_SetConfig+0x348>
 800304e:	bf00      	nop
 8003050:	efff69f3 	.word	0xefff69f3
 8003054:	40011000 	.word	0x40011000
 8003058:	40023800 	.word	0x40023800
 800305c:	40004400 	.word	0x40004400
 8003060:	40004800 	.word	0x40004800
 8003064:	40004c00 	.word	0x40004c00
 8003068:	40005000 	.word	0x40005000
 800306c:	40011400 	.word	0x40011400
 8003070:	40007800 	.word	0x40007800
 8003074:	2310      	movs	r3, #16
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e02c      	b.n	80030d4 <UART_SetConfig+0x348>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a72      	ldr	r2, [pc, #456]	@ (8003248 <UART_SetConfig+0x4bc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d125      	bne.n	80030d0 <UART_SetConfig+0x344>
 8003084:	4b71      	ldr	r3, [pc, #452]	@ (800324c <UART_SetConfig+0x4c0>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800308e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003092:	d017      	beq.n	80030c4 <UART_SetConfig+0x338>
 8003094:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003098:	d817      	bhi.n	80030ca <UART_SetConfig+0x33e>
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800309e:	d00b      	beq.n	80030b8 <UART_SetConfig+0x32c>
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a4:	d811      	bhi.n	80030ca <UART_SetConfig+0x33e>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <UART_SetConfig+0x326>
 80030aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030ae:	d006      	beq.n	80030be <UART_SetConfig+0x332>
 80030b0:	e00b      	b.n	80030ca <UART_SetConfig+0x33e>
 80030b2:	2300      	movs	r3, #0
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e00d      	b.n	80030d4 <UART_SetConfig+0x348>
 80030b8:	2302      	movs	r3, #2
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e00a      	b.n	80030d4 <UART_SetConfig+0x348>
 80030be:	2304      	movs	r3, #4
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e007      	b.n	80030d4 <UART_SetConfig+0x348>
 80030c4:	2308      	movs	r3, #8
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e004      	b.n	80030d4 <UART_SetConfig+0x348>
 80030ca:	2310      	movs	r3, #16
 80030cc:	77fb      	strb	r3, [r7, #31]
 80030ce:	e001      	b.n	80030d4 <UART_SetConfig+0x348>
 80030d0:	2310      	movs	r3, #16
 80030d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030dc:	d15b      	bne.n	8003196 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80030de:	7ffb      	ldrb	r3, [r7, #31]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d828      	bhi.n	8003136 <UART_SetConfig+0x3aa>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <UART_SetConfig+0x360>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003111 	.word	0x08003111
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003121 	.word	0x08003121
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003127 	.word	0x08003127
 8003100:	08003137 	.word	0x08003137
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
 800310c:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003110:	f7fe fe00 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8003114:	61b8      	str	r0, [r7, #24]
        break;
 8003116:	e013      	b.n	8003140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003118:	f7fe fe10 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800311c:	61b8      	str	r0, [r7, #24]
        break;
 800311e:	e00f      	b.n	8003140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003120:	4b4b      	ldr	r3, [pc, #300]	@ (8003250 <UART_SetConfig+0x4c4>)
 8003122:	61bb      	str	r3, [r7, #24]
        break;
 8003124:	e00c      	b.n	8003140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003126:	f7fe fd23 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 800312a:	61b8      	str	r0, [r7, #24]
        break;
 800312c:	e008      	b.n	8003140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003132:	61bb      	str	r3, [r7, #24]
        break;
 8003134:	e004      	b.n	8003140 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	77bb      	strb	r3, [r7, #30]
        break;
 800313e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d074      	beq.n	8003230 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	005a      	lsls	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d916      	bls.n	8003190 <UART_SetConfig+0x404>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d212      	bcs.n	8003190 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	b29b      	uxth	r3, r3
 800316e:	f023 030f 	bic.w	r3, r3, #15
 8003172:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	b29a      	uxth	r2, r3
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	4313      	orrs	r3, r2
 8003184:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	89fa      	ldrh	r2, [r7, #14]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	e04f      	b.n	8003230 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	77bb      	strb	r3, [r7, #30]
 8003194:	e04c      	b.n	8003230 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003196:	7ffb      	ldrb	r3, [r7, #31]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d828      	bhi.n	80031ee <UART_SetConfig+0x462>
 800319c:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x418>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031d1 	.word	0x080031d1
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ef 	.word	0x080031ef
 80031b4:	080031df 	.word	0x080031df
 80031b8:	080031ef 	.word	0x080031ef
 80031bc:	080031ef 	.word	0x080031ef
 80031c0:	080031ef 	.word	0x080031ef
 80031c4:	080031e7 	.word	0x080031e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe fda4 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80031cc:	61b8      	str	r0, [r7, #24]
        break;
 80031ce:	e013      	b.n	80031f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7fe fdb4 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80031d4:	61b8      	str	r0, [r7, #24]
        break;
 80031d6:	e00f      	b.n	80031f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <UART_SetConfig+0x4c4>)
 80031da:	61bb      	str	r3, [r7, #24]
        break;
 80031dc:	e00c      	b.n	80031f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031de:	f7fe fcc7 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80031e2:	61b8      	str	r0, [r7, #24]
        break;
 80031e4:	e008      	b.n	80031f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ea:	61bb      	str	r3, [r7, #24]
        break;
 80031ec:	e004      	b.n	80031f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	77bb      	strb	r3, [r7, #30]
        break;
 80031f6:	bf00      	nop
    }

    if (pclk != 0U)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d018      	beq.n	8003230 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	085a      	lsrs	r2, r3, #1
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b0f      	cmp	r3, #15
 8003216:	d909      	bls.n	800322c <UART_SetConfig+0x4a0>
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321e:	d205      	bcs.n	800322c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	e001      	b.n	8003230 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800323c:	7fbb      	ldrb	r3, [r7, #30]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40007c00 	.word	0x40007c00
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400

08003254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01a      	beq.n	800336a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003352:	d10a      	bne.n	800336a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033a8:	f7fd fc4c 	bl	8000c44 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d10e      	bne.n	80033da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f831 	bl	8003432 <UART_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e027      	b.n	800342a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d10e      	bne.n	8003406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f81b 	bl	8003432 <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e011      	b.n	800342a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b09c      	sub	sp, #112	@ 0x70
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4613      	mov	r3, r2
 8003440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003442:	e0a7      	b.n	8003594 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	f000 80a3 	beq.w	8003594 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fd fbf9 	bl	8000c44 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <UART_WaitOnFlagUntilTimeout+0x32>
 800345e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003460:	2b00      	cmp	r3, #0
 8003462:	d13f      	bne.n	80034e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003474:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003478:	667b      	str	r3, [r7, #100]	@ 0x64
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003482:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003484:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003488:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e6      	bne.n	8003464 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3308      	adds	r3, #8
 800349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3308      	adds	r3, #8
 80034b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80034b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80034b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80034c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e068      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d050      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003500:	d148      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800350a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003520:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352a:	637b      	str	r3, [r7, #52]	@ 0x34
 800352c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e6      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	613b      	str	r3, [r7, #16]
   return(result);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3308      	adds	r3, #8
 800355c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800355e:	623a      	str	r2, [r7, #32]
 8003560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	69f9      	ldr	r1, [r7, #28]
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	61bb      	str	r3, [r7, #24]
   return(result);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e5      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e010      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f43f af48 	beq.w	8003444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3770      	adds	r7, #112	@ 0x70
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b097      	sub	sp, #92	@ 0x5c
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	d10e      	bne.n	8003612 <UART_Start_Receive_IT+0x52>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <UART_Start_Receive_IT+0x48>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003602:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003606:	e02d      	b.n	8003664 <UART_Start_Receive_IT+0xa4>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	22ff      	movs	r2, #255	@ 0xff
 800360c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003610:	e028      	b.n	8003664 <UART_Start_Receive_IT+0xa4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <UART_Start_Receive_IT+0x76>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <UART_Start_Receive_IT+0x6c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	22ff      	movs	r2, #255	@ 0xff
 8003626:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800362a:	e01b      	b.n	8003664 <UART_Start_Receive_IT+0xa4>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	227f      	movs	r2, #127	@ 0x7f
 8003630:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003634:	e016      	b.n	8003664 <UART_Start_Receive_IT+0xa4>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800363e:	d10d      	bne.n	800365c <UART_Start_Receive_IT+0x9c>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <UART_Start_Receive_IT+0x92>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	227f      	movs	r2, #127	@ 0x7f
 800364c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003650:	e008      	b.n	8003664 <UART_Start_Receive_IT+0xa4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	223f      	movs	r2, #63	@ 0x3f
 8003656:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800365a:	e003      	b.n	8003664 <UART_Start_Receive_IT+0xa4>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2222      	movs	r2, #34	@ 0x22
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3308      	adds	r3, #8
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	657b      	str	r3, [r7, #84]	@ 0x54
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003694:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003696:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800369a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80036a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b0:	d107      	bne.n	80036c2 <UART_Start_Receive_IT+0x102>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a21      	ldr	r2, [pc, #132]	@ (8003744 <UART_Start_Receive_IT+0x184>)
 80036be:	669a      	str	r2, [r3, #104]	@ 0x68
 80036c0:	e002      	b.n	80036c8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a20      	ldr	r2, [pc, #128]	@ (8003748 <UART_Start_Receive_IT+0x188>)
 80036c6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d019      	beq.n	8003704 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80036e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e6      	bne.n	80036d0 <UART_Start_Receive_IT+0x110>
 8003702:	e018      	b.n	8003736 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f043 0320 	orr.w	r3, r3, #32
 8003718:	653b      	str	r3, [r7, #80]	@ 0x50
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	69f9      	ldr	r1, [r7, #28]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e6      	bne.n	8003704 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	375c      	adds	r7, #92	@ 0x5c
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	08003b71 	.word	0x08003b71
 8003748:	08003a0b 	.word	0x08003a0b

0800374c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b095      	sub	sp, #84	@ 0x54
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
 8003774:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e6      	bne.n	8003754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3308      	adds	r3, #8
 800378c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	61fb      	str	r3, [r7, #28]
   return(result);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d118      	bne.n	80037f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0310 	bic.w	r3, r3, #16
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	613b      	str	r3, [r7, #16]
   return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e6      	bne.n	80037c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003808:	bf00      	nop
 800380a:	3754      	adds	r7, #84	@ 0x54
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fa96 	bl	8002d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b08f      	sub	sp, #60	@ 0x3c
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800384c:	2b21      	cmp	r3, #33	@ 0x21
 800384e:	d14c      	bne.n	80038ea <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d132      	bne.n	80038c2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	61fb      	str	r3, [r7, #28]
   return(result);
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003870:	637b      	str	r3, [r7, #52]	@ 0x34
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800387c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e6      	bne.n	800385c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	60bb      	str	r3, [r7, #8]
   return(result);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e6      	bne.n	800388e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038c0:	e013      	b.n	80038ea <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80038ea:	bf00      	nop
 80038ec:	373c      	adds	r7, #60	@ 0x3c
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b091      	sub	sp, #68	@ 0x44
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003902:	2b21      	cmp	r3, #33	@ 0x21
 8003904:	d151      	bne.n	80039aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d132      	bne.n	8003978 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	623b      	str	r3, [r7, #32]
   return(result);
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003930:	633b      	str	r3, [r7, #48]	@ 0x30
 8003932:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e6      	bne.n	8003912 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	60fb      	str	r3, [r7, #12]
   return(result);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003958:	637b      	str	r3, [r7, #52]	@ 0x34
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	617b      	str	r3, [r7, #20]
   return(result);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e6      	bne.n	8003944 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003976:	e018      	b.n	80039aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800397e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80039aa:	bf00      	nop
 80039ac:	3744      	adds	r7, #68	@ 0x44
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b088      	sub	sp, #32
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e6      	bne.n	80039be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fd f879 	bl	8000af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b096      	sub	sp, #88	@ 0x58
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a18:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a22:	2b22      	cmp	r3, #34	@ 0x22
 8003a24:	f040 8098 	bne.w	8003b58 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003a36:	b2d9      	uxtb	r1, r3
 8003a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	400a      	ands	r2, r1
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d17b      	bne.n	8003b68 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e6      	bne.n	8003a70 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ac2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d12e      	bne.n	8003b50 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 0310 	bic.w	r3, r3, #16
 8003b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	69b9      	ldr	r1, [r7, #24]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	617b      	str	r3, [r7, #20]
   return(result);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d103      	bne.n	8003b40 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc ffbd 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b4e:	e00b      	b.n	8003b68 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fc ffa5 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8003b56:	e007      	b.n	8003b68 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0208 	orr.w	r2, r2, #8
 8003b66:	619a      	str	r2, [r3, #24]
}
 8003b68:	bf00      	nop
 8003b6a:	3758      	adds	r7, #88	@ 0x58
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b096      	sub	sp, #88	@ 0x58
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b7e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b88:	2b22      	cmp	r3, #34	@ 0x22
 8003b8a:	f040 8098 	bne.w	8003cbe <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b9e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8003ba2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	1c9a      	adds	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d17b      	bne.n	8003cce <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e5      	bne.n	8003c08 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d12e      	bne.n	8003cb6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e6      	bne.n	8003c5e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d103      	bne.n	8003ca6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fc ff0a 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cb4:	e00b      	b.n	8003cce <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fc fef2 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8003cbc:	e007      	b.n	8003cce <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0208 	orr.w	r2, r2, #8
 8003ccc:	619a      	str	r2, [r3, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	3758      	adds	r7, #88	@ 0x58
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b08c      	sub	sp, #48	@ 0x30
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d142      	bne.n	8003d74 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03b      	b.n	8003d76 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fc55 	bl	80035c0 <UART_Start_Receive_IT>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d124      	bne.n	8003d6e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d11d      	bne.n	8003d68 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2210      	movs	r2, #16
 8003d32:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	617b      	str	r3, [r7, #20]
   return(result);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f043 0310 	orr.w	r3, r3, #16
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d54:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6a39      	ldr	r1, [r7, #32]
 8003d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8003d66:	e002      	b.n	8003d6e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d72:	e000      	b.n	8003d76 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3730      	adds	r7, #48	@ 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <memset>:
 8003d7e:	4402      	add	r2, r0
 8003d80:	4603      	mov	r3, r0
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d100      	bne.n	8003d88 <memset+0xa>
 8003d86:	4770      	bx	lr
 8003d88:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8c:	e7f9      	b.n	8003d82 <memset+0x4>

08003d8e <strncmp>:
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	b16a      	cbz	r2, 8003dae <strncmp+0x20>
 8003d92:	3901      	subs	r1, #1
 8003d94:	1884      	adds	r4, r0, r2
 8003d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d103      	bne.n	8003daa <strncmp+0x1c>
 8003da2:	42a0      	cmp	r0, r4
 8003da4:	d001      	beq.n	8003daa <strncmp+0x1c>
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d1f5      	bne.n	8003d96 <strncmp+0x8>
 8003daa:	1ad0      	subs	r0, r2, r3
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	4610      	mov	r0, r2
 8003db0:	e7fc      	b.n	8003dac <strncmp+0x1e>

08003db2 <strncpy>:
 8003db2:	b510      	push	{r4, lr}
 8003db4:	3901      	subs	r1, #1
 8003db6:	4603      	mov	r3, r0
 8003db8:	b132      	cbz	r2, 8003dc8 <strncpy+0x16>
 8003dba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003dbe:	f803 4b01 	strb.w	r4, [r3], #1
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	2c00      	cmp	r4, #0
 8003dc6:	d1f7      	bne.n	8003db8 <strncpy+0x6>
 8003dc8:	441a      	add	r2, r3
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <strncpy+0x20>
 8003dd0:	bd10      	pop	{r4, pc}
 8003dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd6:	e7f9      	b.n	8003dcc <strncpy+0x1a>

08003dd8 <__libc_init_array>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	4d0d      	ldr	r5, [pc, #52]	@ (8003e10 <__libc_init_array+0x38>)
 8003ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8003e14 <__libc_init_array+0x3c>)
 8003dde:	1b64      	subs	r4, r4, r5
 8003de0:	10a4      	asrs	r4, r4, #2
 8003de2:	2600      	movs	r6, #0
 8003de4:	42a6      	cmp	r6, r4
 8003de6:	d109      	bne.n	8003dfc <__libc_init_array+0x24>
 8003de8:	4d0b      	ldr	r5, [pc, #44]	@ (8003e18 <__libc_init_array+0x40>)
 8003dea:	4c0c      	ldr	r4, [pc, #48]	@ (8003e1c <__libc_init_array+0x44>)
 8003dec:	f000 f818 	bl	8003e20 <_init>
 8003df0:	1b64      	subs	r4, r4, r5
 8003df2:	10a4      	asrs	r4, r4, #2
 8003df4:	2600      	movs	r6, #0
 8003df6:	42a6      	cmp	r6, r4
 8003df8:	d105      	bne.n	8003e06 <__libc_init_array+0x2e>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e00:	4798      	blx	r3
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7ee      	b.n	8003de4 <__libc_init_array+0xc>
 8003e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0a:	4798      	blx	r3
 8003e0c:	3601      	adds	r6, #1
 8003e0e:	e7f2      	b.n	8003df6 <__libc_init_array+0x1e>
 8003e10:	08003e88 	.word	0x08003e88
 8003e14:	08003e88 	.word	0x08003e88
 8003e18:	08003e88 	.word	0x08003e88
 8003e1c:	08003e8c 	.word	0x08003e8c

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
